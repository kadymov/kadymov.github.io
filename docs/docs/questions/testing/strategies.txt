Стратегии тестирования frontend-приложений

Этот вопрос касается различных подходов к тестированию фронтенд-приложений, включая unit, integration и e2e тестирование, а также современные инструменты и best practices для обеспечения качества кода.

Пирамида тестирования

Unit тестирование - основание пирамиды
Unit тесты проверяют отдельные функции, компоненты или модули в изоляции. Они должны составлять около 70% всех тестов.

Тестирование утилитных функций проверяет простые функции валидации, форматирования и вычислений. Например, функция validateEmail должна корректно определять валидные и невалидные email адреса, включая edge cases как null, undefined или числа.

Функция formatCurrency должна правильно форматировать числа в валютном формате, поддерживать разные валюты и обрабатывать отрицательные значения и центы.

Component тестирование для React
Тестирование React компонентов проверяет рендеринг, взаимодействие с пользователем и различные состояния компонента.

UserCard компонент должен корректно отображать информацию пользователя, показывать состояние загрузки, обрабатывать случай отсутствия данных и правильно вызывать callback функции при клике на кнопки.

Тесты должны проверять все состояния компонента: загрузка, успешное отображение данных, ошибка, пустое состояние. Важно тестировать пользовательские взаимодействия через fireEvent или userEvent.

Custom Hooks тестирование
Кастомные хуки тестируются с помощью renderHook из React Testing Library. useCounter хук должен правильно инициализироваться, увеличивать и уменьшать значение, сбрасывать к начальному значению и устанавливать конкретное значение.

Важно обернуть изменения состояния в act функцию для корректного обновления компонентов.

Integration тестирование

Тестирование взаимодействия компонентов
Integration тесты проверяют как компоненты работают вместе. UserList компонент должен загружать пользователей через API, отображать их в виде карточек, обрабатывать редактирование и удаление.

Такие тесты включают мокирование внешних зависимостей как API сервисы, проверку состояний загрузки и ошибок, взаимодействие между родительскими и дочерними компонентами.

При тестировании удаления проверяется показ диалога подтверждения, вызов API при подтверждении и обновление списка после успешного удаления.

Mock и stubbing

Мокирование API вызовов
Мокирование fetch функции позволяет тестировать сетевые запросы без реальных HTTP вызовов. userService должен корректно обрабатывать успешные ответы, HTTP ошибки и сетевые проблемы.

Тесты проверяют правильность URL, HTTP методов, заголовков и тела запроса. Мокирование позволяет симулировать различные сценарии: успешные ответы, серверные ошибки, проблемы с сетью.

Мокирование внешних зависимостей
Внешние зависимости как analytics, localStorage или browser APIs мокируются для изоляции тестируемого кода. AnalyticsButton должен вызывать analytics.track с правильными параметрами при клике.

Jest позволяет мокировать целые модули через jest.mock, что полезно для изоляции компонентов от внешних сервисов.

E2E тестирование

Playwright тесты
End-to-end тесты проверяют полные пользовательские сценарии в реальном браузере. Тестируется создание нового пользователя: переход на форму, заполнение полей, отправка и проверка результата.

Тесты должны проверять валидацию форм, обработку ошибок сети, responsive дизайн и keyboard navigation. Playwright позволяет тестировать в разных браузерах и на разных устройствах.

Важно тестировать graceful degradation - как приложение ведет себя при отключении сети или недоступности API.

Cypress тесты
Cypress предоставляет интерактивную среду тестирования с возможностью мокирования сетевых запросов через cy.intercept. Тесты могут проверять полные пользовательские flow и responsive поведение.

Cypress имеет удобный API для взаимодействия с элементами и ожидания изменений состояния.

Visual Regression тестирование

Chromatic со Storybook
Visual regression тесты проверяют что внешний вид компонентов не изменился неожиданно. Storybook stories служат базой для визуального тестирования всех состояний компонентов.

Chromatic автоматически создает скриншоты stories и сравнивает их с предыдущими версиями, выявляя визуальные изменения.

Percy Visual Testing
Percy интегрируется с e2e тестами для создания скриншотов полных страниц. Тестируется дизайн на разных разрешениях экрана и в разных темах оформления.

Visual regression тестирование особенно важно для дизайн-систем и компонентных библиотек.

Accessibility тестирование

Jest с jest-axe
Accessibility тесты проверяют что интерфейс доступен для пользователей с ограниченными возможностями. jest-axe автоматически находит нарушения WCAG guidelines.

Тесты проверяют наличие proper labels для форм, корректные ARIA attributes для error messages и keyboard navigation.

Playwright с axe-playwright
E2E accessibility тесты проверяют доступность на уровне всей страницы. Тестируется keyboard navigation, screen reader compatibility и соответствие WCAG стандартам.

Performance тестирование

Lighthouse CI
Lighthouse CI автоматически проверяет метрики производительности, accessibility, best practices и SEO. Можно установить минимальные пороги для Core Web Vitals.

Bundle Size тестирование
Тесты размера бандла предотвращают неконтролируемый рост размера приложения. Устанавливаются лимиты для main и vendor bundles.

Test Utils и Helpers

Custom Render для React
Кастомная render функция оборачивает компоненты в необходимые providers: Router, Theme, QueryClient. Это упрощает настройку тестовой среды и обеспечивает консистентность.

Mock Factories
Фабрики для создания тестовых данных используют faker для генерации реалистичных моковых объектов. createMockUser создает пользователя с случайными, но валидными данными.

Test Configuration

Jest Configuration
Настройка Jest включает testEnvironment для DOM тестирования, setupFiles для глобальной настройки, moduleNameMapping для алиасов путей и collectCoverageFrom для метрик покрытия кода.

Устанавливаются пороги покрытия кода: минимум 80% для branches, functions, lines и statements.

Best Practices

Пирамида тестирования рекомендует 70% unit тестов, 20% integration и 10% e2e тестов. Это обеспечивает быстрое выполнение тестов и раннее обнаружение проблем.

Test-first approach означает написание тестов до или вместе с кодом, что улучшает дизайн и покрытие.

Один assert на тест фокусирует внимание на одном аспекте функциональности.

Дескриптивные названия делают тесты читаемыми как спецификация требований.

Изоляция тестов обеспечивает независимость и предотвращает влияние тестов друг на друга.

Тестируйте поведение, не реализацию - фокусируйтесь на пользовательском опыте, а не на внутренних деталях.

Используйте data-testid для стабильных селекторов, которые не зависят от CSS классов или структуры DOM.

Мокайте внешние зависимости: API, localStorage, timers для изоляции и контроля тестовой среды.

CI/CD Integration

Continuous Integration автоматически запускает тесты при каждом commit и pull request. Pipeline включает unit тесты, integration тесты, сборку приложения и e2e тесты.

Результаты покрытия кода загружаются в сервисы как Codecov для отслеживания метрик качества.

Рекомендации для собеседования

На Senior-уровне ожидается глубокое понимание стратегий тестирования, опыт с различными инструментами как Jest, React Testing Library, Playwright, Cypress, знание best practices и anti-patterns, понимание TDD/BDD подходов, опыт с визуальным и accessibility тестированием.

Частые вопросы на собеседованиях:
Разница между unit, integration и e2e тестами?
Как тестировать асинхронный код и хуки?
Что такое test doubles - mock, stub, spy?
Как организовать тесты в большом проекте?
Как тестировать пользовательские взаимодействия?

Этот материал связан с темами тестирования производительности, типизации тестов и тестирования состояния.
