{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcda \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e: JavaScript, React \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u042d\u0442\u0430 \u0431\u0440\u043e\u0448\u044e\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 25 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e senior frontend \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 JavaScript, React, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c. \ud83d\udccb \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 README.md - \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0432\u0441\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 README_small.md - \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0434\u043b\u044f Senior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 README.txt - TTS-\u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \ud83c\udfa8 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0442\u0440\u0435\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u0445: \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f (.md) - \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430, \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 best practices \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f (_small.md) - \u0421\u0436\u0430\u0442\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0434\u043b\u044f Senior-\u0443\u0440\u043e\u0432\u043d\u044f, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0431\u0430\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \ud83c\udfa7 TTS \u0432\u0435\u0440\u0441\u0438\u044f (.txt) - \u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0437\u0432\u0443\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u0435\u0437 markdown-\u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \ud83c\udfaf \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfa7 TTS \u0432\u0435\u0440\u0441\u0438\u044f \ud83d\udfe8 JavaScript (7 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432) Event Loop, Microtasks \u0438 Macrotasks \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Currying \u0432 JavaScript \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Let, Const, Var: Scope \u0438 Hoisting \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Promises, Async/Await \u0438 Generators \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u269b\ufe0f React (7 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432) Reconciliation \u0438 Virtual DOM \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Context API vs Redux \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Higher-Order Components (HOC) \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS useEffect \u0438 Side Effects \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS SSR/SSG \u0438 React Server Components \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \ud83c\udfd7\ufe0f \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (6 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432) \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS WebSockets \u0438 Real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Domain-Driven Design \u0432 Frontend \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Resilient Frontend \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Offline-first \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \ud83d\udcd8 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0435\u043c\u044b (5 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432) TypeScript Advanced TypeScript Types \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \ud83d\ude80 \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 : \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 JavaScript \u043e\u0441\u043d\u043e\u0432, \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043a React \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b : \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438 best practices Senior-\u0443\u0440\u043e\u0432\u0435\u043d\u044c : \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0439 \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e : \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0432\u0435\u0442\u044b, \u043d\u043e \u0438 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \ud83d\udca1 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f React MDN Web Docs \u0434\u043b\u044f JavaScript TypeScript Handbook Web Performance Guidelines \ud83d\udcdd \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u0412\u0441\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b \u043d\u0430 2025 \u0433\u043e\u0434 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438: - React 18+ - TypeScript 5+ - Next.js 14+ - \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043d\u044b\u0435 API \u0423\u0434\u0430\u0447\u0438 \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438! \ud83c\udf40","title":"\ud83d\udcda \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e: JavaScript, React \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"#javascript-react","text":"\u042d\u0442\u0430 \u0431\u0440\u043e\u0448\u044e\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 25 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e senior frontend \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 JavaScript, React, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c.","title":"\ud83d\udcda \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e: JavaScript, React \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"#_1","text":"README.md - \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0432\u0441\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 README_small.md - \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0434\u043b\u044f Senior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 README.txt - TTS-\u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f","title":"\ud83d\udccb \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443"},{"location":"#_2","text":"\u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0442\u0440\u0435\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u0445: \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f (.md) - \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430, \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 best practices \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f (_small.md) - \u0421\u0436\u0430\u0442\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0434\u043b\u044f Senior-\u0443\u0440\u043e\u0432\u043d\u044f, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0431\u0430\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \ud83c\udfa7 TTS \u0432\u0435\u0440\u0441\u0438\u044f (.txt) - \u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0437\u0432\u0443\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u0435\u0437 markdown-\u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438","title":"\ud83c\udfa8 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b"},{"location":"#_3","text":"\ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfa7 TTS \u0432\u0435\u0440\u0441\u0438\u044f","title":"\ud83c\udfaf \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"#javascript-7","text":"Event Loop, Microtasks \u0438 Macrotasks \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Currying \u0432 JavaScript \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Let, Const, Var: Scope \u0438 Hoisting \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Promises, Async/Await \u0438 Generators \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\ud83d\udfe8 JavaScript (7 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432)"},{"location":"#react-7","text":"Reconciliation \u0438 Virtual DOM \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Context API vs Redux \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Higher-Order Components (HOC) \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS useEffect \u0438 Side Effects \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS SSR/SSG \u0438 React Server Components \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\u269b\ufe0f React (7 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432)"},{"location":"#6","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS WebSockets \u0438 Real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Domain-Driven Design \u0432 Frontend \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Resilient Frontend \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS Offline-first \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\ud83c\udfd7\ufe0f \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (6 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432)"},{"location":"#5","text":"","title":"\ud83d\udcd8 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0435\u043c\u044b (5 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432)"},{"location":"#typescript","text":"Advanced TypeScript Types \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"TypeScript"},{"location":"#_4","text":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#_5","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"#_6","text":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \ud83d\udcd6 \u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f | \ud83c\udfaf \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f | \ud83c\udfa7 TTS","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c"},{"location":"#_7","text":"\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 : \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 JavaScript \u043e\u0441\u043d\u043e\u0432, \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043a React \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b : \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438 best practices Senior-\u0443\u0440\u043e\u0432\u0435\u043d\u044c : \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0439 \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e : \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0432\u0435\u0442\u044b, \u043d\u043e \u0438 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439","title":"\ud83d\ude80 \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"#_8","text":"\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f React MDN Web Docs \u0434\u043b\u044f JavaScript TypeScript Handbook Web Performance Guidelines","title":"\ud83d\udca1 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b"},{"location":"#_9","text":"\u0412\u0441\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b \u043d\u0430 2025 \u0433\u043e\u0434 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438: - React 18+ - TypeScript 5+ - Next.js 14+ - \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043d\u044b\u0435 API \u0423\u0434\u0430\u0447\u0438 \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438! \ud83c\udf40","title":"\ud83d\udcdd \u0417\u0430\u043c\u0435\u0442\u043a\u0438"},{"location":"questions/architecture/ddd/","text":"Domain-Driven Design (DDD) \u0432\u043e Frontend \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 Domain-Driven Design \u0432 frontend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0445 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0447\u0435\u0442\u043a\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041e\u0441\u043d\u043e\u0432\u044b DDD \u0432\u043e Frontend Domain-Driven Design - \u044d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0442\u0430\u0432\u0438\u0442 \u0432 \u0446\u0435\u043d\u0442\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u0434\u043e\u043c\u0435\u043d \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 : - Domain - \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441\u0430 - Bounded Context - \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 - Entities - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c\u044e - Value Objects - \u043e\u0431\u044a\u0435\u043a\u0442\u044b-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - Aggregates - \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c\u044e - Domain Services - \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b - Repositories - \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 1. Domain Layer (\u0414\u043e\u043c\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0439) // Entities - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c\u044e class User { constructor(id, email, profile) { this.id = id; this.email = email; this.profile = profile; this.createdAt = new Date(); } updateProfile(newProfile) { if (!newProfile.name || newProfile.name.trim() === '') { throw new Error('Name is required'); } this.profile = { ...this.profile, ...newProfile }; this.updatedAt = new Date(); // Domain events DomainEvents.raise(new UserProfileUpdatedEvent(this.id, this.profile)); } changeEmail(newEmail) { if (!this.isValidEmail(newEmail)) { throw new Error('Invalid email format'); } this.email = newEmail; DomainEvents.raise(new UserEmailChangedEvent(this.id, newEmail)); } isValidEmail(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } } // Value Objects - \u043e\u0431\u044a\u0435\u043a\u0442\u044b-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f class Email { constructor(value) { if (!this.isValid(value)) { throw new Error('Invalid email format'); } this.value = value; } isValid(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } equals(other) { return other instanceof Email && this.value === other.value; } toString() { return this.value; } } class Money { constructor(amount, currency = 'USD') { this.amount = amount; this.currency = currency; } add(other) { if (this.currency !== other.currency) { throw new Error('Cannot add different currencies'); } return new Money(this.amount + other.amount, this.currency); } multiply(factor) { return new Money(this.amount * factor, this.currency); } equals(other) { return other instanceof Money && this.amount === other.amount && this.currency === other.currency; } } // Aggregates - \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b class Order { constructor(id, customerId) { this.id = id; this.customerId = customerId; this.items = []; this.status = 'draft'; this.total = new Money(0); } addItem(product, quantity, price) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } const item = new OrderItem(product, quantity, price); this.items.push(item); this.recalculateTotal(); DomainEvents.raise(new ItemAddedToOrderEvent(this.id, item)); } removeItem(productId) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } this.items = this.items.filter(item => item.productId !== productId); this.recalculateTotal(); } confirm() { if (this.items.length === 0) { throw new Error('Cannot confirm empty order'); } this.status = 'confirmed'; DomainEvents.raise(new OrderConfirmedEvent(this.id, this.total)); } recalculateTotal() { this.total = this.items.reduce( (sum, item) => sum.add(item.getSubtotal()), new Money(0) ); } } class OrderItem { constructor(product, quantity, price) { this.productId = product.id; this.productName = product.name; this.quantity = quantity; this.price = price; } getSubtotal() { return this.price.multiply(this.quantity); } } 2. Domain Services // Domain Services \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 class OrderPricingService { constructor(discountRepository, taxService) { this.discountRepository = discountRepository; this.taxService = taxService; } async calculateOrderTotal(order, customer) { let total = order.getSubtotal(); // \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043a\u0438\u0434\u043e\u043a const discounts = await this.discountRepository.findApplicableDiscounts( customer, order ); for (const discount of discounts) { total = discount.apply(total); } // \u0420\u0430\u0441\u0447\u0435\u0442 \u043d\u0430\u043b\u043e\u0433\u043e\u0432 const tax = await this.taxService.calculateTax(total, customer.address); total = total.add(tax); return total; } } class UserRegistrationService { constructor(userRepository, emailService) { this.userRepository = userRepository; this.emailService = emailService; } async registerUser(email, password, profile) { // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 email const existingUser = await this.userRepository.findByEmail(email); if (existingUser) { throw new Error('User with this email already exists'); } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const user = new User( generateId(), new Email(email), profile ); await this.userRepository.save(user); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 welcome email await this.emailService.sendWelcomeEmail(user); return user; } } 3. Domain Events // \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 class DomainEvent { constructor() { this.occurredOn = new Date(); this.id = crypto.randomUUID(); } } class UserProfileUpdatedEvent extends DomainEvent { constructor(userId, profile) { super(); this.userId = userId; this.profile = profile; } } class OrderConfirmedEvent extends DomainEvent { constructor(orderId, total) { super(); this.orderId = orderId; this.total = total; } } // Event dispatcher class DomainEvents { static handlers = new Map(); static events = []; static subscribe(eventType, handler) { if (!this.handlers.has(eventType)) { this.handlers.set(eventType, []); } this.handlers.get(eventType).push(handler); } static raise(event) { this.events.push(event); } static async dispatch() { const events = [...this.events]; this.events.length = 0; for (const event of events) { const handlers = this.handlers.get(event.constructor) || []; for (const handler of handlers) { try { await handler(event); } catch (error) { console.error('Error handling domain event:', error); } } } } } // Event handlers DomainEvents.subscribe(UserProfileUpdatedEvent, async (event) => { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 await searchIndexService.updateUserIndex(event.userId, event.profile); }); DomainEvents.subscribe(OrderConfirmedEvent, async (event) => { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f await notificationService.sendOrderConfirmation(event.orderId); // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 await analyticsService.trackOrderConfirmed(event); }); Application Layer (\u0421\u043b\u043e\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f) Application Services // Application Services \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0438\u0440\u0443\u044e\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class UserApplicationService { constructor(userRepository, emailService, eventDispatcher) { this.userRepository = userRepository; this.emailService = emailService; this.eventDispatcher = eventDispatcher; } async updateUserProfile(userId, profileData) { const user = await this.userRepository.findById(userId); if (!user) { throw new Error('User not found'); } // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 user.updateProfile(profileData); // \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 await this.userRepository.save(user); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 await DomainEvents.dispatch(); return user; } async changeUserEmail(userId, newEmail) { const user = await this.userRepository.findById(userId); if (!user) { throw new Error('User not found'); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0432\u043e\u0433\u043e email const existingUser = await this.userRepository.findByEmail(newEmail); if (existingUser && existingUser.id !== userId) { throw new Error('Email already in use'); } // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 user.changeEmail(newEmail); await this.userRepository.save(user); await DomainEvents.dispatch(); return user; } } class OrderApplicationService { constructor(orderRepository, productRepository, pricingService) { this.orderRepository = orderRepository; this.productRepository = productRepository; this.pricingService = pricingService; } async addItemToOrder(orderId, productId, quantity) { const [order, product] = await Promise.all([ this.orderRepository.findById(orderId), this.productRepository.findById(productId) ]); if (!order) throw new Error('Order not found'); if (!product) throw new Error('Product not found'); // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 order.addItem(product, quantity, product.price); await this.orderRepository.save(order); await DomainEvents.dispatch(); return order; } async confirmOrder(orderId, customerId) { const order = await this.orderRepository.findById(orderId); if (!order) throw new Error('Order not found'); const customer = await this.customerRepository.findById(customerId); if (!customer) throw new Error('Customer not found'); // \u0420\u0430\u0441\u0447\u0435\u0442 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 const finalTotal = await this.pricingService.calculateOrderTotal(order, customer); order.updateTotal(finalTotal); // \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430 order.confirm(); await this.orderRepository.save(order); await DomainEvents.dispatch(); return order; } } Infrastructure Layer (\u0421\u043b\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b) Repositories // \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432 (\u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c TypeScript \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b) class UserRepository { async findById(id) { throw new Error('Method must be implemented'); } async findByEmail(email) { throw new Error('Method must be implemented'); } async save(user) { throw new Error('Method must be implemented'); } } // \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f class HttpUserRepository extends UserRepository { constructor(httpClient) { super(); this.httpClient = httpClient; } async findById(id) { const response = await this.httpClient.get(`/api/users/${id}`); return this.mapToEntity(response.data); } async findByEmail(email) { const response = await this.httpClient.get(`/api/users?email=${email}`); return response.data ? this.mapToEntity(response.data) : null; } async save(user) { if (user.id) { await this.httpClient.put(`/api/users/${user.id}`, this.mapToDto(user)); } else { const response = await this.httpClient.post('/api/users', this.mapToDto(user)); user.id = response.data.id; } return user; } mapToEntity(data) { return new User( data.id, new Email(data.email), data.profile ); } mapToDto(user) { return { id: user.id, email: user.email.toString(), profile: user.profile, createdAt: user.createdAt, updatedAt: user.updatedAt }; } } // In-memory repository \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class InMemoryUserRepository extends UserRepository { constructor() { super(); this.users = new Map(); } async findById(id) { return this.users.get(id) || null; } async findByEmail(email) { for (const user of this.users.values()) { if (user.email.equals(new Email(email))) { return user; } } return null; } async save(user) { if (!user.id) { user.id = crypto.randomUUID(); } this.users.set(user.id, user); return user; } } React Integration \u0441 DDD Presentation Layer // Custom hooks \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u043e\u043c\u0435\u043d\u043e\u043c const useUser = (userId) => { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const userService = useContext(UserServiceContext); useEffect(() => { if (!userId) return; const loadUser = async () => { try { setLoading(true); const userData = await userService.getUser(userId); setUser(userData); } catch (err) { setError(err.message); } finally { setLoading(false); } }; loadUser(); }, [userId, userService]); const updateProfile = useCallback(async (profileData) => { try { const updatedUser = await userService.updateProfile(userId, profileData); setUser(updatedUser); return updatedUser; } catch (err) { setError(err.message); throw err; } }, [userId, userService]); return { user, loading, error, updateProfile }; }; // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 function UserProfileForm({ userId }) { const { user, loading, error, updateProfile } = useUser(userId); const [formData, setFormData] = useState({}); const [isSubmitting, setIsSubmitting] = useState(false); useEffect(() => { if (user) { setFormData(user.profile); } }, [user]); const handleSubmit = async (e) => { e.preventDefault(); try { setIsSubmitting(true); await updateProfile(formData); // \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 } catch (error) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 (\u043e\u043d\u0430 \u0443\u0436\u0435 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438) } finally { setIsSubmitting(false); } }; if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return ( <form onSubmit={handleSubmit}> <input value={formData.name || ''} onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))} placeholder=\"Name\" /> <button type=\"submit\" disabled={isSubmitting}> {isSubmitting ? 'Saving...' : 'Save'} </button> </form> ); } Dependency Injection // \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 class DIContainer { constructor() { this.dependencies = new Map(); this.singletons = new Map(); } register(token, factory, options = {}) { this.dependencies.set(token, { factory, options }); } resolve(token) { const dependency = this.dependencies.get(token); if (!dependency) { throw new Error(`Dependency ${token} not found`); } if (dependency.options.singleton) { if (!this.singletons.has(token)) { this.singletons.set(token, dependency.factory(this)); } return this.singletons.get(token); } return dependency.factory(this); } } // \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 const container = new DIContainer(); container.register('httpClient', () => new HttpClient(), { singleton: true }); container.register('userRepository', (c) => new HttpUserRepository(c.resolve('httpClient'))); container.register('emailService', () => new EmailService(), { singleton: true }); container.register('userService', (c) => new UserApplicationService( c.resolve('userRepository'), c.resolve('emailService') )); // React Context \u0434\u043b\u044f DI const DIContext = createContext(container); function App() { return ( <DIContext.Provider value={container}> <UserProfileForm userId=\"123\" /> </DIContext.Provider> ); } // Hook \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 const useService = (token) => { const container = useContext(DIContext); return useMemo(() => container.resolve(token), [container, token]); }; Bounded Contexts // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 const UserContext = { entities: { User, UserProfile }, valueObjects: { Email, Password }, services: { UserRegistrationService, UserApplicationService }, repositories: { UserRepository } }; // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 const OrderContext = { entities: { Order, OrderItem }, valueObjects: { Money, OrderStatus }, services: { OrderPricingService, OrderApplicationService }, repositories: { OrderRepository } }; // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 const CatalogContext = { entities: { Product, Category }, valueObjects: { Price, ProductCode }, services: { ProductSearchService, CatalogApplicationService }, repositories: { ProductRepository } }; Testing \u0432 DDD // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 describe('User Entity', () => { it('should update profile with valid data', () => { const user = new User('123', new Email('test@example.com'), {}); user.updateProfile({ name: 'John Doe', age: 30 }); expect(user.profile.name).toBe('John Doe'); expect(user.profile.age).toBe(30); expect(user.updatedAt).toBeDefined(); }); it('should throw error for invalid profile', () => { const user = new User('123', new Email('test@example.com'), {}); expect(() => { user.updateProfile({ name: '' }); }).toThrow('Name is required'); }); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 application services describe('UserApplicationService', () => { let userRepository; let emailService; let userService; beforeEach(() => { userRepository = new InMemoryUserRepository(); emailService = new MockEmailService(); userService = new UserApplicationService(userRepository, emailService); }); it('should update user profile', async () => { const user = new User('123', new Email('test@example.com'), {}); await userRepository.save(user); const updatedUser = await userService.updateUserProfile('123', { name: 'John Doe' }); expect(updatedUser.profile.name).toBe('John Doe'); }); }); \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 DDD \u0432\u043e Frontend \u0427\u0435\u0442\u043a\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 : \u0411\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0430 \u043e\u0442 UI \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u041b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043b\u0435\u0433\u043a\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c : \u041f\u043e\u043d\u044f\u0442\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 : \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 UI Best Practices \u0414\u0435\u0440\u0436\u0438\u0442\u0435 UI \u0442\u043e\u043d\u043a\u0438\u043c : \u0412\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0432 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u043c \u0441\u043b\u043e\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Value Objects : \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0410\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u043a\u0430\u043a \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 : \u041e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f = \u043e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 Domain Events : \u0414\u043b\u044f \u0441\u043b\u0430\u0431\u043e\u0433\u043e \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 Repository \u043f\u0430\u0442\u0442\u0435\u0440\u043d : \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c Dependency Injection : \u0414\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 DDD Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 TypeScript - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0432 DDD \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 DDD \u0438 \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u043e frontend - \u041e\u043f\u044b\u0442 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 Repository, Domain Events, Value Objects - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 Bounded Contexts - \u041e\u043f\u044b\u0442 \u0441 dependency injection \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e DDD? - \u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 Entity \u0438 Value Object? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443? - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Domain Events? - \u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c DDD \u0441 React?","title":"Domain-Driven Design (DDD) \u0432\u043e Frontend"},{"location":"questions/architecture/ddd/#domain-driven-design-ddd-frontend","text":"","title":"Domain-Driven Design (DDD) \u0432\u043e Frontend"},{"location":"questions/architecture/ddd/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 Domain-Driven Design \u0432 frontend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0445 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0447\u0435\u0442\u043a\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/ddd/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/ddd/#ddd-frontend","text":"Domain-Driven Design - \u044d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0442\u0430\u0432\u0438\u0442 \u0432 \u0446\u0435\u043d\u0442\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u0434\u043e\u043c\u0435\u043d \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 : - Domain - \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441\u0430 - Bounded Context - \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 - Entities - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c\u044e - Value Objects - \u043e\u0431\u044a\u0435\u043a\u0442\u044b-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - Aggregates - \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c\u044e - Domain Services - \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b - Repositories - \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c","title":"\u041e\u0441\u043d\u043e\u0432\u044b DDD \u0432\u043e Frontend"},{"location":"questions/architecture/ddd/#_3","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0441\u043b\u043e\u0438"},{"location":"questions/architecture/ddd/#1-domain-layer","text":"// Entities - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c\u044e class User { constructor(id, email, profile) { this.id = id; this.email = email; this.profile = profile; this.createdAt = new Date(); } updateProfile(newProfile) { if (!newProfile.name || newProfile.name.trim() === '') { throw new Error('Name is required'); } this.profile = { ...this.profile, ...newProfile }; this.updatedAt = new Date(); // Domain events DomainEvents.raise(new UserProfileUpdatedEvent(this.id, this.profile)); } changeEmail(newEmail) { if (!this.isValidEmail(newEmail)) { throw new Error('Invalid email format'); } this.email = newEmail; DomainEvents.raise(new UserEmailChangedEvent(this.id, newEmail)); } isValidEmail(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } } // Value Objects - \u043e\u0431\u044a\u0435\u043a\u0442\u044b-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f class Email { constructor(value) { if (!this.isValid(value)) { throw new Error('Invalid email format'); } this.value = value; } isValid(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } equals(other) { return other instanceof Email && this.value === other.value; } toString() { return this.value; } } class Money { constructor(amount, currency = 'USD') { this.amount = amount; this.currency = currency; } add(other) { if (this.currency !== other.currency) { throw new Error('Cannot add different currencies'); } return new Money(this.amount + other.amount, this.currency); } multiply(factor) { return new Money(this.amount * factor, this.currency); } equals(other) { return other instanceof Money && this.amount === other.amount && this.currency === other.currency; } } // Aggregates - \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b class Order { constructor(id, customerId) { this.id = id; this.customerId = customerId; this.items = []; this.status = 'draft'; this.total = new Money(0); } addItem(product, quantity, price) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } const item = new OrderItem(product, quantity, price); this.items.push(item); this.recalculateTotal(); DomainEvents.raise(new ItemAddedToOrderEvent(this.id, item)); } removeItem(productId) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } this.items = this.items.filter(item => item.productId !== productId); this.recalculateTotal(); } confirm() { if (this.items.length === 0) { throw new Error('Cannot confirm empty order'); } this.status = 'confirmed'; DomainEvents.raise(new OrderConfirmedEvent(this.id, this.total)); } recalculateTotal() { this.total = this.items.reduce( (sum, item) => sum.add(item.getSubtotal()), new Money(0) ); } } class OrderItem { constructor(product, quantity, price) { this.productId = product.id; this.productName = product.name; this.quantity = quantity; this.price = price; } getSubtotal() { return this.price.multiply(this.quantity); } }","title":"1. Domain Layer (\u0414\u043e\u043c\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0439)"},{"location":"questions/architecture/ddd/#2-domain-services","text":"// Domain Services \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 class OrderPricingService { constructor(discountRepository, taxService) { this.discountRepository = discountRepository; this.taxService = taxService; } async calculateOrderTotal(order, customer) { let total = order.getSubtotal(); // \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043a\u0438\u0434\u043e\u043a const discounts = await this.discountRepository.findApplicableDiscounts( customer, order ); for (const discount of discounts) { total = discount.apply(total); } // \u0420\u0430\u0441\u0447\u0435\u0442 \u043d\u0430\u043b\u043e\u0433\u043e\u0432 const tax = await this.taxService.calculateTax(total, customer.address); total = total.add(tax); return total; } } class UserRegistrationService { constructor(userRepository, emailService) { this.userRepository = userRepository; this.emailService = emailService; } async registerUser(email, password, profile) { // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 email const existingUser = await this.userRepository.findByEmail(email); if (existingUser) { throw new Error('User with this email already exists'); } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const user = new User( generateId(), new Email(email), profile ); await this.userRepository.save(user); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 welcome email await this.emailService.sendWelcomeEmail(user); return user; } }","title":"2. Domain Services"},{"location":"questions/architecture/ddd/#3-domain-events","text":"// \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 class DomainEvent { constructor() { this.occurredOn = new Date(); this.id = crypto.randomUUID(); } } class UserProfileUpdatedEvent extends DomainEvent { constructor(userId, profile) { super(); this.userId = userId; this.profile = profile; } } class OrderConfirmedEvent extends DomainEvent { constructor(orderId, total) { super(); this.orderId = orderId; this.total = total; } } // Event dispatcher class DomainEvents { static handlers = new Map(); static events = []; static subscribe(eventType, handler) { if (!this.handlers.has(eventType)) { this.handlers.set(eventType, []); } this.handlers.get(eventType).push(handler); } static raise(event) { this.events.push(event); } static async dispatch() { const events = [...this.events]; this.events.length = 0; for (const event of events) { const handlers = this.handlers.get(event.constructor) || []; for (const handler of handlers) { try { await handler(event); } catch (error) { console.error('Error handling domain event:', error); } } } } } // Event handlers DomainEvents.subscribe(UserProfileUpdatedEvent, async (event) => { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 await searchIndexService.updateUserIndex(event.userId, event.profile); }); DomainEvents.subscribe(OrderConfirmedEvent, async (event) => { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f await notificationService.sendOrderConfirmation(event.orderId); // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 await analyticsService.trackOrderConfirmed(event); });","title":"3. Domain Events"},{"location":"questions/architecture/ddd/#application-layer","text":"","title":"Application Layer (\u0421\u043b\u043e\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)"},{"location":"questions/architecture/ddd/#application-services","text":"// Application Services \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0438\u0440\u0443\u044e\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class UserApplicationService { constructor(userRepository, emailService, eventDispatcher) { this.userRepository = userRepository; this.emailService = emailService; this.eventDispatcher = eventDispatcher; } async updateUserProfile(userId, profileData) { const user = await this.userRepository.findById(userId); if (!user) { throw new Error('User not found'); } // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 user.updateProfile(profileData); // \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 await this.userRepository.save(user); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 await DomainEvents.dispatch(); return user; } async changeUserEmail(userId, newEmail) { const user = await this.userRepository.findById(userId); if (!user) { throw new Error('User not found'); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0432\u043e\u0433\u043e email const existingUser = await this.userRepository.findByEmail(newEmail); if (existingUser && existingUser.id !== userId) { throw new Error('Email already in use'); } // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 user.changeEmail(newEmail); await this.userRepository.save(user); await DomainEvents.dispatch(); return user; } } class OrderApplicationService { constructor(orderRepository, productRepository, pricingService) { this.orderRepository = orderRepository; this.productRepository = productRepository; this.pricingService = pricingService; } async addItemToOrder(orderId, productId, quantity) { const [order, product] = await Promise.all([ this.orderRepository.findById(orderId), this.productRepository.findById(productId) ]); if (!order) throw new Error('Order not found'); if (!product) throw new Error('Product not found'); // \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 order.addItem(product, quantity, product.price); await this.orderRepository.save(order); await DomainEvents.dispatch(); return order; } async confirmOrder(orderId, customerId) { const order = await this.orderRepository.findById(orderId); if (!order) throw new Error('Order not found'); const customer = await this.customerRepository.findById(customerId); if (!customer) throw new Error('Customer not found'); // \u0420\u0430\u0441\u0447\u0435\u0442 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 const finalTotal = await this.pricingService.calculateOrderTotal(order, customer); order.updateTotal(finalTotal); // \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430 order.confirm(); await this.orderRepository.save(order); await DomainEvents.dispatch(); return order; } }","title":"Application Services"},{"location":"questions/architecture/ddd/#infrastructure-layer","text":"","title":"Infrastructure Layer (\u0421\u043b\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b)"},{"location":"questions/architecture/ddd/#repositories","text":"// \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432 (\u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c TypeScript \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b) class UserRepository { async findById(id) { throw new Error('Method must be implemented'); } async findByEmail(email) { throw new Error('Method must be implemented'); } async save(user) { throw new Error('Method must be implemented'); } } // \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f class HttpUserRepository extends UserRepository { constructor(httpClient) { super(); this.httpClient = httpClient; } async findById(id) { const response = await this.httpClient.get(`/api/users/${id}`); return this.mapToEntity(response.data); } async findByEmail(email) { const response = await this.httpClient.get(`/api/users?email=${email}`); return response.data ? this.mapToEntity(response.data) : null; } async save(user) { if (user.id) { await this.httpClient.put(`/api/users/${user.id}`, this.mapToDto(user)); } else { const response = await this.httpClient.post('/api/users', this.mapToDto(user)); user.id = response.data.id; } return user; } mapToEntity(data) { return new User( data.id, new Email(data.email), data.profile ); } mapToDto(user) { return { id: user.id, email: user.email.toString(), profile: user.profile, createdAt: user.createdAt, updatedAt: user.updatedAt }; } } // In-memory repository \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class InMemoryUserRepository extends UserRepository { constructor() { super(); this.users = new Map(); } async findById(id) { return this.users.get(id) || null; } async findByEmail(email) { for (const user of this.users.values()) { if (user.email.equals(new Email(email))) { return user; } } return null; } async save(user) { if (!user.id) { user.id = crypto.randomUUID(); } this.users.set(user.id, user); return user; } }","title":"Repositories"},{"location":"questions/architecture/ddd/#react-integration-ddd","text":"","title":"React Integration \u0441 DDD"},{"location":"questions/architecture/ddd/#presentation-layer","text":"// Custom hooks \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u043e\u043c\u0435\u043d\u043e\u043c const useUser = (userId) => { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const userService = useContext(UserServiceContext); useEffect(() => { if (!userId) return; const loadUser = async () => { try { setLoading(true); const userData = await userService.getUser(userId); setUser(userData); } catch (err) { setError(err.message); } finally { setLoading(false); } }; loadUser(); }, [userId, userService]); const updateProfile = useCallback(async (profileData) => { try { const updatedUser = await userService.updateProfile(userId, profileData); setUser(updatedUser); return updatedUser; } catch (err) { setError(err.message); throw err; } }, [userId, userService]); return { user, loading, error, updateProfile }; }; // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 function UserProfileForm({ userId }) { const { user, loading, error, updateProfile } = useUser(userId); const [formData, setFormData] = useState({}); const [isSubmitting, setIsSubmitting] = useState(false); useEffect(() => { if (user) { setFormData(user.profile); } }, [user]); const handleSubmit = async (e) => { e.preventDefault(); try { setIsSubmitting(true); await updateProfile(formData); // \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 } catch (error) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 (\u043e\u043d\u0430 \u0443\u0436\u0435 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438) } finally { setIsSubmitting(false); } }; if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return ( <form onSubmit={handleSubmit}> <input value={formData.name || ''} onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))} placeholder=\"Name\" /> <button type=\"submit\" disabled={isSubmitting}> {isSubmitting ? 'Saving...' : 'Save'} </button> </form> ); }","title":"Presentation Layer"},{"location":"questions/architecture/ddd/#dependency-injection","text":"// \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 class DIContainer { constructor() { this.dependencies = new Map(); this.singletons = new Map(); } register(token, factory, options = {}) { this.dependencies.set(token, { factory, options }); } resolve(token) { const dependency = this.dependencies.get(token); if (!dependency) { throw new Error(`Dependency ${token} not found`); } if (dependency.options.singleton) { if (!this.singletons.has(token)) { this.singletons.set(token, dependency.factory(this)); } return this.singletons.get(token); } return dependency.factory(this); } } // \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 const container = new DIContainer(); container.register('httpClient', () => new HttpClient(), { singleton: true }); container.register('userRepository', (c) => new HttpUserRepository(c.resolve('httpClient'))); container.register('emailService', () => new EmailService(), { singleton: true }); container.register('userService', (c) => new UserApplicationService( c.resolve('userRepository'), c.resolve('emailService') )); // React Context \u0434\u043b\u044f DI const DIContext = createContext(container); function App() { return ( <DIContext.Provider value={container}> <UserProfileForm userId=\"123\" /> </DIContext.Provider> ); } // Hook \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 const useService = (token) => { const container = useContext(DIContext); return useMemo(() => container.resolve(token), [container, token]); };","title":"Dependency Injection"},{"location":"questions/architecture/ddd/#bounded-contexts","text":"// \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 const UserContext = { entities: { User, UserProfile }, valueObjects: { Email, Password }, services: { UserRegistrationService, UserApplicationService }, repositories: { UserRepository } }; // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 const OrderContext = { entities: { Order, OrderItem }, valueObjects: { Money, OrderStatus }, services: { OrderPricingService, OrderApplicationService }, repositories: { OrderRepository } }; // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 const CatalogContext = { entities: { Product, Category }, valueObjects: { Price, ProductCode }, services: { ProductSearchService, CatalogApplicationService }, repositories: { ProductRepository } };","title":"Bounded Contexts"},{"location":"questions/architecture/ddd/#testing-ddd","text":"// \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 describe('User Entity', () => { it('should update profile with valid data', () => { const user = new User('123', new Email('test@example.com'), {}); user.updateProfile({ name: 'John Doe', age: 30 }); expect(user.profile.name).toBe('John Doe'); expect(user.profile.age).toBe(30); expect(user.updatedAt).toBeDefined(); }); it('should throw error for invalid profile', () => { const user = new User('123', new Email('test@example.com'), {}); expect(() => { user.updateProfile({ name: '' }); }).toThrow('Name is required'); }); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 application services describe('UserApplicationService', () => { let userRepository; let emailService; let userService; beforeEach(() => { userRepository = new InMemoryUserRepository(); emailService = new MockEmailService(); userService = new UserApplicationService(userRepository, emailService); }); it('should update user profile', async () => { const user = new User('123', new Email('test@example.com'), {}); await userRepository.save(user); const updatedUser = await userService.updateUserProfile('123', { name: 'John Doe' }); expect(updatedUser.profile.name).toBe('John Doe'); }); });","title":"Testing \u0432 DDD"},{"location":"questions/architecture/ddd/#ddd-frontend_1","text":"\u0427\u0435\u0442\u043a\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 : \u0411\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0430 \u043e\u0442 UI \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u041b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043b\u0435\u0433\u043a\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c : \u041f\u043e\u043d\u044f\u0442\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 : \u0414\u043e\u043c\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 UI","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 DDD \u0432\u043e Frontend"},{"location":"questions/architecture/ddd/#best-practices","text":"\u0414\u0435\u0440\u0436\u0438\u0442\u0435 UI \u0442\u043e\u043d\u043a\u0438\u043c : \u0412\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0432 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u043c \u0441\u043b\u043e\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Value Objects : \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0410\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u043a\u0430\u043a \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 : \u041e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f = \u043e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 Domain Events : \u0414\u043b\u044f \u0441\u043b\u0430\u0431\u043e\u0433\u043e \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 Repository \u043f\u0430\u0442\u0442\u0435\u0440\u043d : \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c Dependency Injection : \u0414\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438","title":"Best Practices"},{"location":"questions/architecture/ddd/#_4","text":"State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 DDD Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 TypeScript - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0432 DDD","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/architecture/ddd/#_5","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 DDD \u0438 \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u043e frontend - \u041e\u043f\u044b\u0442 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 Repository, Domain Events, Value Objects - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 Bounded Contexts - \u041e\u043f\u044b\u0442 \u0441 dependency injection \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e DDD? - \u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 Entity \u0438 Value Object? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443? - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Domain Events? - \u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c DDD \u0441 React?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/ddd_small/","text":"Domain-Driven Design (DDD) \u0432\u043e Frontend (small) \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 Presentation Layer (UI/React) \u2193 Application Layer (Use Cases) \u2193 Domain Layer (Business Logic) \u2193 Infrastructure Layer (Data Access) \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Entities class User { constructor(id, email, profile) { this.id = id; this.email = email; this.profile = profile; } updateProfile(newProfile) { if (!newProfile.name?.trim()) { throw new Error('Name is required'); } this.profile = { ...this.profile, ...newProfile }; DomainEvents.raise(new UserProfileUpdatedEvent(this.id, this.profile)); } } Value Objects class Email { constructor(value) { if (!this.isValid(value)) throw new Error('Invalid email'); this.value = value; } isValid(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } equals(other) { return other instanceof Email && this.value === other.value; } } class Money { constructor(amount, currency = 'USD') { this.amount = amount; this.currency = currency; } add(other) { if (this.currency !== other.currency) { throw new Error('Cannot add different currencies'); } return new Money(this.amount + other.amount, this.currency); } } Aggregates class Order { constructor(id, customerId) { this.id = id; this.customerId = customerId; this.items = []; this.status = 'draft'; } addItem(product, quantity, price) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } const item = new OrderItem(product, quantity, price); this.items.push(item); DomainEvents.raise(new ItemAddedToOrderEvent(this.id, item)); } confirm() { if (this.items.length === 0) throw new Error('Cannot confirm empty order'); this.status = 'confirmed'; DomainEvents.raise(new OrderConfirmedEvent(this.id)); } } Domain Services class OrderPricingService { constructor(discountRepository, taxService) { this.discountRepository = discountRepository; this.taxService = taxService; } async calculateTotal(order, customer) { let total = order.getSubtotal(); const discounts = await this.discountRepository.findApplicable(customer, order); discounts.forEach(discount => total = discount.apply(total)); const tax = await this.taxService.calculate(total, customer.address); return total.add(tax); } } Domain Events class DomainEvents { static handlers = new Map(); static events = []; static subscribe(eventType, handler) { if (!this.handlers.has(eventType)) { this.handlers.set(eventType, []); } this.handlers.get(eventType).push(handler); } static raise(event) { this.events.push(event); } static async dispatch() { const events = [...this.events]; this.events.length = 0; for (const event of events) { const handlers = this.handlers.get(event.constructor) || []; for (const handler of handlers) { await handler(event); } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 DomainEvents.subscribe(OrderConfirmedEvent, async (event) => { await notificationService.sendConfirmation(event.orderId); }); Application Layer class UserApplicationService { constructor(userRepository, eventDispatcher) { this.userRepository = userRepository; this.eventDispatcher = eventDispatcher; } async updateProfile(userId, profileData) { const user = await this.userRepository.findById(userId); if (!user) throw new Error('User not found'); user.updateProfile(profileData); await this.userRepository.save(user); await DomainEvents.dispatch(); return user; } } Repository Pattern class UserRepository { async findById(id) { throw new Error('Must implement'); } async save(user) { throw new Error('Must implement'); } } class HttpUserRepository extends UserRepository { constructor(httpClient) { super(); this.httpClient = httpClient; } async findById(id) { const response = await this.httpClient.get(`/api/users/${id}`); return this.mapToEntity(response.data); } async save(user) { const dto = this.mapToDto(user); if (user.id) { await this.httpClient.put(`/api/users/${user.id}`, dto); } else { const response = await this.httpClient.post('/api/users', dto); user.id = response.data.id; } return user; } mapToEntity(data) { return new User(data.id, new Email(data.email), data.profile); } } React Integration Custom Hook \u0441 DDD const useUser = (userId) => { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const userService = useService('userService'); const updateProfile = useCallback(async (profileData) => { const updatedUser = await userService.updateProfile(userId, profileData); setUser(updatedUser); return updatedUser; }, [userId, userService]); useEffect(() => { if (!userId) return; userService.getUser(userId).then(setUser).finally(() => setLoading(false)); }, [userId, userService]); return { user, loading, updateProfile }; }; Dependency Injection class DIContainer { constructor() { this.dependencies = new Map(); this.singletons = new Map(); } register(token, factory, options = {}) { this.dependencies.set(token, { factory, options }); } resolve(token) { const dep = this.dependencies.get(token); if (!dep) throw new Error(`Dependency ${token} not found`); if (dep.options.singleton) { if (!this.singletons.has(token)) { this.singletons.set(token, dep.factory(this)); } return this.singletons.get(token); } return dep.factory(this); } } // Setup const container = new DIContainer(); container.register('userRepository', (c) => new HttpUserRepository(c.resolve('httpClient'))); container.register('userService', (c) => new UserApplicationService(c.resolve('userRepository'))); // React Context const DIContext = createContext(container); const useService = (token) => { const container = useContext(DIContext); return useMemo(() => container.resolve(token), [container, token]); }; Bounded Contexts // User Context const UserContext = { entities: { User }, valueObjects: { Email, Password }, services: { UserRegistrationService }, repositories: { UserRepository } }; // Order Context const OrderContext = { entities: { Order, OrderItem }, valueObjects: { Money, OrderStatus }, services: { OrderPricingService }, repositories: { OrderRepository } }; // Communication between contexts \u0447\u0435\u0440\u0435\u0437 Domain Events DomainEvents.subscribe(UserRegisteredEvent, async (event) => { // Order context \u0440\u0435\u0430\u0433\u0438\u0440\u0443\u0435\u0442 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0438\u0437 User context await orderService.createWelcomeDiscount(event.userId); }); Testing DDD describe('User Entity', () => { it('should update profile with valid data', () => { const user = new User('123', new Email('test@example.com'), {}); user.updateProfile({ name: 'John' }); expect(user.profile.name).toBe('John'); }); it('should throw error for invalid profile', () => { const user = new User('123', new Email('test@example.com'), {}); expect(() => user.updateProfile({ name: '' })).toThrow('Name is required'); }); }); // Application Service Testing describe('UserApplicationService', () => { let userRepository; let userService; beforeEach(() => { userRepository = new InMemoryUserRepository(); userService = new UserApplicationService(userRepository); }); it('should update user profile', async () => { const user = new User('123', new Email('test@example.com'), {}); await userRepository.save(user); await userService.updateProfile('123', { name: 'John' }); const updatedUser = await userRepository.findById('123'); expect(updatedUser.profile.name).toBe('John'); }); }); \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b DDD Entity vs Value Object : - Entity: \u0418\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c, \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f - Value Object: \u041d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c Aggregate Rules : - \u041e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 = \u043e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f - \u0421\u0441\u044b\u043b\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e ID - \u0410\u0433\u0440\u0435\u0433\u0430\u0442 - \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 Domain Events : - \u0421\u043b\u0430\u0431\u043e\u0435 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 side effects - Audit trail \u0438 event sourcing Repository Pattern : - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 - \u0418\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 src/ \u251c\u2500\u2500 domain/ \u2502 \u251c\u2500\u2500 entities/ \u2502 \u251c\u2500\u2500 value-objects/ \u2502 \u251c\u2500\u2500 services/ \u2502 \u2514\u2500\u2500 events/ \u251c\u2500\u2500 application/ \u2502 \u251c\u2500\u2500 services/ \u2502 \u2514\u2500\u2500 use-cases/ \u251c\u2500\u2500 infrastructure/ \u2502 \u251c\u2500\u2500 repositories/ \u2502 \u2514\u2500\u2500 external-services/ \u2514\u2500\u2500 presentation/ \u251c\u2500\u2500 components/ \u251c\u2500\u2500 hooks/ \u2514\u2500\u2500 contexts/ Best Practices Senior-level Thin UI Layer : \u0412\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0432 Domain \u0441\u043b\u043e\u0435 Immutable Value Objects : \u041d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 Single Aggregate Transaction : \u041e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f = \u043e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 Domain Events : \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u0431\u044b\u0442\u0438\u044f Repository Abstraction : \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Dependency Injection : \u0418\u043d\u0432\u0435\u0440\u0441\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 Bounded Context Isolation : \u0427\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Entity vs Value Object? \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438? \u0413\u0434\u0435 \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0432 DDD? \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e? \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 Bounded Contexts? \u041a\u043e\u0433\u0434\u0430 DDD \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d \u0432\u043e frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445? \u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c DDD \u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 React \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438?","title":"Domain-Driven Design (DDD) \u0432\u043e Frontend (small)"},{"location":"questions/architecture/ddd_small/#domain-driven-design-ddd-frontend-small","text":"","title":"Domain-Driven Design (DDD) \u0432\u043e Frontend (small)"},{"location":"questions/architecture/ddd_small/#_1","text":"Presentation Layer (UI/React) \u2193 Application Layer (Use Cases) \u2193 Domain Layer (Business Logic) \u2193 Infrastructure Layer (Data Access)","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0441\u043b\u043e\u0438"},{"location":"questions/architecture/ddd_small/#_2","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/architecture/ddd_small/#entities","text":"class User { constructor(id, email, profile) { this.id = id; this.email = email; this.profile = profile; } updateProfile(newProfile) { if (!newProfile.name?.trim()) { throw new Error('Name is required'); } this.profile = { ...this.profile, ...newProfile }; DomainEvents.raise(new UserProfileUpdatedEvent(this.id, this.profile)); } }","title":"Entities"},{"location":"questions/architecture/ddd_small/#value-objects","text":"class Email { constructor(value) { if (!this.isValid(value)) throw new Error('Invalid email'); this.value = value; } isValid(email) { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); } equals(other) { return other instanceof Email && this.value === other.value; } } class Money { constructor(amount, currency = 'USD') { this.amount = amount; this.currency = currency; } add(other) { if (this.currency !== other.currency) { throw new Error('Cannot add different currencies'); } return new Money(this.amount + other.amount, this.currency); } }","title":"Value Objects"},{"location":"questions/architecture/ddd_small/#aggregates","text":"class Order { constructor(id, customerId) { this.id = id; this.customerId = customerId; this.items = []; this.status = 'draft'; } addItem(product, quantity, price) { if (this.status !== 'draft') { throw new Error('Cannot modify confirmed order'); } const item = new OrderItem(product, quantity, price); this.items.push(item); DomainEvents.raise(new ItemAddedToOrderEvent(this.id, item)); } confirm() { if (this.items.length === 0) throw new Error('Cannot confirm empty order'); this.status = 'confirmed'; DomainEvents.raise(new OrderConfirmedEvent(this.id)); } }","title":"Aggregates"},{"location":"questions/architecture/ddd_small/#domain-services","text":"class OrderPricingService { constructor(discountRepository, taxService) { this.discountRepository = discountRepository; this.taxService = taxService; } async calculateTotal(order, customer) { let total = order.getSubtotal(); const discounts = await this.discountRepository.findApplicable(customer, order); discounts.forEach(discount => total = discount.apply(total)); const tax = await this.taxService.calculate(total, customer.address); return total.add(tax); } }","title":"Domain Services"},{"location":"questions/architecture/ddd_small/#domain-events","text":"class DomainEvents { static handlers = new Map(); static events = []; static subscribe(eventType, handler) { if (!this.handlers.has(eventType)) { this.handlers.set(eventType, []); } this.handlers.get(eventType).push(handler); } static raise(event) { this.events.push(event); } static async dispatch() { const events = [...this.events]; this.events.length = 0; for (const event of events) { const handlers = this.handlers.get(event.constructor) || []; for (const handler of handlers) { await handler(event); } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 DomainEvents.subscribe(OrderConfirmedEvent, async (event) => { await notificationService.sendConfirmation(event.orderId); });","title":"Domain Events"},{"location":"questions/architecture/ddd_small/#application-layer","text":"class UserApplicationService { constructor(userRepository, eventDispatcher) { this.userRepository = userRepository; this.eventDispatcher = eventDispatcher; } async updateProfile(userId, profileData) { const user = await this.userRepository.findById(userId); if (!user) throw new Error('User not found'); user.updateProfile(profileData); await this.userRepository.save(user); await DomainEvents.dispatch(); return user; } }","title":"Application Layer"},{"location":"questions/architecture/ddd_small/#repository-pattern","text":"class UserRepository { async findById(id) { throw new Error('Must implement'); } async save(user) { throw new Error('Must implement'); } } class HttpUserRepository extends UserRepository { constructor(httpClient) { super(); this.httpClient = httpClient; } async findById(id) { const response = await this.httpClient.get(`/api/users/${id}`); return this.mapToEntity(response.data); } async save(user) { const dto = this.mapToDto(user); if (user.id) { await this.httpClient.put(`/api/users/${user.id}`, dto); } else { const response = await this.httpClient.post('/api/users', dto); user.id = response.data.id; } return user; } mapToEntity(data) { return new User(data.id, new Email(data.email), data.profile); } }","title":"Repository Pattern"},{"location":"questions/architecture/ddd_small/#react-integration","text":"","title":"React Integration"},{"location":"questions/architecture/ddd_small/#custom-hook-ddd","text":"const useUser = (userId) => { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const userService = useService('userService'); const updateProfile = useCallback(async (profileData) => { const updatedUser = await userService.updateProfile(userId, profileData); setUser(updatedUser); return updatedUser; }, [userId, userService]); useEffect(() => { if (!userId) return; userService.getUser(userId).then(setUser).finally(() => setLoading(false)); }, [userId, userService]); return { user, loading, updateProfile }; };","title":"Custom Hook \u0441 DDD"},{"location":"questions/architecture/ddd_small/#dependency-injection","text":"class DIContainer { constructor() { this.dependencies = new Map(); this.singletons = new Map(); } register(token, factory, options = {}) { this.dependencies.set(token, { factory, options }); } resolve(token) { const dep = this.dependencies.get(token); if (!dep) throw new Error(`Dependency ${token} not found`); if (dep.options.singleton) { if (!this.singletons.has(token)) { this.singletons.set(token, dep.factory(this)); } return this.singletons.get(token); } return dep.factory(this); } } // Setup const container = new DIContainer(); container.register('userRepository', (c) => new HttpUserRepository(c.resolve('httpClient'))); container.register('userService', (c) => new UserApplicationService(c.resolve('userRepository'))); // React Context const DIContext = createContext(container); const useService = (token) => { const container = useContext(DIContext); return useMemo(() => container.resolve(token), [container, token]); };","title":"Dependency Injection"},{"location":"questions/architecture/ddd_small/#bounded-contexts","text":"// User Context const UserContext = { entities: { User }, valueObjects: { Email, Password }, services: { UserRegistrationService }, repositories: { UserRepository } }; // Order Context const OrderContext = { entities: { Order, OrderItem }, valueObjects: { Money, OrderStatus }, services: { OrderPricingService }, repositories: { OrderRepository } }; // Communication between contexts \u0447\u0435\u0440\u0435\u0437 Domain Events DomainEvents.subscribe(UserRegisteredEvent, async (event) => { // Order context \u0440\u0435\u0430\u0433\u0438\u0440\u0443\u0435\u0442 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0438\u0437 User context await orderService.createWelcomeDiscount(event.userId); });","title":"Bounded Contexts"},{"location":"questions/architecture/ddd_small/#testing-ddd","text":"describe('User Entity', () => { it('should update profile with valid data', () => { const user = new User('123', new Email('test@example.com'), {}); user.updateProfile({ name: 'John' }); expect(user.profile.name).toBe('John'); }); it('should throw error for invalid profile', () => { const user = new User('123', new Email('test@example.com'), {}); expect(() => user.updateProfile({ name: '' })).toThrow('Name is required'); }); }); // Application Service Testing describe('UserApplicationService', () => { let userRepository; let userService; beforeEach(() => { userRepository = new InMemoryUserRepository(); userService = new UserApplicationService(userRepository); }); it('should update user profile', async () => { const user = new User('123', new Email('test@example.com'), {}); await userRepository.save(user); await userService.updateProfile('123', { name: 'John' }); const updatedUser = await userRepository.findById('123'); expect(updatedUser.profile.name).toBe('John'); }); });","title":"Testing DDD"},{"location":"questions/architecture/ddd_small/#ddd","text":"Entity vs Value Object : - Entity: \u0418\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c, \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f - Value Object: \u041d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c Aggregate Rules : - \u041e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 = \u043e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f - \u0421\u0441\u044b\u043b\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e ID - \u0410\u0433\u0440\u0435\u0433\u0430\u0442 - \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 Domain Events : - \u0421\u043b\u0430\u0431\u043e\u0435 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438 - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 side effects - Audit trail \u0438 event sourcing Repository Pattern : - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 - \u0418\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b DDD"},{"location":"questions/architecture/ddd_small/#_3","text":"src/ \u251c\u2500\u2500 domain/ \u2502 \u251c\u2500\u2500 entities/ \u2502 \u251c\u2500\u2500 value-objects/ \u2502 \u251c\u2500\u2500 services/ \u2502 \u2514\u2500\u2500 events/ \u251c\u2500\u2500 application/ \u2502 \u251c\u2500\u2500 services/ \u2502 \u2514\u2500\u2500 use-cases/ \u251c\u2500\u2500 infrastructure/ \u2502 \u251c\u2500\u2500 repositories/ \u2502 \u2514\u2500\u2500 external-services/ \u2514\u2500\u2500 presentation/ \u251c\u2500\u2500 components/ \u251c\u2500\u2500 hooks/ \u2514\u2500\u2500 contexts/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"questions/architecture/ddd_small/#best-practices-senior-level","text":"Thin UI Layer : \u0412\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0432 Domain \u0441\u043b\u043e\u0435 Immutable Value Objects : \u041d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 Single Aggregate Transaction : \u041e\u0434\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f = \u043e\u0434\u0438\u043d \u0430\u0433\u0440\u0435\u0433\u0430\u0442 Domain Events : \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u0431\u044b\u0442\u0438\u044f Repository Abstraction : \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Dependency Injection : \u0418\u043d\u0432\u0435\u0440\u0441\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 Bounded Context Isolation : \u0427\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432","title":"Best Practices Senior-level"},{"location":"questions/architecture/ddd_small/#senior","text":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Entity vs Value Object? \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438? \u0413\u0434\u0435 \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0432 DDD? \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e? \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 Bounded Contexts? \u041a\u043e\u0433\u0434\u0430 DDD \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d \u0432\u043e frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445? \u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c DDD \u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 React \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/architecture/microfrontends/","text":"\u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b (Microfrontends) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0433\u043e frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435, \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b - \u044d\u0442\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c, \u0433\u0434\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c\u044b\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0435\u0434\u0438\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b : - \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 - \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 - \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c - \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 1. Build-time Integration \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 NPM \u043f\u0430\u043a\u0435\u0442\u044b. // package.json { \"dependencies\": { \"@company/header-microfrontend\": \"^1.2.0\", \"@company/sidebar-microfrontend\": \"^2.1.0\" } } // main-app/src/App.jsx import Header from '@company/header-microfrontend'; import Sidebar from '@company/sidebar-microfrontend'; function App() { return ( <div> <Header /> <div style={{ display: 'flex' }}> <Sidebar /> <main> {/* \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 */} </main> </div> </div> ); } \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u043d\u0434\u043b\u0430 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 2. Run-time Integration iframe \u043f\u043e\u0434\u0445\u043e\u0434 <!-- \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 --> <div class=\"microfrontend-container\"> <iframe src=\"https://team-a.microfrontend.com/header\" width=\"100%\" height=\"60\" frameborder=\"0\"> </iframe> </div> \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0435\u0439, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, UX Module Federation (Webpack 5) // webpack.config.js \u0434\u043b\u044f \u0445\u043e\u0441\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f const ModuleFederationPlugin = require('@module-federation/webpack'); module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'host', remotes: { header: 'header@http://localhost:3001/remoteEntry.js', dashboard: 'dashboard@http://localhost:3002/remoteEntry.js', }, }), ], }; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 const Header = React.lazy(() => import('header/Header')); function App() { return ( <div> <Suspense fallback={<div>Loading Header...</div>}> <Header /> </Suspense> {/* \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 */} </div> ); } // webpack.config.js \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'header', filename: 'remoteEntry.js', exposes: { './Header': './src/Header', }, shared: { react: { singleton: true }, 'react-dom': { singleton: true }, }, }), ], }; Single-SPA Framework // \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 import { registerApplication, start } from 'single-spa'; registerApplication({ name: 'header-app', app: () => System.import('header-app'), activeWhen: () => true, }); registerApplication({ name: 'dashboard-app', app: () => System.import('dashboard-app'), activeWhen: (location) => location.pathname.startsWith('/dashboard'), }); start(); // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0441 Single-SPA import React from 'react'; import ReactDOM from 'react-dom'; import singleSpaReact from 'single-spa-react'; import App from './App'; const lifecycles = singleSpaReact({ React, ReactDOM, rootComponent: App, errorBoundary: ErrorBoundary, }); export const { bootstrap, mount, unmount } = lifecycles; \u041a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438 1. CustomEvents // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 const userUpdatedEvent = new CustomEvent('user-updated', { detail: { userId: 123, name: 'John Doe' } }); window.dispatchEvent(userUpdatedEvent); // \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0435 useEffect(() => { const handleUserUpdate = (event) => { setUser(event.detail); }; window.addEventListener('user-updated', handleUserUpdate); return () => { window.removeEventListener('user-updated', handleUserUpdate); }; }, []); 2. Shared State \u0447\u0435\u0440\u0435\u0437 EventBus // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e eventBus class EventBus { constructor() { this.events = {}; } on(event, callback) { if (!this.events[event]) { this.events[event] = []; } this.events[event].push(callback); } emit(event, data) { if (this.events[event]) { this.events[event].forEach(callback => callback(data)); } } off(event, callback) { if (this.events[event]) { this.events[event] = this.events[event].filter(cb => cb !== callback); } } } window.eventBus = new EventBus(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u0445 // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 A const updateUserProfile = (userData) => { window.eventBus.emit('user-profile-updated', userData); }; // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 B useEffect(() => { const handleProfileUpdate = (userData) => { console.log('User profile updated:', userData); }; window.eventBus.on('user-profile-updated', handleProfileUpdate); return () => { window.eventBus.off('user-profile-updated', handleProfileUpdate); }; }, []); 3. Shared Dependencies // \u041e\u0431\u0449\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 window.sharedDependencies = { userService: { getCurrentUser: () => fetch('/api/user/current'), updateUser: (data) => fetch('/api/user', { method: 'PUT', body: JSON.stringify(data) }) }, globalState: { user: null, theme: 'light' } }; \u0421\u0442\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 UI \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c Design System \u043f\u043e\u0434\u0445\u043e\u0434 // \u041e\u0431\u0449\u0438\u0439 design system \u043f\u0430\u043a\u0435\u0442 // @company/design-system export const Button = styled.button` background: ${props => props.theme.primary}; color: white; border: none; padding: 8px 16px; border-radius: 4px; `; export const theme = { primary: '#007bff', secondary: '#6c757d', spacing: { small: '8px', medium: '16px', large: '24px' } }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0435 import { Button, theme } from '@company/design-system'; import { ThemeProvider } from 'styled-components'; function MicrofrontendApp() { return ( <ThemeProvider theme={theme}> <div> <Button>\u041a\u043d\u043e\u043f\u043a\u0430 \u0438\u0437 design system</Button> </div> </ThemeProvider> ); } CSS-in-JS \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 const useStyles = createUseStyles({ container: { padding: '16px', backgroundColor: '#f5f5f5' } }, { generateId: (rule, sheet) => `mf-header-${rule.key}` }); \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u0445 Single-SPA Router // \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 import { navigateToUrl } from 'single-spa'; function Navigation() { return ( <nav> <a href=\"/dashboard\" onClick={navigateToUrl}>Dashboard</a> <a href=\"/profile\" onClick={navigateToUrl}>Profile</a> </nav> ); } // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0435\u0439 import { Router, Route, Switch } from 'react-router-dom'; function DashboardMicrofrontend() { return ( <Router basename=\"/dashboard\"> <Switch> <Route path=\"/\" exact component={DashboardHome} /> <Route path=\"/analytics\" component={Analytics} /> <Route path=\"/settings\" component={Settings} /> </Switch> </Router> ); } \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0438 DevOps Independent Deployment Pipeline # .github/workflows/header-microfrontend.yml name: Header Microfrontend CI/CD on: push: paths: - 'packages/header/**' jobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Build Header run: | cd packages/header npm install npm run build - name: Deploy to CDN run: | aws s3 sync packages/header/dist s3://microfrontends-cdn/header/ aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 endpoints const MICROFRONTEND_VERSIONS = { header: process.env.HEADER_VERSION || 'latest', dashboard: process.env.DASHBOARD_VERSION || 'latest' }; const loadMicrofrontend = (name, version = 'latest') => { const script = document.createElement('script'); script.src = `https://cdn.company.com/${name}/${version}/remoteEntry.js`; document.head.appendChild(script); }; Testing \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 Contract Testing // \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438 describe('Header Microfrontend Contract', () => { it('should emit user-logout event with correct structure', () => { const eventSpy = jest.fn(); window.addEventListener('user-logout', eventSpy); // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 header fireEvent.click(screen.getByTestId('logout-button')); expect(eventSpy).toHaveBeenCalledWith( expect.objectContaining({ detail: { userId: expect.any(String), timestamp: expect.any(Number) } }) ); }); }); Integration Testing // \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b describe('Microfrontends Integration', () => { beforeEach(() => { // \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0441\u0435\u0445 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 loadMicrofrontend('header'); loadMicrofrontend('dashboard'); }); it('should update dashboard when user changes in header', async () => { // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 header await userEvent.click(screen.getByTestId('user-switcher')); await userEvent.click(screen.getByText('John Doe')); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 dashboard await waitFor(() => { expect(screen.getByTestId('dashboard-user-name')).toHaveTextContent('John Doe'); }); }); }); \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430 Error Boundaries \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 class MicrofrontendErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 window.errorReporting?.captureException(error, { microfrontend: this.props.name, extra: errorInfo }); } render() { if (this.state.hasError) { return this.props.fallback || <div>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a \u0432 {this.props.name}</div>; } return this.props.children; } } Performance Monitoring // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 const measureMicrofrontendLoad = (name) => { performance.mark(`${name}-start`); return { end: () => { performance.mark(`${name}-end`); performance.measure(`${name}-load`, `${name}-start`, `${name}-end`); const measure = performance.getEntriesByName(`${name}-load`)[0]; console.log(`${name} loaded in ${measure.duration}ms`); } }; }; \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b : \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 : \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u0442\u0435\u043a \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u041b\u0435\u0433\u0447\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043a\u043e\u0434\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443 \u041e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c : \u041f\u0430\u0434\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c : \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c : \u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0431\u043e\u043b\u044c\u0448\u0435 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c : \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c \u0435\u0434\u0438\u043d\u043e\u0433\u043e UX \u041e\u0442\u043b\u0430\u0434\u043a\u0430 : \u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0447\u0430\u0441\u0442\u044f\u043c\u0438 Best Practices \u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u0430 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b - \u044d\u0442\u043e \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044f, \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0427\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Shared dependencies : \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u043e\u0431\u0449\u0438\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 Consistent UX : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 design system Monitoring : \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Testing : \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 contract \u0438 integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Testing Strategies - \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Module Federation \u0438\u043b\u0438 Single-SPA - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 DevOps \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0441 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u043e\u0439 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b? - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c UI \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c CI/CD \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432?","title":"\u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b (Microfrontends)"},{"location":"questions/architecture/microfrontends/#microfrontends","text":"","title":"\u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b (Microfrontends)"},{"location":"questions/architecture/microfrontends/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0433\u043e frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435, \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/microfrontends/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/microfrontends/#_3","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b - \u044d\u0442\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c, \u0433\u0434\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c\u044b\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0435\u0434\u0438\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b : - \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 - \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 - \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c - \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b"},{"location":"questions/architecture/microfrontends/#_4","text":"","title":"\u041f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/architecture/microfrontends/#1-build-time-integration","text":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 NPM \u043f\u0430\u043a\u0435\u0442\u044b. // package.json { \"dependencies\": { \"@company/header-microfrontend\": \"^1.2.0\", \"@company/sidebar-microfrontend\": \"^2.1.0\" } } // main-app/src/App.jsx import Header from '@company/header-microfrontend'; import Sidebar from '@company/sidebar-microfrontend'; function App() { return ( <div> <Header /> <div style={{ display: 'flex' }}> <Sidebar /> <main> {/* \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 */} </main> </div> </div> ); } \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u043d\u0434\u043b\u0430 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445","title":"1. Build-time Integration"},{"location":"questions/architecture/microfrontends/#2-run-time-integration","text":"","title":"2. Run-time Integration"},{"location":"questions/architecture/microfrontends/#iframe","text":"<!-- \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 --> <div class=\"microfrontend-container\"> <iframe src=\"https://team-a.microfrontend.com/header\" width=\"100%\" height=\"60\" frameborder=\"0\"> </iframe> </div> \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0435\u0439, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, UX","title":"iframe \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/microfrontends/#module-federation-webpack-5","text":"// webpack.config.js \u0434\u043b\u044f \u0445\u043e\u0441\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f const ModuleFederationPlugin = require('@module-federation/webpack'); module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'host', remotes: { header: 'header@http://localhost:3001/remoteEntry.js', dashboard: 'dashboard@http://localhost:3002/remoteEntry.js', }, }), ], }; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 const Header = React.lazy(() => import('header/Header')); function App() { return ( <div> <Suspense fallback={<div>Loading Header...</div>}> <Header /> </Suspense> {/* \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 */} </div> ); } // webpack.config.js \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'header', filename: 'remoteEntry.js', exposes: { './Header': './src/Header', }, shared: { react: { singleton: true }, 'react-dom': { singleton: true }, }, }), ], };","title":"Module Federation (Webpack 5)"},{"location":"questions/architecture/microfrontends/#single-spa-framework","text":"// \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 import { registerApplication, start } from 'single-spa'; registerApplication({ name: 'header-app', app: () => System.import('header-app'), activeWhen: () => true, }); registerApplication({ name: 'dashboard-app', app: () => System.import('dashboard-app'), activeWhen: (location) => location.pathname.startsWith('/dashboard'), }); start(); // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0441 Single-SPA import React from 'react'; import ReactDOM from 'react-dom'; import singleSpaReact from 'single-spa-react'; import App from './App'; const lifecycles = singleSpaReact({ React, ReactDOM, rootComponent: App, errorBoundary: ErrorBoundary, }); export const { bootstrap, mount, unmount } = lifecycles;","title":"Single-SPA Framework"},{"location":"questions/architecture/microfrontends/#_5","text":"","title":"\u041a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438"},{"location":"questions/architecture/microfrontends/#1-customevents","text":"// \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 const userUpdatedEvent = new CustomEvent('user-updated', { detail: { userId: 123, name: 'John Doe' } }); window.dispatchEvent(userUpdatedEvent); // \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0435 useEffect(() => { const handleUserUpdate = (event) => { setUser(event.detail); }; window.addEventListener('user-updated', handleUserUpdate); return () => { window.removeEventListener('user-updated', handleUserUpdate); }; }, []);","title":"1. CustomEvents"},{"location":"questions/architecture/microfrontends/#2-shared-state-eventbus","text":"// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e eventBus class EventBus { constructor() { this.events = {}; } on(event, callback) { if (!this.events[event]) { this.events[event] = []; } this.events[event].push(callback); } emit(event, data) { if (this.events[event]) { this.events[event].forEach(callback => callback(data)); } } off(event, callback) { if (this.events[event]) { this.events[event] = this.events[event].filter(cb => cb !== callback); } } } window.eventBus = new EventBus(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u0445 // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 A const updateUserProfile = (userData) => { window.eventBus.emit('user-profile-updated', userData); }; // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 B useEffect(() => { const handleProfileUpdate = (userData) => { console.log('User profile updated:', userData); }; window.eventBus.on('user-profile-updated', handleProfileUpdate); return () => { window.eventBus.off('user-profile-updated', handleProfileUpdate); }; }, []);","title":"2. Shared State \u0447\u0435\u0440\u0435\u0437 EventBus"},{"location":"questions/architecture/microfrontends/#3-shared-dependencies","text":"// \u041e\u0431\u0449\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 window.sharedDependencies = { userService: { getCurrentUser: () => fetch('/api/user/current'), updateUser: (data) => fetch('/api/user', { method: 'PUT', body: JSON.stringify(data) }) }, globalState: { user: null, theme: 'light' } };","title":"3. Shared Dependencies"},{"location":"questions/architecture/microfrontends/#ui","text":"","title":"\u0421\u0442\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 UI \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/microfrontends/#design-system","text":"// \u041e\u0431\u0449\u0438\u0439 design system \u043f\u0430\u043a\u0435\u0442 // @company/design-system export const Button = styled.button` background: ${props => props.theme.primary}; color: white; border: none; padding: 8px 16px; border-radius: 4px; `; export const theme = { primary: '#007bff', secondary: '#6c757d', spacing: { small: '8px', medium: '16px', large: '24px' } }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0435 import { Button, theme } from '@company/design-system'; import { ThemeProvider } from 'styled-components'; function MicrofrontendApp() { return ( <ThemeProvider theme={theme}> <div> <Button>\u041a\u043d\u043e\u043f\u043a\u0430 \u0438\u0437 design system</Button> </div> </ThemeProvider> ); }","title":"Design System \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/microfrontends/#css-in-js","text":"// \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 const useStyles = createUseStyles({ container: { padding: '16px', backgroundColor: '#f5f5f5' } }, { generateId: (rule, sheet) => `mf-header-${rule.key}` });","title":"CSS-in-JS \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438"},{"location":"questions/architecture/microfrontends/#_6","text":"","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u0445"},{"location":"questions/architecture/microfrontends/#single-spa-router","text":"// \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 import { navigateToUrl } from 'single-spa'; function Navigation() { return ( <nav> <a href=\"/dashboard\" onClick={navigateToUrl}>Dashboard</a> <a href=\"/profile\" onClick={navigateToUrl}>Profile</a> </nav> ); } // \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0435\u0439 import { Router, Route, Switch } from 'react-router-dom'; function DashboardMicrofrontend() { return ( <Router basename=\"/dashboard\"> <Switch> <Route path=\"/\" exact component={DashboardHome} /> <Route path=\"/analytics\" component={Analytics} /> <Route path=\"/settings\" component={Settings} /> </Switch> </Router> ); }","title":"Single-SPA Router"},{"location":"questions/architecture/microfrontends/#devops","text":"","title":"\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0438 DevOps"},{"location":"questions/architecture/microfrontends/#independent-deployment-pipeline","text":"# .github/workflows/header-microfrontend.yml name: Header Microfrontend CI/CD on: push: paths: - 'packages/header/**' jobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Build Header run: | cd packages/header npm install npm run build - name: Deploy to CDN run: | aws s3 sync packages/header/dist s3://microfrontends-cdn/header/ aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }}","title":"Independent Deployment Pipeline"},{"location":"questions/architecture/microfrontends/#_7","text":"// \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 endpoints const MICROFRONTEND_VERSIONS = { header: process.env.HEADER_VERSION || 'latest', dashboard: process.env.DASHBOARD_VERSION || 'latest' }; const loadMicrofrontend = (name, version = 'latest') => { const script = document.createElement('script'); script.src = `https://cdn.company.com/${name}/${version}/remoteEntry.js`; document.head.appendChild(script); };","title":"\u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/microfrontends/#testing","text":"","title":"Testing \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"questions/architecture/microfrontends/#contract-testing","text":"// \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438 describe('Header Microfrontend Contract', () => { it('should emit user-logout event with correct structure', () => { const eventSpy = jest.fn(); window.addEventListener('user-logout', eventSpy); // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 header fireEvent.click(screen.getByTestId('logout-button')); expect(eventSpy).toHaveBeenCalledWith( expect.objectContaining({ detail: { userId: expect.any(String), timestamp: expect.any(Number) } }) ); }); });","title":"Contract Testing"},{"location":"questions/architecture/microfrontends/#integration-testing","text":"// \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b describe('Microfrontends Integration', () => { beforeEach(() => { // \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0441\u0435\u0445 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 loadMicrofrontend('header'); loadMicrofrontend('dashboard'); }); it('should update dashboard when user changes in header', async () => { // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 header await userEvent.click(screen.getByTestId('user-switcher')); await userEvent.click(screen.getByText('John Doe')); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 dashboard await waitFor(() => { expect(screen.getByTestId('dashboard-user-name')).toHaveTextContent('John Doe'); }); }); });","title":"Integration Testing"},{"location":"questions/architecture/microfrontends/#_8","text":"","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430"},{"location":"questions/architecture/microfrontends/#error-boundaries","text":"class MicrofrontendErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 window.errorReporting?.captureException(error, { microfrontend: this.props.name, extra: errorInfo }); } render() { if (this.state.hasError) { return this.props.fallback || <div>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a \u0432 {this.props.name}</div>; } return this.props.children; } }","title":"Error Boundaries \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430"},{"location":"questions/architecture/microfrontends/#performance-monitoring","text":"// \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 const measureMicrofrontendLoad = (name) => { performance.mark(`${name}-start`); return { end: () => { performance.mark(`${name}-end`); performance.measure(`${name}-load`, `${name}-start`, `${name}-end`); const measure = performance.getEntriesByName(`${name}-load`)[0]; console.log(`${name} loaded in ${measure.duration}ms`); } }; };","title":"Performance Monitoring"},{"location":"questions/architecture/microfrontends/#_9","text":"","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/architecture/microfrontends/#_10","text":"\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b : \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 : \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u0442\u0435\u043a \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u041b\u0435\u0433\u0447\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043a\u043e\u0434\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443 \u041e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c : \u041f\u0430\u0434\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430"},{"location":"questions/architecture/microfrontends/#_11","text":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c : \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c : \u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0431\u043e\u043b\u044c\u0448\u0435 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c : \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c \u0435\u0434\u0438\u043d\u043e\u0433\u043e UX \u041e\u0442\u043b\u0430\u0434\u043a\u0430 : \u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0447\u0430\u0441\u0442\u044f\u043c\u0438","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/architecture/microfrontends/#best-practices","text":"\u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u0430 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b - \u044d\u0442\u043e \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044f, \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0427\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Shared dependencies : \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u043e\u0431\u0449\u0438\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 Consistent UX : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 design system Monitoring : \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Testing : \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 contract \u0438 integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","title":"Best Practices"},{"location":"questions/architecture/microfrontends/#_12","text":"State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Testing Strategies - \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/architecture/microfrontends/#_13","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Module Federation \u0438\u043b\u0438 Single-SPA - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 DevOps \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0441 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u043e\u0439 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b? - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c UI \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430\u043c\u0438? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c CI/CD \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u0432?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/microfrontends_small/","text":"Microfrontends - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b = \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u0435\u0434\u0438\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b : - \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 - \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u0430 - \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 1. Module Federation (Webpack 5) // Host \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 const ModuleFederationPlugin = require('@module-federation/webpack'); module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'host', remotes: { header: 'header@http://localhost:3001/remoteEntry.js', dashboard: 'dashboard@http://localhost:3002/remoteEntry.js', }, }), ], }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const Header = React.lazy(() => import('header/Header')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <Header /> </Suspense> ); } 2. Single-SPA Framework import { registerApplication, start } from 'single-spa'; registerApplication({ name: 'header-app', app: () => System.import('header-app'), activeWhen: () => true, }); registerApplication({ name: 'dashboard-app', app: () => System.import('dashboard-app'), activeWhen: (location) => location.pathname.startsWith('/dashboard'), }); start(); 3. Build-time Integration // NPM \u043f\u0430\u043a\u0435\u0442\u044b // package.json { \"dependencies\": { \"@company/header-mf\": \"^1.2.0\", \"@company/sidebar-mf\": \"^2.1.0\" } } // \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438 \u041a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 MF CustomEvents - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 const event = new CustomEvent('user-updated', { detail: { userId: 123, name: 'John' } }); window.dispatchEvent(event); // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 useEffect(() => { const handler = (event) => setUser(event.detail); window.addEventListener('user-updated', handler); return () => window.removeEventListener('user-updated', handler); }, []); EventBus - \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 class EventBus { constructor() { this.events = {}; } on(event, callback) { if (!this.events[event]) this.events[event] = []; this.events[event].push(callback); } emit(event, data) { this.events[event]?.forEach(cb => cb(data)); } off(event, callback) { this.events[event] = this.events[event]?.filter(cb => cb !== callback); } } window.eventBus = new EventBus(); Shared State // \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b window.sharedServices = { userService: { getCurrentUser: () => fetch('/api/user/current'), updateUser: (data) => fetch('/api/user', { method: 'PUT', body: JSON.stringify(data) }) }, globalState: { user: null, theme: 'light' } }; \u0421\u0442\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c Design System // \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 @company/design-system export const Button = styled.button` background: ${props => props.theme.primary}; padding: 8px 16px; border-radius: 4px; `; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 MF import { Button, theme } from '@company/design-system'; CSS \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f // CSS-in-JS \u0441 prefixes const useStyles = createUseStyles({ container: { padding: '16px' } }, { generateId: (rule, sheet) => `mf-${microfrontendName}-${rule.key}` }); Error Handling Error Boundaries \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e MF class MFErrorBoundary extends React.Component { componentDidCatch(error, errorInfo) { window.errorReporting?.captureException(error, { microfrontend: this.props.name, extra: errorInfo }); } render() { if (this.state.hasError) { return this.props.fallback || <div>\u041e\u0448\u0438\u0431\u043a\u0430 \u0432 {this.props.name}</div>; } return this.props.children; } } Testing \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 Contract Testing describe('Header MF Contract', () => { it('should emit user-logout event with correct structure', () => { const eventSpy = jest.fn(); window.addEventListener('user-logout', eventSpy); fireEvent.click(screen.getByTestId('logout-button')); expect(eventSpy).toHaveBeenCalledWith( expect.objectContaining({ detail: { userId: expect.any(String), timestamp: expect.any(Number) } }) ); }); }); \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 Independent Deployment # CI/CD pipeline \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e MF on: push: paths: ['packages/header/**'] jobs: deploy: steps: - name: Build & Deploy run: | cd packages/header npm run build aws s3 sync dist s3://mf-cdn/header/ \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 const VERSIONS = { header: process.env.HEADER_VERSION || 'latest', dashboard: process.env.DASHBOARD_VERSION || 'latest' }; const loadMF = (name, version = 'latest') => { const script = document.createElement('script'); script.src = `https://cdn.company.com/${name}/${version}/remoteEntry.js`; document.head.appendChild(script); }; \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 vs \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u2705 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 - \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0442\u0435\u043a\u0438 \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c - \u043b\u0435\u0433\u0447\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u041e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c - \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0431\u043e\u0435\u0432 \u274c \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c - \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Performance - \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c - \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c UX Debugging - \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u2705 \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (>50 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0434\u043e\u043c\u0435\u043d\u044b \u0441 \u0447\u0435\u0442\u043a\u0438\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 Legacy migration - \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0435\u043c\u043f\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u274c \u041d\u0415 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (<10 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f - overkill \u0422\u0435\u0441\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0442\u0430\u0440\u0442\u0430\u043f\u044b - \u043f\u0440\u0435\u0436\u0434\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041d\u0435\u0442 \u0447\u0435\u0442\u043a\u0438\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0434\u043e\u043c\u0435\u043d\u043e\u0432 Senior Best Practices Start with monolith - MF \u044d\u0442\u043e \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044f, \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 Domain boundaries - \u0447\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0434\u043e\u043c\u0435\u043d\u0430\u043c Shared dependencies - \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0439 \u043e\u0431\u0449\u0438\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 (React, Router) Design system - \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 UI Contract testing - \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043c\u0435\u0436\u0434\u0443 MF Independent deployment - \u043a\u0430\u0436\u0434\u044b\u0439 MF \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u0435\u043f\u043b\u043e\u0438\u0442\u044c\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e Error isolation - \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c MF \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u043e\u043d\u044f\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 Performance monitoring - \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 \u0431\u0430\u043d\u0434\u043b\u043e\u0432 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 Versioning strategy - \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API Team autonomy - \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f Routing // Single-SPA \u043f\u043e\u0434\u0445\u043e\u0434 import { navigateToUrl } from 'single-spa'; function Navigation() { return ( <nav> <a href=\"/dashboard\" onClick={navigateToUrl}>Dashboard</a> </nav> ); } State sharing // Minimal shared state - \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 window.globalState = { currentUser: null, theme: 'light', locale: 'en' }; Performance \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f Bundle duplication - \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 Loading waterfalls - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Runtime overhead - Module Federation \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 overhead Caching strategy - \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Monitoring // Performance tracking const measureMFLoad = (name) => { performance.mark(`${name}-start`); return { end: () => { performance.mark(`${name}-end`); performance.measure(`${name}-load`, `${name}-start`, `${name}-end`); const measure = performance.getEntriesByName(`${name}-load`)[0]; console.log(`${name} loaded in ${measure.duration}ms`); } }; }; \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b \u0440\u0435\u0448\u0430\u044e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u0430 \u043d\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0438\u0445 \u0434\u043b\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432!","title":"Microfrontends - Senior Cheat Sheet (small)"},{"location":"questions/architecture/microfrontends_small/#microfrontends-senior-cheat-sheet-small","text":"","title":"Microfrontends - Senior Cheat Sheet (small)"},{"location":"questions/architecture/microfrontends_small/#_1","text":"\u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b = \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u0435\u0434\u0438\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b : - \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 - \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u0430 - \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f"},{"location":"questions/architecture/microfrontends_small/#_2","text":"","title":"\u041f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/architecture/microfrontends_small/#1-module-federation-webpack-5","text":"// Host \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 const ModuleFederationPlugin = require('@module-federation/webpack'); module.exports = { plugins: [ new ModuleFederationPlugin({ name: 'host', remotes: { header: 'header@http://localhost:3001/remoteEntry.js', dashboard: 'dashboard@http://localhost:3002/remoteEntry.js', }, }), ], }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const Header = React.lazy(() => import('header/Header')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <Header /> </Suspense> ); }","title":"1. Module Federation (Webpack 5)"},{"location":"questions/architecture/microfrontends_small/#2-single-spa-framework","text":"import { registerApplication, start } from 'single-spa'; registerApplication({ name: 'header-app', app: () => System.import('header-app'), activeWhen: () => true, }); registerApplication({ name: 'dashboard-app', app: () => System.import('dashboard-app'), activeWhen: (location) => location.pathname.startsWith('/dashboard'), }); start();","title":"2. Single-SPA Framework"},{"location":"questions/architecture/microfrontends_small/#3-build-time-integration","text":"// NPM \u043f\u0430\u043a\u0435\u0442\u044b // package.json { \"dependencies\": { \"@company/header-mf\": \"^1.2.0\", \"@company/sidebar-mf\": \"^2.1.0\" } } // \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438","title":"3. Build-time Integration"},{"location":"questions/architecture/microfrontends_small/#mf","text":"","title":"\u041a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 MF"},{"location":"questions/architecture/microfrontends_small/#customevents-","text":"// \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 const event = new CustomEvent('user-updated', { detail: { userId: 123, name: 'John' } }); window.dispatchEvent(event); // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 useEffect(() => { const handler = (event) => setUser(event.detail); window.addEventListener('user-updated', handler); return () => window.removeEventListener('user-updated', handler); }, []);","title":"CustomEvents - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/microfrontends_small/#eventbus-","text":"class EventBus { constructor() { this.events = {}; } on(event, callback) { if (!this.events[event]) this.events[event] = []; this.events[event].push(callback); } emit(event, data) { this.events[event]?.forEach(cb => cb(data)); } off(event, callback) { this.events[event] = this.events[event]?.filter(cb => cb !== callback); } } window.eventBus = new EventBus();","title":"EventBus - \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/microfrontends_small/#shared-state","text":"// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b window.sharedServices = { userService: { getCurrentUser: () => fetch('/api/user/current'), updateUser: (data) => fetch('/api/user', { method: 'PUT', body: JSON.stringify(data) }) }, globalState: { user: null, theme: 'light' } };","title":"Shared State"},{"location":"questions/architecture/microfrontends_small/#_3","text":"","title":"\u0421\u0442\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/microfrontends_small/#design-system","text":"// \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 @company/design-system export const Button = styled.button` background: ${props => props.theme.primary}; padding: 8px 16px; border-radius: 4px; `; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 MF import { Button, theme } from '@company/design-system';","title":"Design System"},{"location":"questions/architecture/microfrontends_small/#css","text":"// CSS-in-JS \u0441 prefixes const useStyles = createUseStyles({ container: { padding: '16px' } }, { generateId: (rule, sheet) => `mf-${microfrontendName}-${rule.key}` });","title":"CSS \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f"},{"location":"questions/architecture/microfrontends_small/#error-handling","text":"","title":"Error Handling"},{"location":"questions/architecture/microfrontends_small/#error-boundaries-mf","text":"class MFErrorBoundary extends React.Component { componentDidCatch(error, errorInfo) { window.errorReporting?.captureException(error, { microfrontend: this.props.name, extra: errorInfo }); } render() { if (this.state.hasError) { return this.props.fallback || <div>\u041e\u0448\u0438\u0431\u043a\u0430 \u0432 {this.props.name}</div>; } return this.props.children; } }","title":"Error Boundaries \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e MF"},{"location":"questions/architecture/microfrontends_small/#testing","text":"","title":"Testing \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"questions/architecture/microfrontends_small/#contract-testing","text":"describe('Header MF Contract', () => { it('should emit user-logout event with correct structure', () => { const eventSpy = jest.fn(); window.addEventListener('user-logout', eventSpy); fireEvent.click(screen.getByTestId('logout-button')); expect(eventSpy).toHaveBeenCalledWith( expect.objectContaining({ detail: { userId: expect.any(String), timestamp: expect.any(Number) } }) ); }); });","title":"Contract Testing"},{"location":"questions/architecture/microfrontends_small/#_4","text":"","title":"\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/microfrontends_small/#independent-deployment","text":"# CI/CD pipeline \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e MF on: push: paths: ['packages/header/**'] jobs: deploy: steps: - name: Build & Deploy run: | cd packages/header npm run build aws s3 sync dist s3://mf-cdn/header/","title":"Independent Deployment"},{"location":"questions/architecture/microfrontends_small/#_5","text":"const VERSIONS = { header: process.env.HEADER_VERSION || 'latest', dashboard: process.env.DASHBOARD_VERSION || 'latest' }; const loadMF = (name, version = 'latest') => { const script = document.createElement('script'); script.src = `https://cdn.company.com/${name}/${version}/remoteEntry.js`; document.head.appendChild(script); };","title":"\u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/microfrontends_small/#vs","text":"","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 vs \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/architecture/microfrontends_small/#_6","text":"\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 - \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0442\u0435\u043a\u0438 \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c - \u043b\u0435\u0433\u0447\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u041e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c - \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0431\u043e\u0435\u0432","title":"\u2705 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430"},{"location":"questions/architecture/microfrontends_small/#_7","text":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c - \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Performance - \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c - \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c UX Debugging - \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439","title":"\u274c \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/architecture/microfrontends_small/#_8","text":"","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/architecture/microfrontends_small/#_9","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (>50 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0434\u043e\u043c\u0435\u043d\u044b \u0441 \u0447\u0435\u0442\u043a\u0438\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 Legacy migration - \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0435\u043c\u043f\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e","title":"\u2705 \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:"},{"location":"questions/architecture/microfrontends_small/#_10","text":"\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (<10 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f - overkill \u0422\u0435\u0441\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0442\u0430\u0440\u0442\u0430\u043f\u044b - \u043f\u0440\u0435\u0436\u0434\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041d\u0435\u0442 \u0447\u0435\u0442\u043a\u0438\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0434\u043e\u043c\u0435\u043d\u043e\u0432","title":"\u274c \u041d\u0415 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:"},{"location":"questions/architecture/microfrontends_small/#senior-best-practices","text":"Start with monolith - MF \u044d\u0442\u043e \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044f, \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 Domain boundaries - \u0447\u0435\u0442\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0434\u043e\u043c\u0435\u043d\u0430\u043c Shared dependencies - \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0439 \u043e\u0431\u0449\u0438\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 (React, Router) Design system - \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 UI Contract testing - \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043c\u0435\u0436\u0434\u0443 MF Independent deployment - \u043a\u0430\u0436\u0434\u044b\u0439 MF \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u0435\u043f\u043b\u043e\u0438\u0442\u044c\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e Error isolation - \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c MF \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u043e\u043d\u044f\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 Performance monitoring - \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 \u0431\u0430\u043d\u0434\u043b\u043e\u0432 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 Versioning strategy - \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API Team autonomy - \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438","title":"Senior Best Practices"},{"location":"questions/architecture/microfrontends_small/#_11","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"questions/architecture/microfrontends_small/#routing","text":"// Single-SPA \u043f\u043e\u0434\u0445\u043e\u0434 import { navigateToUrl } from 'single-spa'; function Navigation() { return ( <nav> <a href=\"/dashboard\" onClick={navigateToUrl}>Dashboard</a> </nav> ); }","title":"Routing"},{"location":"questions/architecture/microfrontends_small/#state-sharing","text":"// Minimal shared state - \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 window.globalState = { currentUser: null, theme: 'light', locale: 'en' };","title":"State sharing"},{"location":"questions/architecture/microfrontends_small/#performance","text":"Bundle duplication - \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 Loading waterfalls - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Runtime overhead - Module Federation \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 overhead Caching strategy - \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"Performance \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"},{"location":"questions/architecture/microfrontends_small/#monitoring","text":"// Performance tracking const measureMFLoad = (name) => { performance.mark(`${name}-start`); return { end: () => { performance.mark(`${name}-end`); performance.measure(`${name}-load`, `${name}-start`, `${name}-end`); const measure = performance.getEntriesByName(`${name}-load`)[0]; console.log(`${name} loaded in ${measure.duration}ms`); } }; }; \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u044b \u0440\u0435\u0448\u0430\u044e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u0430 \u043d\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0438\u0445 \u0434\u043b\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432!","title":"Monitoring"},{"location":"questions/architecture/offline-first/","text":"Offline-first \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u044b \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0444\u0444\u043b\u0430\u0439\u043d \u0440\u0435\u0436\u0438\u043c\u0435, \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434, \u0433\u0434\u0435 offline-\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0430 \u043d\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First 1. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b \u0412 offline-first \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445. // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 IndexedDB class OfflineDatabase { constructor(dbName, version = 1) { this.dbName = dbName; this.version = version; this.db = null; } async init() { return new Promise((resolve, reject) => { const request = indexedDB.open(this.dbName, this.version); request.onerror = () => reject(request.error); request.onsuccess = () => { this.db = request.result; resolve(this.db); }; request.onupgradeneeded = (event) => { const db = event.target.result; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449 this.createStores(db); }; }); } createStores(db) { // \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 if (!db.objectStoreNames.contains('users')) { const userStore = db.createObjectStore('users', { keyPath: 'id' }); userStore.createIndex('email', 'email', { unique: true }); } // \u041f\u043e\u0441\u0442\u044b if (!db.objectStoreNames.contains('posts')) { const postStore = db.createObjectStore('posts', { keyPath: 'id' }); postStore.createIndex('authorId', 'authorId'); postStore.createIndex('timestamp', 'timestamp'); } // \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 if (!db.objectStoreNames.contains('syncQueue')) { const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true }); syncStore.createIndex('operation', 'operation'); syncStore.createIndex('timestamp', 'timestamp'); } // \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 if (!db.objectStoreNames.contains('metadata')) { db.createObjectStore('metadata', { keyPath: 'key' }); } } async get(storeName, id) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.get(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async getAll(storeName, indexName = null, range = null) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); const source = indexName ? store.index(indexName) : store; return new Promise((resolve, reject) => { const request = source.getAll(range); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async put(storeName, data) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.put(data); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async delete(storeName, id) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.delete(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } } // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 const offlineDB = new OfflineDatabase('AppDatabase'); await offlineDB.init(); 2. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 // \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u0441\u0442\u0430\u043c\u0438 (offline-first) class PostService { constructor(database, syncService) { this.db = database; this.syncService = syncService; } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 (\u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e) async createPost(postData) { const post = { id: this.generateOfflineId(), ...postData, timestamp: Date.now(), status: 'pending', // pending, synced, conflict version: 1, isLocalChange: true }; // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0411\u0414 await this.db.put('posts', post); // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.syncService.addToQueue({ type: 'CREATE_POST', data: post, timestamp: Date.now() }); return post; } // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 async updatePost(id, updates) { const existingPost = await this.db.get('posts', id); if (!existingPost) { throw new Error('Post not found'); } const updatedPost = { ...existingPost, ...updates, version: existingPost.version + 1, lastModified: Date.now(), isLocalChange: true, status: existingPost.status === 'synced' ? 'pending' : existingPost.status }; await this.db.put('posts', updatedPost); await this.syncService.addToQueue({ type: 'UPDATE_POST', data: updatedPost, timestamp: Date.now() }); return updatedPost; } // \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 async deletePost(id) { const post = await this.db.get('posts', id); if (!post) return; if (post.isLocalChange && post.status === 'pending') { // \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u0442 \u0435\u0449\u0435 \u043d\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d, \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e await this.db.delete('posts', id); await this.syncService.removeFromQueue('CREATE_POST', { id }); } else { // \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043a\u0430\u043a \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const deletedPost = { ...post, isDeleted: true, deletedAt: Date.now(), status: 'pending' }; await this.db.put('posts', deletedPost); await this.syncService.addToQueue({ type: 'DELETE_POST', data: { id }, timestamp: Date.now() }); } } // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u043e\u0432 (\u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0437 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0411\u0414) async getPosts(filters = {}) { let posts = await this.db.getAll('posts'); // \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u0442\u044b posts = posts.filter(post => !post.isDeleted); // \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u044b if (filters.authorId) { posts = posts.filter(post => post.authorId === filters.authorId); } // \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 posts.sort((a, b) => b.timestamp - a.timestamp); return posts; } generateOfflineId() { return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`; } } 3. \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 // \u0421\u0435\u0440\u0432\u0438\u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 class SyncService { constructor(database, apiClient) { this.db = database; this.api = apiClient; this.isOnline = navigator.onLine; this.isSyncing = false; this.conflictResolver = new ConflictResolver(); this.setupEventListeners(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.startSync(); }); window.addEventListener('offline', () => { this.isOnline = false; }); } async addToQueue(operation) { const queueItem = { ...operation, id: crypto.randomUUID(), attempts: 0, maxAttempts: 3 }; await this.db.put('syncQueue', queueItem); if (this.isOnline && !this.isSyncing) { this.startSync(); } } async removeFromQueue(type, criteria) { const queue = await this.db.getAll('syncQueue'); const itemsToRemove = queue.filter(item => item.type === type && Object.keys(criteria).every(key => item.data[key] === criteria[key]) ); for (const item of itemsToRemove) { await this.db.delete('syncQueue', item.id); } } async startSync() { if (!this.isOnline || this.isSyncing) return; this.isSyncing = true; try { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 await this.downloadChanges(); // \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f await this.uploadChanges(); // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.updateLastSyncTime(); console.log('Sync completed successfully'); } catch (error) { console.error('Sync failed:', error); } finally { this.isSyncing = false; } } async downloadChanges() { const lastSync = await this.getLastSyncTime(); try { const changes = await this.api.getChanges({ since: lastSync }); for (const change of changes) { await this.applyRemoteChange(change); } } catch (error) { console.error('Failed to download changes:', error); throw error; } } async applyRemoteChange(change) { const { type, data } = change; const localData = await this.db.get('posts', data.id); if (localData && localData.isLocalChange && localData.status === 'pending') { // \u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442: \u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435, \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f const resolution = await this.conflictResolver.resolve(localData, data); await this.db.put('posts', resolution); } else { // \u041d\u0435\u0442 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f const updatedData = { ...data, status: 'synced', isLocalChange: false }; await this.db.put('posts', updatedData); } } async uploadChanges() { const queue = await this.db.getAll('syncQueue'); for (const item of queue) { try { await this.processQueueItem(item); await this.db.delete('syncQueue', item.id); } catch (error) { item.attempts++; if (item.attempts >= item.maxAttempts) { console.error(`Failed to sync item after ${item.maxAttempts} attempts:`, item); await this.db.delete('syncQueue', item.id); } else { await this.db.put('syncQueue', item); } } } } async processQueueItem(item) { const { type, data } = item; switch (type) { case 'CREATE_POST': const serverPost = await this.api.createPost(data); await this.updateLocalWithServerData(data.id, serverPost); break; case 'UPDATE_POST': const updatedPost = await this.api.updatePost(data.id, data); await this.updateLocalWithServerData(data.id, updatedPost); break; case 'DELETE_POST': await this.api.deletePost(data.id); await this.db.delete('posts', data.id); break; default: throw new Error(`Unknown sync operation: ${type}`); } } async updateLocalWithServerData(localId, serverData) { const updatedData = { ...serverData, status: 'synced', isLocalChange: false }; // \u0415\u0441\u043b\u0438 ID \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438), \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c if (localId !== serverData.id) { await this.db.delete('posts', localId); } await this.db.put('posts', updatedData); } async getLastSyncTime() { const metadata = await this.db.get('metadata', 'lastSyncTime'); return metadata ? metadata.value : 0; } async updateLastSyncTime() { await this.db.put('metadata', { key: 'lastSyncTime', value: Date.now() }); } } 4. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 // \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 class ConflictResolver { async resolve(localData, remoteData) { // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 const strategy = this.selectStrategy(localData, remoteData); switch (strategy) { case 'last-write-wins': return this.lastWriteWins(localData, remoteData); case 'merge-fields': return this.mergeFields(localData, remoteData); case 'user-choice': return this.requestUserChoice(localData, remoteData); default: return this.lastWriteWins(localData, remoteData); } } selectStrategy(localData, remoteData) { // \u0414\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043e\u043b\u0435\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u043c \u0432\u044b\u0431\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const criticalFields = ['title', 'content']; const hasConflictInCriticalFields = criticalFields.some(field => localData[field] !== remoteData[field] ); if (hasConflictInCriticalFields) { return 'user-choice'; } // \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u0438\u044f\u043d\u0438\u0435 return 'merge-fields'; } lastWriteWins(localData, remoteData) { const localTime = localData.lastModified || localData.timestamp; const remoteTime = remoteData.lastModified || remoteData.timestamp; return localTime > remoteTime ? localData : remoteData; } mergeFields(localData, remoteData) { // \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439 return { ...remoteData, ...localData, // \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 tags: [...new Set([ ...(localData.tags || []), ...(remoteData.tags || []) ])], lastModified: Math.max( localData.lastModified || 0, remoteData.lastModified || 0 ) }; } async requestUserChoice(localData, remoteData) { // \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c UI \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 return new Promise((resolve) => { const conflictData = { local: localData, remote: remoteData, resolve }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430 UI \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430 window.dispatchEvent(new CustomEvent('conflict-resolution-needed', { detail: conflictData })); }); } } // React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 function ConflictResolutionModal({ local, remote, onResolve }) { const [selectedVersion, setSelectedVersion] = useState(null); const [customResolution, setCustomResolution] = useState(null); useEffect(() => { // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 setCustomResolution({ ...local }); }, [local]); const handleResolve = () => { let resolution; switch (selectedVersion) { case 'local': resolution = local; break; case 'remote': resolution = remote; break; case 'custom': resolution = customResolution; break; default: resolution = local; // fallback } onResolve(resolution); }; return ( <div className=\"conflict-modal\"> <h3>\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u0445</h3> <p>\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438:</p> <div className=\"versions-comparison\"> <div className=\"version\"> <h4>\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f</h4> <label> <input type=\"radio\" name=\"version\" value=\"local\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0432\u0435\u0440\u0441\u0438\u044e </label> <pre>{JSON.stringify(local, null, 2)}</pre> </div> <div className=\"version\"> <h4>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f</h4> <label> <input type=\"radio\" name=\"version\" value=\"remote\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0432\u0435\u0440\u0441\u0438\u044e </label> <pre>{JSON.stringify(remote, null, 2)}</pre> </div> <div className=\"version\"> <h4>\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e</h4> <label> <input type=\"radio\" name=\"version\" value=\"custom\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e </label> {selectedVersion === 'custom' && ( <textarea value={JSON.stringify(customResolution, null, 2)} onChange={(e) => { try { setCustomResolution(JSON.parse(e.target.value)); } catch (error) { // \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u0432\u043e\u0434\u0430 } }} /> )} </div> </div> <div className=\"modal-actions\"> <button onClick={handleResolve} disabled={!selectedVersion}> \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c </button> </div> </div> ); } React Integration \u0434\u043b\u044f Offline-First Custom Hooks \u0434\u043b\u044f offline-first // Hook \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 offline-first \u0434\u0430\u043d\u043d\u044b\u043c\u0438 const useOfflineData = (storeName, dependencies = []) => { const [data, setData] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); const dbRef = useRef(null); const syncServiceRef = useRef(null); useEffect(() => { const initDatabase = async () => { try { dbRef.current = new OfflineDatabase('AppDatabase'); await dbRef.current.init(); syncServiceRef.current = new SyncService( dbRef.current, new APIClient() ); await loadData(); } catch (err) { setError(err.message); } finally { setLoading(false); } }; initDatabase(); }, []); useEffect(() => { const handleOnlineStatus = () => { setIsOnline(navigator.onLine); }; window.addEventListener('online', handleOnlineStatus); window.addEventListener('offline', handleOnlineStatus); return () => { window.removeEventListener('online', handleOnlineStatus); window.removeEventListener('offline', handleOnlineStatus); }; }, []); const loadData = async () => { if (!dbRef.current) return; try { const items = await dbRef.current.getAll(storeName); setData(items); } catch (err) { setError(err.message); } }; const create = useCallback(async (itemData) => { if (!dbRef.current || !syncServiceRef.current) return; const item = { id: `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, ...itemData, timestamp: Date.now(), status: 'pending', isLocalChange: true }; await dbRef.current.put(storeName, item); await syncServiceRef.current.addToQueue({ type: `CREATE_${storeName.toUpperCase()}`, data: item }); await loadData(); return item; }, [storeName]); const update = useCallback(async (id, updates) => { if (!dbRef.current || !syncServiceRef.current) return; const existing = await dbRef.current.get(storeName, id); if (!existing) throw new Error('Item not found'); const updated = { ...existing, ...updates, lastModified: Date.now(), status: existing.status === 'synced' ? 'pending' : existing.status, isLocalChange: true }; await dbRef.current.put(storeName, updated); await syncServiceRef.current.addToQueue({ type: `UPDATE_${storeName.toUpperCase()}`, data: updated }); await loadData(); return updated; }, [storeName]); const remove = useCallback(async (id) => { if (!dbRef.current || !syncServiceRef.current) return; const item = await dbRef.current.get(storeName, id); if (!item) return; if (item.isLocalChange && item.status === 'pending') { await dbRef.current.delete(storeName, id); } else { const deleted = { ...item, isDeleted: true, deletedAt: Date.now(), status: 'pending' }; await dbRef.current.put(storeName, deleted); } await syncServiceRef.current.addToQueue({ type: `DELETE_${storeName.toUpperCase()}`, data: { id } }); await loadData(); }, [storeName]); const sync = useCallback(async () => { if (syncServiceRef.current && isOnline) { await syncServiceRef.current.startSync(); await loadData(); } }, [isOnline]); return { data: data.filter(item => !item.isDeleted), loading, error, isOnline, create, update, remove, sync, refresh: loadData }; }; // Hook \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const useSyncStatus = () => { const [status, setStatus] = useState({ isSyncing: false, pendingItems: 0, lastSync: null, conflicts: [] }); useEffect(() => { const updateStatus = async () => { if (window.syncService) { const newStatus = await window.syncService.getStatus(); setStatus(newStatus); } }; const interval = setInterval(updateStatus, 5000); updateStatus(); return () => clearInterval(interval); }, []); return status; }; // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 function SyncStatusIndicator() { const syncStatus = useSyncStatus(); const isOnline = navigator.onLine; const getStatusText = () => { if (!isOnline) return '\u041e\u0444\u0444\u043b\u0430\u0439\u043d \u0440\u0435\u0436\u0438\u043c'; if (syncStatus.isSyncing) return '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f...'; if (syncStatus.pendingItems > 0) return `\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438: ${syncStatus.pendingItems}`; return '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043e'; }; const getStatusColor = () => { if (!isOnline) return 'orange'; if (syncStatus.isSyncing) return 'blue'; if (syncStatus.pendingItems > 0) return 'yellow'; return 'green'; }; return ( <div className={`sync-status ${getStatusColor()}`}> <div className=\"status-indicator\" /> <span>{getStatusText()}</span> {syncStatus.lastSync && ( <small> \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f: {new Date(syncStatus.lastSync).toLocaleTimeString()} </small> )} </div> ); } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0431\u0430\u0442\u0430\u0440\u0435\u0435\u0439 class OfflineOptimizer { constructor() { this.batteryOptimized = false; this.connectionQuality = 'good'; this.setupBatteryMonitoring(); this.setupConnectionMonitoring(); } async setupBatteryMonitoring() { if ('getBattery' in navigator) { const battery = await navigator.getBattery(); const updateBatteryOptimization = () => { this.batteryOptimized = battery.level < 0.2 || !battery.charging; }; battery.addEventListener('levelchange', updateBatteryOptimization); battery.addEventListener('chargingchange', updateBatteryOptimization); updateBatteryOptimization(); } } setupConnectionMonitoring() { if ('connection' in navigator) { const connection = navigator.connection; const updateConnectionQuality = () => { const effectiveType = connection.effectiveType; if (effectiveType === 'slow-2g' || effectiveType === '2g') { this.connectionQuality = 'poor'; } else if (effectiveType === '3g') { this.connectionQuality = 'moderate'; } else { this.connectionQuality = 'good'; } }; connection.addEventListener('change', updateConnectionQuality); updateConnectionQuality(); } } shouldOptimizeSync() { return this.batteryOptimized || this.connectionQuality === 'poor'; } getSyncInterval() { if (this.shouldOptimizeSync()) { return 300000; // 5 \u043c\u0438\u043d\u0443\u0442 \u043f\u0440\u0438 \u043d\u0438\u0437\u043a\u043e\u043c \u0437\u0430\u0440\u044f\u0434\u0435/\u043f\u043b\u043e\u0445\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 } switch (this.connectionQuality) { case 'poor': return 120000; // 2 \u043c\u0438\u043d\u0443\u0442\u044b case 'moderate': return 60000; // 1 \u043c\u0438\u043d\u0443\u0442\u0430 default: return 30000; // 30 \u0441\u0435\u043a\u0443\u043d\u0434 } } getMaxConcurrentSyncs() { if (this.batteryOptimized) return 1; switch (this.connectionQuality) { case 'poor': return 1; case 'moderate': return 2; default: return 5; } } } Progressive Web App \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u041c\u0430\u043d\u0438\u0444\u0435\u0441\u0442 \u0438 Service Worker ```javascript // service-worker.js \u0434\u043b\u044f offline-first PWA const CACHE_NAME = 'offline-first-v1'; const APP_SHELL = [ '/', '/static/js/bundle.js', '/static/css/main.css', '/offline.html' ]; // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Service Worker self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(APP_SHELL)) .then(() => self.skipWaiting()) ); }); // \u0410\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u044f Service Worker self.addEventListener('activate', (event) => { event.waitUntil( caches.keys() .then(cacheNames => { return Promise.all( cacheNames.map(cacheName => { if (cacheName !== CACHE_NAME) { return caches.delete(cacheName); } }) ); }) .then(() => self.clients.claim()) ); }); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (offline-first \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f) self.addEventListener('fetch', (event) => { const { request } = event; // \u0414\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c cache-first \u0441 network fallback if (request.url.includes('/api/')) { event.respondWith( caches.match(request) .then(cachedResponse => { if (cachedResponse) { // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 return cachedResponse; } // \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0441\u0435\u0442\u0438 return fetch(request) .then(response => { // \u041a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 if (response.status === 200) { const responseClone = response.clone(); caches.open(CACHE_NAME) .then(cache => cache.put(request, responseClone)); } return response; }) .catch(() => { // \u0415\u0441\u043b\u0438 \u0441\u0435\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0443 return new Response(JSON.stringify({ error: 'Network unavailable', offline: true }), { headers: { 'Content-","title":"Offline-first \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"questions/architecture/offline-first/#offline-first","text":"","title":"Offline-first \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"questions/architecture/offline-first/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u044b \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0444\u0444\u043b\u0430\u0439\u043d \u0440\u0435\u0436\u0438\u043c\u0435, \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434, \u0433\u0434\u0435 offline-\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439, \u0430 \u043d\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/offline-first/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/offline-first/#offline-first_1","text":"","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First"},{"location":"questions/architecture/offline-first/#1","text":"\u0412 offline-first \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445. // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 IndexedDB class OfflineDatabase { constructor(dbName, version = 1) { this.dbName = dbName; this.version = version; this.db = null; } async init() { return new Promise((resolve, reject) => { const request = indexedDB.open(this.dbName, this.version); request.onerror = () => reject(request.error); request.onsuccess = () => { this.db = request.result; resolve(this.db); }; request.onupgradeneeded = (event) => { const db = event.target.result; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449 this.createStores(db); }; }); } createStores(db) { // \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 if (!db.objectStoreNames.contains('users')) { const userStore = db.createObjectStore('users', { keyPath: 'id' }); userStore.createIndex('email', 'email', { unique: true }); } // \u041f\u043e\u0441\u0442\u044b if (!db.objectStoreNames.contains('posts')) { const postStore = db.createObjectStore('posts', { keyPath: 'id' }); postStore.createIndex('authorId', 'authorId'); postStore.createIndex('timestamp', 'timestamp'); } // \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 if (!db.objectStoreNames.contains('syncQueue')) { const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true }); syncStore.createIndex('operation', 'operation'); syncStore.createIndex('timestamp', 'timestamp'); } // \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 if (!db.objectStoreNames.contains('metadata')) { db.createObjectStore('metadata', { keyPath: 'key' }); } } async get(storeName, id) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.get(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async getAll(storeName, indexName = null, range = null) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); const source = indexName ? store.index(indexName) : store; return new Promise((resolve, reject) => { const request = source.getAll(range); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async put(storeName, data) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.put(data); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async delete(storeName, id) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.delete(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } } // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 const offlineDB = new OfflineDatabase('AppDatabase'); await offlineDB.init();","title":"1. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b"},{"location":"questions/architecture/offline-first/#2","text":"// \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u0441\u0442\u0430\u043c\u0438 (offline-first) class PostService { constructor(database, syncService) { this.db = database; this.syncService = syncService; } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 (\u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e) async createPost(postData) { const post = { id: this.generateOfflineId(), ...postData, timestamp: Date.now(), status: 'pending', // pending, synced, conflict version: 1, isLocalChange: true }; // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0411\u0414 await this.db.put('posts', post); // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.syncService.addToQueue({ type: 'CREATE_POST', data: post, timestamp: Date.now() }); return post; } // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 async updatePost(id, updates) { const existingPost = await this.db.get('posts', id); if (!existingPost) { throw new Error('Post not found'); } const updatedPost = { ...existingPost, ...updates, version: existingPost.version + 1, lastModified: Date.now(), isLocalChange: true, status: existingPost.status === 'synced' ? 'pending' : existingPost.status }; await this.db.put('posts', updatedPost); await this.syncService.addToQueue({ type: 'UPDATE_POST', data: updatedPost, timestamp: Date.now() }); return updatedPost; } // \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0430 async deletePost(id) { const post = await this.db.get('posts', id); if (!post) return; if (post.isLocalChange && post.status === 'pending') { // \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u0442 \u0435\u0449\u0435 \u043d\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d, \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e await this.db.delete('posts', id); await this.syncService.removeFromQueue('CREATE_POST', { id }); } else { // \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043a\u0430\u043a \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const deletedPost = { ...post, isDeleted: true, deletedAt: Date.now(), status: 'pending' }; await this.db.put('posts', deletedPost); await this.syncService.addToQueue({ type: 'DELETE_POST', data: { id }, timestamp: Date.now() }); } } // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u043e\u0432 (\u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0437 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0411\u0414) async getPosts(filters = {}) { let posts = await this.db.getAll('posts'); // \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u0442\u044b posts = posts.filter(post => !post.isDeleted); // \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u044b if (filters.authorId) { posts = posts.filter(post => post.authorId === filters.authorId); } // \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 posts.sort((a, b) => b.timestamp - a.timestamp); return posts; } generateOfflineId() { return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`; } }","title":"2. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439"},{"location":"questions/architecture/offline-first/#3","text":"// \u0421\u0435\u0440\u0432\u0438\u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 class SyncService { constructor(database, apiClient) { this.db = database; this.api = apiClient; this.isOnline = navigator.onLine; this.isSyncing = false; this.conflictResolver = new ConflictResolver(); this.setupEventListeners(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.startSync(); }); window.addEventListener('offline', () => { this.isOnline = false; }); } async addToQueue(operation) { const queueItem = { ...operation, id: crypto.randomUUID(), attempts: 0, maxAttempts: 3 }; await this.db.put('syncQueue', queueItem); if (this.isOnline && !this.isSyncing) { this.startSync(); } } async removeFromQueue(type, criteria) { const queue = await this.db.getAll('syncQueue'); const itemsToRemove = queue.filter(item => item.type === type && Object.keys(criteria).every(key => item.data[key] === criteria[key]) ); for (const item of itemsToRemove) { await this.db.delete('syncQueue', item.id); } } async startSync() { if (!this.isOnline || this.isSyncing) return; this.isSyncing = true; try { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 await this.downloadChanges(); // \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f await this.uploadChanges(); // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.updateLastSyncTime(); console.log('Sync completed successfully'); } catch (error) { console.error('Sync failed:', error); } finally { this.isSyncing = false; } } async downloadChanges() { const lastSync = await this.getLastSyncTime(); try { const changes = await this.api.getChanges({ since: lastSync }); for (const change of changes) { await this.applyRemoteChange(change); } } catch (error) { console.error('Failed to download changes:', error); throw error; } } async applyRemoteChange(change) { const { type, data } = change; const localData = await this.db.get('posts', data.id); if (localData && localData.isLocalChange && localData.status === 'pending') { // \u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442: \u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435, \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f const resolution = await this.conflictResolver.resolve(localData, data); await this.db.put('posts', resolution); } else { // \u041d\u0435\u0442 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f const updatedData = { ...data, status: 'synced', isLocalChange: false }; await this.db.put('posts', updatedData); } } async uploadChanges() { const queue = await this.db.getAll('syncQueue'); for (const item of queue) { try { await this.processQueueItem(item); await this.db.delete('syncQueue', item.id); } catch (error) { item.attempts++; if (item.attempts >= item.maxAttempts) { console.error(`Failed to sync item after ${item.maxAttempts} attempts:`, item); await this.db.delete('syncQueue', item.id); } else { await this.db.put('syncQueue', item); } } } } async processQueueItem(item) { const { type, data } = item; switch (type) { case 'CREATE_POST': const serverPost = await this.api.createPost(data); await this.updateLocalWithServerData(data.id, serverPost); break; case 'UPDATE_POST': const updatedPost = await this.api.updatePost(data.id, data); await this.updateLocalWithServerData(data.id, updatedPost); break; case 'DELETE_POST': await this.api.deletePost(data.id); await this.db.delete('posts', data.id); break; default: throw new Error(`Unknown sync operation: ${type}`); } } async updateLocalWithServerData(localId, serverData) { const updatedData = { ...serverData, status: 'synced', isLocalChange: false }; // \u0415\u0441\u043b\u0438 ID \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438), \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c if (localId !== serverData.id) { await this.db.delete('posts', localId); } await this.db.put('posts', updatedData); } async getLastSyncTime() { const metadata = await this.db.get('metadata', 'lastSyncTime'); return metadata ? metadata.value : 0; } async updateLastSyncTime() { await this.db.put('metadata', { key: 'lastSyncTime', value: Date.now() }); } }","title":"3. \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/architecture/offline-first/#4","text":"// \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 class ConflictResolver { async resolve(localData, remoteData) { // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 const strategy = this.selectStrategy(localData, remoteData); switch (strategy) { case 'last-write-wins': return this.lastWriteWins(localData, remoteData); case 'merge-fields': return this.mergeFields(localData, remoteData); case 'user-choice': return this.requestUserChoice(localData, remoteData); default: return this.lastWriteWins(localData, remoteData); } } selectStrategy(localData, remoteData) { // \u0414\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043e\u043b\u0435\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u043c \u0432\u044b\u0431\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const criticalFields = ['title', 'content']; const hasConflictInCriticalFields = criticalFields.some(field => localData[field] !== remoteData[field] ); if (hasConflictInCriticalFields) { return 'user-choice'; } // \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u0438\u044f\u043d\u0438\u0435 return 'merge-fields'; } lastWriteWins(localData, remoteData) { const localTime = localData.lastModified || localData.timestamp; const remoteTime = remoteData.lastModified || remoteData.timestamp; return localTime > remoteTime ? localData : remoteData; } mergeFields(localData, remoteData) { // \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439 return { ...remoteData, ...localData, // \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 tags: [...new Set([ ...(localData.tags || []), ...(remoteData.tags || []) ])], lastModified: Math.max( localData.lastModified || 0, remoteData.lastModified || 0 ) }; } async requestUserChoice(localData, remoteData) { // \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c UI \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 return new Promise((resolve) => { const conflictData = { local: localData, remote: remoteData, resolve }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430 UI \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430 window.dispatchEvent(new CustomEvent('conflict-resolution-needed', { detail: conflictData })); }); } } // React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 function ConflictResolutionModal({ local, remote, onResolve }) { const [selectedVersion, setSelectedVersion] = useState(null); const [customResolution, setCustomResolution] = useState(null); useEffect(() => { // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 setCustomResolution({ ...local }); }, [local]); const handleResolve = () => { let resolution; switch (selectedVersion) { case 'local': resolution = local; break; case 'remote': resolution = remote; break; case 'custom': resolution = customResolution; break; default: resolution = local; // fallback } onResolve(resolution); }; return ( <div className=\"conflict-modal\"> <h3>\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u0445</h3> <p>\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438:</p> <div className=\"versions-comparison\"> <div className=\"version\"> <h4>\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f</h4> <label> <input type=\"radio\" name=\"version\" value=\"local\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0432\u0435\u0440\u0441\u0438\u044e </label> <pre>{JSON.stringify(local, null, 2)}</pre> </div> <div className=\"version\"> <h4>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f</h4> <label> <input type=\"radio\" name=\"version\" value=\"remote\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0432\u0435\u0440\u0441\u0438\u044e </label> <pre>{JSON.stringify(remote, null, 2)}</pre> </div> <div className=\"version\"> <h4>\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e</h4> <label> <input type=\"radio\" name=\"version\" value=\"custom\" onChange={(e) => setSelectedVersion(e.target.value)} /> \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e </label> {selectedVersion === 'custom' && ( <textarea value={JSON.stringify(customResolution, null, 2)} onChange={(e) => { try { setCustomResolution(JSON.parse(e.target.value)); } catch (error) { // \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u0432\u043e\u0434\u0430 } }} /> )} </div> </div> <div className=\"modal-actions\"> <button onClick={handleResolve} disabled={!selectedVersion}> \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c </button> </div> </div> ); }","title":"4. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432"},{"location":"questions/architecture/offline-first/#react-integration-offline-first","text":"","title":"React Integration \u0434\u043b\u044f Offline-First"},{"location":"questions/architecture/offline-first/#custom-hooks-offline-first","text":"// Hook \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 offline-first \u0434\u0430\u043d\u043d\u044b\u043c\u0438 const useOfflineData = (storeName, dependencies = []) => { const [data, setData] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); const dbRef = useRef(null); const syncServiceRef = useRef(null); useEffect(() => { const initDatabase = async () => { try { dbRef.current = new OfflineDatabase('AppDatabase'); await dbRef.current.init(); syncServiceRef.current = new SyncService( dbRef.current, new APIClient() ); await loadData(); } catch (err) { setError(err.message); } finally { setLoading(false); } }; initDatabase(); }, []); useEffect(() => { const handleOnlineStatus = () => { setIsOnline(navigator.onLine); }; window.addEventListener('online', handleOnlineStatus); window.addEventListener('offline', handleOnlineStatus); return () => { window.removeEventListener('online', handleOnlineStatus); window.removeEventListener('offline', handleOnlineStatus); }; }, []); const loadData = async () => { if (!dbRef.current) return; try { const items = await dbRef.current.getAll(storeName); setData(items); } catch (err) { setError(err.message); } }; const create = useCallback(async (itemData) => { if (!dbRef.current || !syncServiceRef.current) return; const item = { id: `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, ...itemData, timestamp: Date.now(), status: 'pending', isLocalChange: true }; await dbRef.current.put(storeName, item); await syncServiceRef.current.addToQueue({ type: `CREATE_${storeName.toUpperCase()}`, data: item }); await loadData(); return item; }, [storeName]); const update = useCallback(async (id, updates) => { if (!dbRef.current || !syncServiceRef.current) return; const existing = await dbRef.current.get(storeName, id); if (!existing) throw new Error('Item not found'); const updated = { ...existing, ...updates, lastModified: Date.now(), status: existing.status === 'synced' ? 'pending' : existing.status, isLocalChange: true }; await dbRef.current.put(storeName, updated); await syncServiceRef.current.addToQueue({ type: `UPDATE_${storeName.toUpperCase()}`, data: updated }); await loadData(); return updated; }, [storeName]); const remove = useCallback(async (id) => { if (!dbRef.current || !syncServiceRef.current) return; const item = await dbRef.current.get(storeName, id); if (!item) return; if (item.isLocalChange && item.status === 'pending') { await dbRef.current.delete(storeName, id); } else { const deleted = { ...item, isDeleted: true, deletedAt: Date.now(), status: 'pending' }; await dbRef.current.put(storeName, deleted); } await syncServiceRef.current.addToQueue({ type: `DELETE_${storeName.toUpperCase()}`, data: { id } }); await loadData(); }, [storeName]); const sync = useCallback(async () => { if (syncServiceRef.current && isOnline) { await syncServiceRef.current.startSync(); await loadData(); } }, [isOnline]); return { data: data.filter(item => !item.isDeleted), loading, error, isOnline, create, update, remove, sync, refresh: loadData }; }; // Hook \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const useSyncStatus = () => { const [status, setStatus] = useState({ isSyncing: false, pendingItems: 0, lastSync: null, conflicts: [] }); useEffect(() => { const updateStatus = async () => { if (window.syncService) { const newStatus = await window.syncService.getStatus(); setStatus(newStatus); } }; const interval = setInterval(updateStatus, 5000); updateStatus(); return () => clearInterval(interval); }, []); return status; }; // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 function SyncStatusIndicator() { const syncStatus = useSyncStatus(); const isOnline = navigator.onLine; const getStatusText = () => { if (!isOnline) return '\u041e\u0444\u0444\u043b\u0430\u0439\u043d \u0440\u0435\u0436\u0438\u043c'; if (syncStatus.isSyncing) return '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f...'; if (syncStatus.pendingItems > 0) return `\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438: ${syncStatus.pendingItems}`; return '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043e'; }; const getStatusColor = () => { if (!isOnline) return 'orange'; if (syncStatus.isSyncing) return 'blue'; if (syncStatus.pendingItems > 0) return 'yellow'; return 'green'; }; return ( <div className={`sync-status ${getStatusColor()}`}> <div className=\"status-indicator\" /> <span>{getStatusText()}</span> {syncStatus.lastSync && ( <small> \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f: {new Date(syncStatus.lastSync).toLocaleTimeString()} </small> )} </div> ); }","title":"Custom Hooks \u0434\u043b\u044f offline-first"},{"location":"questions/architecture/offline-first/#_3","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432"},{"location":"questions/architecture/offline-first/#_4","text":"class OfflineOptimizer { constructor() { this.batteryOptimized = false; this.connectionQuality = 'good'; this.setupBatteryMonitoring(); this.setupConnectionMonitoring(); } async setupBatteryMonitoring() { if ('getBattery' in navigator) { const battery = await navigator.getBattery(); const updateBatteryOptimization = () => { this.batteryOptimized = battery.level < 0.2 || !battery.charging; }; battery.addEventListener('levelchange', updateBatteryOptimization); battery.addEventListener('chargingchange', updateBatteryOptimization); updateBatteryOptimization(); } } setupConnectionMonitoring() { if ('connection' in navigator) { const connection = navigator.connection; const updateConnectionQuality = () => { const effectiveType = connection.effectiveType; if (effectiveType === 'slow-2g' || effectiveType === '2g') { this.connectionQuality = 'poor'; } else if (effectiveType === '3g') { this.connectionQuality = 'moderate'; } else { this.connectionQuality = 'good'; } }; connection.addEventListener('change', updateConnectionQuality); updateConnectionQuality(); } } shouldOptimizeSync() { return this.batteryOptimized || this.connectionQuality === 'poor'; } getSyncInterval() { if (this.shouldOptimizeSync()) { return 300000; // 5 \u043c\u0438\u043d\u0443\u0442 \u043f\u0440\u0438 \u043d\u0438\u0437\u043a\u043e\u043c \u0437\u0430\u0440\u044f\u0434\u0435/\u043f\u043b\u043e\u0445\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 } switch (this.connectionQuality) { case 'poor': return 120000; // 2 \u043c\u0438\u043d\u0443\u0442\u044b case 'moderate': return 60000; // 1 \u043c\u0438\u043d\u0443\u0442\u0430 default: return 30000; // 30 \u0441\u0435\u043a\u0443\u043d\u0434 } } getMaxConcurrentSyncs() { if (this.batteryOptimized) return 1; switch (this.connectionQuality) { case 'poor': return 1; case 'moderate': return 2; default: return 5; } } }","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0431\u0430\u0442\u0430\u0440\u0435\u0435\u0439"},{"location":"questions/architecture/offline-first/#progressive-web-app","text":"","title":"Progressive Web App \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/architecture/offline-first/#service-worker","text":"```javascript // service-worker.js \u0434\u043b\u044f offline-first PWA const CACHE_NAME = 'offline-first-v1'; const APP_SHELL = [ '/', '/static/js/bundle.js', '/static/css/main.css', '/offline.html' ]; // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Service Worker self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(APP_SHELL)) .then(() => self.skipWaiting()) ); }); // \u0410\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u044f Service Worker self.addEventListener('activate', (event) => { event.waitUntil( caches.keys() .then(cacheNames => { return Promise.all( cacheNames.map(cacheName => { if (cacheName !== CACHE_NAME) { return caches.delete(cacheName); } }) ); }) .then(() => self.clients.claim()) ); }); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (offline-first \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f) self.addEventListener('fetch', (event) => { const { request } = event; // \u0414\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c cache-first \u0441 network fallback if (request.url.includes('/api/')) { event.respondWith( caches.match(request) .then(cachedResponse => { if (cachedResponse) { // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 return cachedResponse; } // \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0441\u0435\u0442\u0438 return fetch(request) .then(response => { // \u041a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 if (response.status === 200) { const responseClone = response.clone(); caches.open(CACHE_NAME) .then(cache => cache.put(request, responseClone)); } return response; }) .catch(() => { // \u0415\u0441\u043b\u0438 \u0441\u0435\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0443 return new Response(JSON.stringify({ error: 'Network unavailable', offline: true }), { headers: { 'Content-","title":"\u041c\u0430\u043d\u0438\u0444\u0435\u0441\u0442 \u0438 Service Worker"},{"location":"questions/architecture/offline-first_small/","text":"Offline-First \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small) \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b : - IndexedDB \u0434\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - localStorage \u0434\u043b\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 IndexedDB \u0434\u043b\u044f Offline Storage class OfflineDatabase { constructor(dbName, version = 1) { this.dbName = dbName; this.version = version; this.db = null; } async init() { return new Promise((resolve, reject) => { const request = indexedDB.open(this.dbName, this.version); request.onsuccess = () => { this.db = request.result; resolve(this.db); }; request.onupgradeneeded = (event) => { const db = event.target.result; this.createStores(db); }; }); } createStores(db) { // \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 const dataStore = db.createObjectStore('posts', { keyPath: 'id' }); dataStore.createIndex('timestamp', 'timestamp'); // \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true }); syncStore.createIndex('operation', 'operation'); } async get(storeName, id) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.get(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async put(storeName, data) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.put(data); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } } Offline-First Data Service class OfflineDataService { constructor(database, syncService) { this.db = database; this.syncService = syncService; } // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 async create(data) { const item = { id: this.generateOfflineId(), ...data, timestamp: Date.now(), status: 'pending', version: 1 }; await this.db.put('posts', item); await this.syncService.addToQueue('CREATE', item); return item; } async update(id, updates) { const existing = await this.db.get('posts', id); const updated = { ...existing, ...updates, version: existing.version + 1, lastModified: Date.now(), status: 'pending' }; await this.db.put('posts', updated); await this.syncService.addToQueue('UPDATE', updated); return updated; } async delete(id) { const item = await this.db.get('posts', id); if (item.status === 'pending') { // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 await this.db.delete('posts', id); await this.syncService.removeFromQueue('CREATE', { id }); } else { // \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.db.put('posts', { ...item, isDeleted: true, deletedAt: Date.now() }); await this.syncService.addToQueue('DELETE', { id }); } } generateOfflineId() { return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`; } } \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 class SyncService { constructor(database, apiClient) { this.db = database; this.api = apiClient; this.isOnline = navigator.onLine; this.isSyncing = false; window.addEventListener('online', () => { this.isOnline = true; this.startSync(); }); } async addToQueue(operation, data) { const queueItem = { operation, data, timestamp: Date.now(), attempts: 0 }; await this.db.put('syncQueue', queueItem); if (this.isOnline) this.startSync(); } async startSync() { if (!this.isOnline || this.isSyncing) return; this.isSyncing = true; try { await this.downloadChanges(); await this.uploadChanges(); } finally { this.isSyncing = false; } } async downloadChanges() { const lastSync = await this.getLastSyncTime(); const changes = await this.api.getChanges({ since: lastSync }); for (const change of changes) { await this.applyRemoteChange(change); } } async uploadChanges() { const queue = await this.db.getAll('syncQueue'); for (const item of queue) { try { await this.processQueueItem(item); await this.db.delete('syncQueue', item.id); } catch (error) { if (++item.attempts >= 3) { await this.db.delete('syncQueue', item.id); } } } } async processQueueItem(item) { switch (item.operation) { case 'CREATE': const serverItem = await this.api.create(item.data); await this.updateLocalWithServerData(item.data.id, serverItem); break; case 'UPDATE': const updated = await this.api.update(item.data.id, item.data); await this.updateLocalWithServerData(item.data.id, updated); break; case 'DELETE': await this.api.delete(item.data.id); await this.db.delete('posts', item.data.id); break; } } } \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 class ConflictResolver { resolve(localData, remoteData) { const strategy = this.selectStrategy(localData, remoteData); switch (strategy) { case 'last-write-wins': return this.lastWriteWins(localData, remoteData); case 'merge-fields': return this.mergeFields(localData, remoteData); case 'user-choice': return this.requestUserChoice(localData, remoteData); } } selectStrategy(localData, remoteData) { const criticalFields = ['title', 'content']; const hasConflict = criticalFields.some(field => localData[field] !== remoteData[field] ); return hasConflict ? 'user-choice' : 'merge-fields'; } lastWriteWins(localData, remoteData) { const localTime = localData.lastModified || localData.timestamp; const remoteTime = remoteData.lastModified || remoteData.timestamp; return localTime > remoteTime ? localData : remoteData; } mergeFields(localData, remoteData) { return { ...remoteData, ...localData, tags: [...new Set([...(localData.tags || []), ...(remoteData.tags || [])])], lastModified: Math.max( localData.lastModified || 0, remoteData.lastModified || 0 ) }; } async requestUserChoice(localData, remoteData) { return new Promise((resolve) => { window.dispatchEvent(new CustomEvent('conflict-resolution', { detail: { local: localData, remote: remoteData, resolve } })); }); } } React Hooks \u0434\u043b\u044f Offline-First const useOfflineData = (storeName) => { const [data, setData] = useState([]); const [loading, setLoading] = useState(true); const [isOnline, setIsOnline] = useState(navigator.onLine); const dbRef = useRef(null); const serviceRef = useRef(null); useEffect(() => { const initOffline = async () => { dbRef.current = new OfflineDatabase('AppDB'); await dbRef.current.init(); serviceRef.current = new OfflineDataService( dbRef.current, new SyncService(dbRef.current, new APIClient()) ); await loadData(); setLoading(false); }; initOffline(); }, []); const loadData = async () => { const items = await dbRef.current.getAll(storeName); setData(items.filter(item => !item.isDeleted)); }; const create = useCallback(async (itemData) => { const item = await serviceRef.current.create(itemData); await loadData(); return item; }, []); const update = useCallback(async (id, updates) => { const item = await serviceRef.current.update(id, updates); await loadData(); return item; }, []); const remove = useCallback(async (id) => { await serviceRef.current.delete(id); await loadData(); }, []); return { data, loading, isOnline, create, update, remove }; }; // Sync status hook const useSyncStatus = () => { const [status, setStatus] = useState({ isSyncing: false, pendingCount: 0, lastSync: null }); useEffect(() => { const updateStatus = async () => { // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442 sync service if (window.syncService) { const newStatus = await window.syncService.getStatus(); setStatus(newStatus); } }; const interval = setInterval(updateStatus, 5000); return () => clearInterval(interval); }, []); return status; }; Service Worker \u0434\u043b\u044f Offline-First // sw.js - Offline-first caching strategy const CACHE_NAME = 'offline-first-v1'; const APP_SHELL = ['/', '/static/js/bundle.js', '/static/css/main.css']; // Offline-first \u0434\u043b\u044f API self.addEventListener('fetch', (event) => { const { request } = event; if (request.url.includes('/api/')) { event.respondWith( // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u0435\u0448, \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0442\u044c caches.match(request) .then(cachedResponse => { if (cachedResponse) return cachedResponse; return fetch(request) .then(response => { if (response.status === 200) { const responseClone = response.clone(); caches.open(CACHE_NAME) .then(cache => cache.put(request, responseClone)); } return response; }) .catch(() => { return new Response(JSON.stringify({ error: 'Network unavailable', offline: true }), { headers: { 'Content-Type': 'application/json' } }); }); }) ); } }); // Background sync self.addEventListener('sync', (event) => { if (event.tag === 'background-sync') { event.waitUntil(handleBackgroundSync()); } }); async function handleBackgroundSync() { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 const db = await openDatabase(); const queue = await getAllFromStore(db, 'syncQueue'); for (const item of queue) { try { await syncItem(item); await deleteFromStore(db, 'syncQueue', item.id); } catch (error) { console.error('Background sync failed:', error); } } } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 class OfflineOptimizer { constructor() { this.batteryOptimized = false; this.connectionQuality = 'good'; this.setupMonitoring(); } async setupMonitoring() { // Battery API if ('getBattery' in navigator) { const battery = await navigator.getBattery(); this.batteryOptimized = battery.level < 0.2; } // Network Information API if ('connection' in navigator) { const connection = navigator.connection; this.connectionQuality = this.getConnectionQuality(connection.effectiveType); } } getConnectionQuality(effectiveType) { const qualityMap = { 'slow-2g': 'poor', '2g': 'poor', '3g': 'moderate', '4g': 'good' }; return qualityMap[effectiveType] || 'good'; } getSyncInterval() { if (this.batteryOptimized) return 300000; // 5 min switch (this.connectionQuality) { case 'poor': return 120000; // 2 min case 'moderate': return 60000; // 1 min default: return 30000; // 30 sec } } shouldOptimizeSync() { return this.batteryOptimized || this.connectionQuality === 'poor'; } } Sync Status Component function SyncStatusIndicator() { const { isSyncing, pendingCount, lastSync } = useSyncStatus(); const isOnline = navigator.onLine; const getStatusText = () => { if (!isOnline) return 'Offline'; if (isSyncing) return 'Syncing...'; if (pendingCount > 0) return `Pending: ${pendingCount}`; return 'Synced'; }; const getStatusColor = () => { if (!isOnline) return 'orange'; if (isSyncing) return 'blue'; if (pendingCount > 0) return 'yellow'; return 'green'; }; return ( <div className={`sync-status ${getStatusColor()}`}> <div className=\"indicator\" /> <span>{getStatusText()}</span> {lastSync && <small>Last: {new Date(lastSync).toLocaleTimeString()}</small>} </div> ); } \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First Local-First Philosophy : - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043a \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b - \u041c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 Sync Strategies : const syncStrategies = { immediate: '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438', batched: '\u0413\u0440\u0443\u043f\u043f\u043e\u0432\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b', manual: '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f', background: '\u0424\u043e\u043d\u043e\u0432\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Service Worker' }; Conflict Resolution : - Last Write Wins : \u041f\u0440\u043e\u0441\u0442\u043e\u0439, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 - Manual Resolution : \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0435\u0440\u0441\u0438\u044e - Automatic Merge : \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c - Vector Clocks : \u0414\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 Data Consistency Models Model Consistency Availability Partition Tolerance Strong Consistency \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f Eventual Consistency \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f Causal Consistency \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f Offline-first \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Eventual Consistency . Storage Limits \u0438 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u043e\u0442\u0430\u043c\u0438 const checkStorageQuota = async () => { if ('storage' in navigator && 'estimate' in navigator.storage) { const estimate = await navigator.storage.estimate(); return { used: estimate.usage, available: estimate.quota, percentage: (estimate.usage / estimate.quota) * 100 }; } }; // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u0442\u0430\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 const cleanupOldData = async (db, maxAge = 30 * 24 * 60 * 60 * 1000) => { const cutoff = Date.now() - maxAge; const oldItems = await db.getAll('posts', 'timestamp', IDBKeyRange.upperBound(cutoff)); for (const item of oldItems) { if (item.status === 'synced') { await db.delete('posts', item.id); } } }; Best Practices Senior-level Progressive Enhancement : \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 \u0441\u0435\u0442\u0438 Optimistic UI : \u041c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Conflict Resolution : \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 Battery Optimization : \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0431\u0430\u0442\u0430\u0440\u0435\u0438 Storage Management : \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u043e\u0442\u0430\u043c\u0438 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 Background Sync : Service Worker \u0434\u043b\u044f \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 User Feedback : \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c eventual consistency \u0432 offline-first \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432? \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 storage quota \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 offline functionality? \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 IndexedDB? Performance considerations \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 offline datasets?","title":"Offline-First \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small)"},{"location":"questions/architecture/offline-first_small/#offline-first-small","text":"","title":"Offline-First \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small)"},{"location":"questions/architecture/offline-first_small/#offline-first","text":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b : - IndexedDB \u0434\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - localStorage \u0434\u043b\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First"},{"location":"questions/architecture/offline-first_small/#indexeddb-offline-storage","text":"class OfflineDatabase { constructor(dbName, version = 1) { this.dbName = dbName; this.version = version; this.db = null; } async init() { return new Promise((resolve, reject) => { const request = indexedDB.open(this.dbName, this.version); request.onsuccess = () => { this.db = request.result; resolve(this.db); }; request.onupgradeneeded = (event) => { const db = event.target.result; this.createStores(db); }; }); } createStores(db) { // \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 const dataStore = db.createObjectStore('posts', { keyPath: 'id' }); dataStore.createIndex('timestamp', 'timestamp'); // \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true }); syncStore.createIndex('operation', 'operation'); } async get(storeName, id) { const transaction = this.db.transaction([storeName], 'readonly'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.get(id); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } async put(storeName, data) { const transaction = this.db.transaction([storeName], 'readwrite'); const store = transaction.objectStore(storeName); return new Promise((resolve, reject) => { const request = store.put(data); request.onsuccess = () => resolve(request.result); request.onerror = () => reject(request.error); }); } }","title":"IndexedDB \u0434\u043b\u044f Offline Storage"},{"location":"questions/architecture/offline-first_small/#offline-first-data-service","text":"class OfflineDataService { constructor(database, syncService) { this.db = database; this.syncService = syncService; } // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 async create(data) { const item = { id: this.generateOfflineId(), ...data, timestamp: Date.now(), status: 'pending', version: 1 }; await this.db.put('posts', item); await this.syncService.addToQueue('CREATE', item); return item; } async update(id, updates) { const existing = await this.db.get('posts', id); const updated = { ...existing, ...updates, version: existing.version + 1, lastModified: Date.now(), status: 'pending' }; await this.db.put('posts', updated); await this.syncService.addToQueue('UPDATE', updated); return updated; } async delete(id) { const item = await this.db.get('posts', id); if (item.status === 'pending') { // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 await this.db.delete('posts', id); await this.syncService.removeFromQueue('CREATE', { id }); } else { // \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 await this.db.put('posts', { ...item, isDeleted: true, deletedAt: Date.now() }); await this.syncService.addToQueue('DELETE', { id }); } } generateOfflineId() { return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`; } }","title":"Offline-First Data Service"},{"location":"questions/architecture/offline-first_small/#_1","text":"class SyncService { constructor(database, apiClient) { this.db = database; this.api = apiClient; this.isOnline = navigator.onLine; this.isSyncing = false; window.addEventListener('online', () => { this.isOnline = true; this.startSync(); }); } async addToQueue(operation, data) { const queueItem = { operation, data, timestamp: Date.now(), attempts: 0 }; await this.db.put('syncQueue', queueItem); if (this.isOnline) this.startSync(); } async startSync() { if (!this.isOnline || this.isSyncing) return; this.isSyncing = true; try { await this.downloadChanges(); await this.uploadChanges(); } finally { this.isSyncing = false; } } async downloadChanges() { const lastSync = await this.getLastSyncTime(); const changes = await this.api.getChanges({ since: lastSync }); for (const change of changes) { await this.applyRemoteChange(change); } } async uploadChanges() { const queue = await this.db.getAll('syncQueue'); for (const item of queue) { try { await this.processQueueItem(item); await this.db.delete('syncQueue', item.id); } catch (error) { if (++item.attempts >= 3) { await this.db.delete('syncQueue', item.id); } } } } async processQueueItem(item) { switch (item.operation) { case 'CREATE': const serverItem = await this.api.create(item.data); await this.updateLocalWithServerData(item.data.id, serverItem); break; case 'UPDATE': const updated = await this.api.update(item.data.id, item.data); await this.updateLocalWithServerData(item.data.id, updated); break; case 'DELETE': await this.api.delete(item.data.id); await this.db.delete('posts', item.data.id); break; } } }","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/architecture/offline-first_small/#_2","text":"class ConflictResolver { resolve(localData, remoteData) { const strategy = this.selectStrategy(localData, remoteData); switch (strategy) { case 'last-write-wins': return this.lastWriteWins(localData, remoteData); case 'merge-fields': return this.mergeFields(localData, remoteData); case 'user-choice': return this.requestUserChoice(localData, remoteData); } } selectStrategy(localData, remoteData) { const criticalFields = ['title', 'content']; const hasConflict = criticalFields.some(field => localData[field] !== remoteData[field] ); return hasConflict ? 'user-choice' : 'merge-fields'; } lastWriteWins(localData, remoteData) { const localTime = localData.lastModified || localData.timestamp; const remoteTime = remoteData.lastModified || remoteData.timestamp; return localTime > remoteTime ? localData : remoteData; } mergeFields(localData, remoteData) { return { ...remoteData, ...localData, tags: [...new Set([...(localData.tags || []), ...(remoteData.tags || [])])], lastModified: Math.max( localData.lastModified || 0, remoteData.lastModified || 0 ) }; } async requestUserChoice(localData, remoteData) { return new Promise((resolve) => { window.dispatchEvent(new CustomEvent('conflict-resolution', { detail: { local: localData, remote: remoteData, resolve } })); }); } }","title":"\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432"},{"location":"questions/architecture/offline-first_small/#react-hooks-offline-first","text":"const useOfflineData = (storeName) => { const [data, setData] = useState([]); const [loading, setLoading] = useState(true); const [isOnline, setIsOnline] = useState(navigator.onLine); const dbRef = useRef(null); const serviceRef = useRef(null); useEffect(() => { const initOffline = async () => { dbRef.current = new OfflineDatabase('AppDB'); await dbRef.current.init(); serviceRef.current = new OfflineDataService( dbRef.current, new SyncService(dbRef.current, new APIClient()) ); await loadData(); setLoading(false); }; initOffline(); }, []); const loadData = async () => { const items = await dbRef.current.getAll(storeName); setData(items.filter(item => !item.isDeleted)); }; const create = useCallback(async (itemData) => { const item = await serviceRef.current.create(itemData); await loadData(); return item; }, []); const update = useCallback(async (id, updates) => { const item = await serviceRef.current.update(id, updates); await loadData(); return item; }, []); const remove = useCallback(async (id) => { await serviceRef.current.delete(id); await loadData(); }, []); return { data, loading, isOnline, create, update, remove }; }; // Sync status hook const useSyncStatus = () => { const [status, setStatus] = useState({ isSyncing: false, pendingCount: 0, lastSync: null }); useEffect(() => { const updateStatus = async () => { // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442 sync service if (window.syncService) { const newStatus = await window.syncService.getStatus(); setStatus(newStatus); } }; const interval = setInterval(updateStatus, 5000); return () => clearInterval(interval); }, []); return status; };","title":"React Hooks \u0434\u043b\u044f Offline-First"},{"location":"questions/architecture/offline-first_small/#service-worker-offline-first","text":"// sw.js - Offline-first caching strategy const CACHE_NAME = 'offline-first-v1'; const APP_SHELL = ['/', '/static/js/bundle.js', '/static/css/main.css']; // Offline-first \u0434\u043b\u044f API self.addEventListener('fetch', (event) => { const { request } = event; if (request.url.includes('/api/')) { event.respondWith( // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u0435\u0448, \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0442\u044c caches.match(request) .then(cachedResponse => { if (cachedResponse) return cachedResponse; return fetch(request) .then(response => { if (response.status === 200) { const responseClone = response.clone(); caches.open(CACHE_NAME) .then(cache => cache.put(request, responseClone)); } return response; }) .catch(() => { return new Response(JSON.stringify({ error: 'Network unavailable', offline: true }), { headers: { 'Content-Type': 'application/json' } }); }); }) ); } }); // Background sync self.addEventListener('sync', (event) => { if (event.tag === 'background-sync') { event.waitUntil(handleBackgroundSync()); } }); async function handleBackgroundSync() { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 const db = await openDatabase(); const queue = await getAllFromStore(db, 'syncQueue'); for (const item of queue) { try { await syncItem(item); await deleteFromStore(db, 'syncQueue', item.id); } catch (error) { console.error('Background sync failed:', error); } } }","title":"Service Worker \u0434\u043b\u044f Offline-First"},{"location":"questions/architecture/offline-first_small/#_3","text":"class OfflineOptimizer { constructor() { this.batteryOptimized = false; this.connectionQuality = 'good'; this.setupMonitoring(); } async setupMonitoring() { // Battery API if ('getBattery' in navigator) { const battery = await navigator.getBattery(); this.batteryOptimized = battery.level < 0.2; } // Network Information API if ('connection' in navigator) { const connection = navigator.connection; this.connectionQuality = this.getConnectionQuality(connection.effectiveType); } } getConnectionQuality(effectiveType) { const qualityMap = { 'slow-2g': 'poor', '2g': 'poor', '3g': 'moderate', '4g': 'good' }; return qualityMap[effectiveType] || 'good'; } getSyncInterval() { if (this.batteryOptimized) return 300000; // 5 min switch (this.connectionQuality) { case 'poor': return 120000; // 2 min case 'moderate': return 60000; // 1 min default: return 30000; // 30 sec } } shouldOptimizeSync() { return this.batteryOptimized || this.connectionQuality === 'poor'; } }","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432"},{"location":"questions/architecture/offline-first_small/#sync-status-component","text":"function SyncStatusIndicator() { const { isSyncing, pendingCount, lastSync } = useSyncStatus(); const isOnline = navigator.onLine; const getStatusText = () => { if (!isOnline) return 'Offline'; if (isSyncing) return 'Syncing...'; if (pendingCount > 0) return `Pending: ${pendingCount}`; return 'Synced'; }; const getStatusColor = () => { if (!isOnline) return 'orange'; if (isSyncing) return 'blue'; if (pendingCount > 0) return 'yellow'; return 'green'; }; return ( <div className={`sync-status ${getStatusColor()}`}> <div className=\"indicator\" /> <span>{getStatusText()}</span> {lastSync && <small>Last: {new Date(lastSync).toLocaleTimeString()}</small>} </div> ); }","title":"Sync Status Component"},{"location":"questions/architecture/offline-first_small/#offline-first_1","text":"Local-First Philosophy : - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043a \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b - \u041c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 Sync Strategies : const syncStrategies = { immediate: '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438', batched: '\u0413\u0440\u0443\u043f\u043f\u043e\u0432\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b', manual: '\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f', background: '\u0424\u043e\u043d\u043e\u0432\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Service Worker' }; Conflict Resolution : - Last Write Wins : \u041f\u0440\u043e\u0441\u0442\u043e\u0439, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 - Manual Resolution : \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0435\u0440\u0441\u0438\u044e - Automatic Merge : \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c - Vector Clocks : \u0414\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Offline-First"},{"location":"questions/architecture/offline-first_small/#data-consistency-models","text":"Model Consistency Availability Partition Tolerance Strong Consistency \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f Eventual Consistency \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f Causal Consistency \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f Offline-first \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Eventual Consistency .","title":"Data Consistency Models"},{"location":"questions/architecture/offline-first_small/#storage-limits","text":"// \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u043e\u0442\u0430\u043c\u0438 const checkStorageQuota = async () => { if ('storage' in navigator && 'estimate' in navigator.storage) { const estimate = await navigator.storage.estimate(); return { used: estimate.usage, available: estimate.quota, percentage: (estimate.usage / estimate.quota) * 100 }; } }; // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u0442\u0430\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 const cleanupOldData = async (db, maxAge = 30 * 24 * 60 * 60 * 1000) => { const cutoff = Date.now() - maxAge; const oldItems = await db.getAll('posts', 'timestamp', IDBKeyRange.upperBound(cutoff)); for (const item of oldItems) { if (item.status === 'synced') { await db.delete('posts', item.id); } } };","title":"Storage Limits \u0438 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435"},{"location":"questions/architecture/offline-first_small/#best-practices-senior-level","text":"Progressive Enhancement : \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 \u0441\u0435\u0442\u0438 Optimistic UI : \u041c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Conflict Resolution : \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 Battery Optimization : \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0431\u0430\u0442\u0430\u0440\u0435\u0438 Storage Management : \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u043e\u0442\u0430\u043c\u0438 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 Background Sync : Service Worker \u0434\u043b\u044f \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 User Feedback : \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438","title":"Best Practices Senior-level"},{"location":"questions/architecture/offline-first_small/#senior","text":"\u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c eventual consistency \u0432 offline-first \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432? \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 storage quota \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 offline functionality? \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 IndexedDB? Performance considerations \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 offline datasets?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/architecture/resilient-frontend/","text":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f frontend \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0445 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u0432\u044b\u0441\u043e\u043a\u0438\u0445 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u043a \u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u0441\u0431\u043e\u0435\u0432. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b 1. Graceful Degradation \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u0436\u0435 \u043f\u0440\u0438 \u043e\u0442\u043a\u0430\u0437\u0435 \u0447\u0430\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438. // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 graceful degradation function WeatherWidget() { const [weather, setWeather] = useState(null); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); useEffect(() => { const handleOnlineStatus = () => setIsOnline(navigator.onLine); window.addEventListener('online', handleOnlineStatus); window.addEventListener('offline', handleOnlineStatus); return () => { window.removeEventListener('online', handleOnlineStatus); window.removeEventListener('offline', handleOnlineStatus); }; }, []); useEffect(() => { const fetchWeather = async () => { try { const response = await fetch('/api/weather'); if (!response.ok) throw new Error('Weather service unavailable'); const data = await response.json(); setWeather(data); setError(null); } catch (err) { setError(err.message); // Fallback \u043a \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c const cachedWeather = localStorage.getItem('weather'); if (cachedWeather) { setWeather(JSON.parse(cachedWeather)); } } }; if (isOnline) { fetchWeather(); } }, [isOnline]); // Graceful degradation \u0432 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0435 if (!isOnline) { return ( <div className=\"weather-widget offline\"> <p>\ud83d\udcf1 \u041d\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443</p> {weather && ( <div> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435:</p> <p>{weather.temperature}\u00b0C (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435)</p> </div> )} </div> ); } if (error && !weather) { return ( <div className=\"weather-widget error\"> <p>\u26a0\ufe0f \u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u043e\u0433\u043e\u0434\u044b \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d</p> <p>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0437\u0436\u0435</p> </div> ); } return ( <div className=\"weather-widget\"> {weather ? ( <div> <p>{weather.temperature}\u00b0C</p> <p>{weather.condition}</p> </div> ) : ( <p>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043e\u0433\u043e\u0434\u044b...</p> )} {error && ( <small className=\"warning\"> \u041f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 </small> )} </div> ); } 2. Circuit Breaker Pattern \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0445 \u043e\u0442\u043a\u0430\u0437\u043e\u0432 \u043f\u0440\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. class CircuitBreaker { constructor(options = {}) { this.failureThreshold = options.failureThreshold || 5; this.resetTimeout = options.resetTimeout || 60000; this.monitoringPeriod = options.monitoringPeriod || 10000; this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN this.failureCount = 0; this.lastFailureTime = null; this.successCount = 0; } async execute(operation) { if (this.state === 'OPEN') { if (Date.now() - this.lastFailureTime > this.resetTimeout) { this.state = 'HALF_OPEN'; this.successCount = 0; } else { throw new Error('Circuit breaker is OPEN'); } } try { const result = await operation(); if (this.state === 'HALF_OPEN') { this.successCount++; if (this.successCount >= 3) { this.reset(); } } else { this.reset(); } return result; } catch (error) { this.recordFailure(); throw error; } } recordFailure() { this.failureCount++; this.lastFailureTime = Date.now(); if (this.failureCount >= this.failureThreshold) { this.state = 'OPEN'; } } reset() { this.state = 'CLOSED'; this.failureCount = 0; this.lastFailureTime = null; } getState() { return { state: this.state, failureCount: this.failureCount, lastFailureTime: this.lastFailureTime }; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Circuit Breaker const apiCircuitBreaker = new CircuitBreaker({ failureThreshold: 3, resetTimeout: 30000 }); class APIService { async fetchUserData(userId) { return apiCircuitBreaker.execute(async () => { const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return response.json(); }); } } // React hook \u0434\u043b\u044f Circuit Breaker const useCircuitBreaker = (operation, dependencies = []) => { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); const [circuitState, setCircuitState] = useState('CLOSED'); const circuitBreakerRef = useRef(new CircuitBreaker()); const execute = useCallback(async () => { setLoading(true); setError(null); try { const result = await circuitBreakerRef.current.execute(operation); setData(result); setCircuitState(circuitBreakerRef.current.getState().state); } catch (err) { setError(err.message); setCircuitState(circuitBreakerRef.current.getState().state); } finally { setLoading(false); } }, dependencies); return { data, loading, error, circuitState, execute }; }; 3. Retry Logic \u0441 Exponential Backoff class RetryManager { constructor(options = {}) { this.maxRetries = options.maxRetries || 3; this.baseDelay = options.baseDelay || 1000; this.maxDelay = options.maxDelay || 30000; this.factor = options.factor || 2; this.jitter = options.jitter || true; } async execute(operation, context = {}) { let lastError; for (let attempt = 0; attempt <= this.maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error; // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0448\u0438\u0431\u043e\u043a if (this.shouldNotRetry(error)) { throw error; } if (attempt === this.maxRetries) { break; } const delay = this.calculateDelay(attempt); console.log(`Retry attempt ${attempt + 1} after ${delay}ms`); await this.sleep(delay); } } throw lastError; } shouldNotRetry(error) { // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a (4xx) if (error.status >= 400 && error.status < 500) { return true; } // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a const nonRetryableErrors = [ 'ValidationError', 'AuthenticationError', 'AuthorizationError' ]; return nonRetryableErrors.includes(error.name); } calculateDelay(attempt) { let delay = this.baseDelay * Math.pow(this.factor, attempt); delay = Math.min(delay, this.maxDelay); if (this.jitter) { // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f thundering herd delay = delay * (0.5 + Math.random() * 0.5); } return Math.floor(delay); } sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } } // HTTP Client \u0441 retry logic class ResilientHttpClient { constructor(options = {}) { this.retryManager = new RetryManager(options.retry); this.circuitBreaker = new CircuitBreaker(options.circuitBreaker); this.timeout = options.timeout || 10000; } async request(url, options = {}) { return this.circuitBreaker.execute(async () => { return this.retryManager.execute(async () => { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), this.timeout); try { const response = await fetch(url, { ...options, signal: controller.signal }); if (!response.ok) { const error = new Error(`HTTP ${response.status}`); error.status = response.status; throw error; } return response.json(); } finally { clearTimeout(timeoutId); } }); }); } } // React hook \u0434\u043b\u044f resilient API calls const useResilientAPI = () => { const clientRef = useRef(new ResilientHttpClient({ retry: { maxRetries: 3, baseDelay: 1000 }, circuitBreaker: { failureThreshold: 5 }, timeout: 15000 })); const request = useCallback(async (url, options) => { return clientRef.current.request(url, options); }, []); return { request }; }; \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0444\u0444\u043b\u0430\u0439\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f // sw.js - Service Worker const CACHE_NAME = 'app-cache-v1'; const STATIC_CACHE_URLS = [ '/', '/static/js/bundle.js', '/static/css/main.css', '/offline.html' ]; // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const cacheStrategies = { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u0435\u0448, \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0442\u044c cacheFirst: async (request) => { const cached = await caches.match(request); if (cached) return cached; try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { // Fallback \u0434\u043b\u044f \u043e\u0444\u0444\u043b\u0430\u0439\u043d if (request.destination === 'document') { return caches.match('/offline.html'); } throw error; } }, // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0442\u044c, \u043f\u043e\u0442\u043e\u043c \u043a\u0435\u0448 networkFirst: async (request) => { try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { const cached = await caches.match(request); if (cached) return cached; throw error; } }, // Stale-while-revalidate staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { const cache = caches.open(CACHE_NAME); cache.then(c => c.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(STATIC_CACHE_URLS)) ); }); self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); // \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f if (url.pathname.startsWith('/api/')) { // API - network first event.respondWith(cacheStrategies.networkFirst(request)); } else if (url.pathname.startsWith('/static/')) { // \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b - cache first event.respondWith(cacheStrategies.cacheFirst(request)); } else { // HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b - stale while revalidate event.respondWith(cacheStrategies.staleWhileRevalidate(request)); } }); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 self.addEventListener('sync', (event) => { if (event.tag === 'background-sync') { event.waitUntil(handleBackgroundSync()); } }); async function handleBackgroundSync() { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 const requests = await getPendingRequests(); for (const request of requests) { try { await fetch(request.url, request.options); await removePendingRequest(request.id); } catch (error) { console.log('Background sync failed:', error); } } } Offline Queue Management class OfflineQueue { constructor() { this.queue = []; this.isOnline = navigator.onLine; this.setupEventListeners(); this.loadPersistedQueue(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => { this.isOnline = false; }); } async add(request) { const queueItem = { id: crypto.randomUUID(), ...request, timestamp: Date.now(), retryCount: 0 }; this.queue.push(queueItem); await this.persistQueue(); if (this.isOnline) { this.processQueue(); } return queueItem.id; } async processQueue() { if (!this.isOnline || this.queue.length === 0) return; const processedIds = []; for (const item of this.queue) { try { await this.executeRequest(item); processedIds.push(item.id); } catch (error) { item.retryCount++; if (item.retryCount >= 3) { console.error('Request failed after 3 retries:', item); processedIds.push(item.id); } } } // \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b this.queue = this.queue.filter(item => !processedIds.includes(item.id)); await this.persistQueue(); } async executeRequest(item) { const response = await fetch(item.url, { method: item.method, headers: item.headers, body: item.body }); if (!response.ok) { throw new Error(`HTTP ${response.status}`); } return response; } async persistQueue() { try { localStorage.setItem('offlineQueue', JSON.stringify(this.queue)); } catch (error) { console.error('Failed to persist offline queue:', error); } } async loadPersistedQueue() { try { const stored = localStorage.getItem('offlineQueue'); if (stored) { this.queue = JSON.parse(stored); } } catch (error) { console.error('Failed to load offline queue:', error); this.queue = []; } } getQueueStatus() { return { isOnline: this.isOnline, queueLength: this.queue.length, pendingItems: this.queue.map(item => ({ id: item.id, url: item.url, method: item.method, timestamp: item.timestamp, retryCount: item.retryCount })) }; } } // React hook \u0434\u043b\u044f offline queue const useOfflineQueue = () => { const queueRef = useRef(new OfflineQueue()); const [queueStatus, setQueueStatus] = useState( queueRef.current.getQueueStatus() ); useEffect(() => { const updateStatus = () => { setQueueStatus(queueRef.current.getQueueStatus()); }; const interval = setInterval(updateStatus, 1000); window.addEventListener('online', updateStatus); window.addEventListener('offline', updateStatus); return () => { clearInterval(interval); window.removeEventListener('online', updateStatus); window.removeEventListener('offline', updateStatus); }; }, []); const addToQueue = useCallback((request) => { return queueRef.current.add(request); }, []); return { queueStatus, addToQueue }; }; Error Boundaries \u0438 Error Handling Advanced Error Boundary class ResilientErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null, errorInfo: null, retryCount: 0 }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { this.setState({ error, errorInfo, retryCount: this.state.retryCount + 1 }); // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 this.logError(error, errorInfo); // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0448\u0438\u0431\u043e\u043a if (this.shouldAutoRecover(error)) { setTimeout(() => { this.handleRetry(); }, 2000); } } shouldAutoRecover(error) { // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f network \u043e\u0448\u0438\u0431\u043e\u043a return error.name === 'ChunkLoadError' || error.message.includes('Loading chunk'); } logError(error, errorInfo) { const errorReport = { message: error.message, stack: error.stack, componentStack: errorInfo.componentStack, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, url: window.location.href, userId: this.props.userId }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 if (window.errorReporting) { window.errorReporting.captureException(error, { extra: errorReport }); } // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0444\u0444\u043b\u0430\u0439\u043d const errors = JSON.parse(localStorage.getItem('errorLog') || '[]'); errors.push(errorReport); // \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 50 \u043e\u0448\u0438\u0431\u043e\u043a if (errors.length > 50) { errors.splice(0, errors.length - 50); } localStorage.setItem('errorLog', JSON.stringify(errors)); } handleRetry = () => { this.setState({ hasError: false, error: null, errorInfo: null }); }; render() { if (this.state.hasError) { const { error, retryCount } = this.state; const { fallback: FallbackComponent } = this.props; if (FallbackComponent) { return ( <FallbackComponent error={error} retryCount={retryCount} onRetry={this.handleRetry} /> ); } return ( <div className=\"error-boundary\"> <h2>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a</h2> <details> <summary>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438</summary> <pre>{error?.message}</pre> </details> {retryCount < 3 && ( <button onClick={this.handleRetry}> \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430 ({retryCount}/3) </button> )} {retryCount >= 3 && ( <div> <p>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443</p> <button onClick={() => window.location.reload()}> \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c </button> </div> )} </div> ); } return this.props.children; } } // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 fallback \u0434\u043b\u044f \u043e\u0448\u0438\u0431\u043e\u043a function ErrorFallback({ error, retryCount, onRetry }) { const isNetworkError = error?.name === 'ChunkLoadError' || error?.message?.includes('fetch'); return ( <div className=\"error-fallback\"> {isNetworkError ? ( <div> <h3>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c</h3> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430</p> </div> ) : ( <div> <h3>\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430</h3> <p>\u041c\u044b \u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430\u0434 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c</p> </div> )} <button onClick={onRetry} disabled={retryCount >= 3}> \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430 </button> </div> ); } \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c Performance \u0438 Error Monitoring class FrontendMonitoring { constructor(options = {}) { this.config = options; this.metrics = new Map(); this.errors = []; this.setupPerformanceObserver(); this.setupErrorHandling(); } setupPerformanceObserver() { if ('PerformanceObserver' in window) { // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 Core Web Vitals const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric(entry.name, entry.value); } }); observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] }); } // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 window.addEventListener('load', () => { const navigation = performance.getEntriesByType('navigation')[0]; this.recordMetric('page-load-time', navigation.loadEventEnd - navigation.loadEventStart); this.recordMetric('dom-content-loaded', navigation.domContentLoadedEventEnd); }); } setupErrorHandling() { window.addEventListener('error', (event) => { this.recordError({ type: 'javascript-error', message: event.message, filename: event.filename, lineno: event.lineno, colno: event.colno, stack: event.error?.stack }); }); window.addEventListener('unhandledrejection', (event) => { this.recordError({ type: 'unhandled-promise-rejection', message: event.reason?.message || String(event.reason), stack: event.reason?.stack }); }); } recordMetric(name, value) { const timestamp = Date.now(); if (!this.metrics.has(name)) { this.metrics.set(name, []); } this.metrics.get(name).push({ value, timestamp }); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0440\u0430\u0437\u0443 if (this.isCriticalMetric(name)) { this.sendMetric(name, value); } } recordError(error) { const errorData = { ...error, timestamp: Date.now(), url: window.location.href, userAgent: navigator.userAgent }; this.errors.push(errorData); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0441\u0440\u0430\u0437\u0443 this.sendError(errorData); } isCriticalMetric(name) { const criticalMetrics = [ 'largest-contentful-paint', 'first-input-delay', 'cumulative-layout-shift' ]; return criticalMetrics.includes(name); } async sendMetric(name, value) { try { await fetch('/api/metrics', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ type: 'metric', name, value, timestamp: Date.now() }) }); } catch (error) { console.error('Failed to send metric:', error); } } async sendError(error) { try { await fetch('/api/errors', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(error) }); } catch (err) { // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0435\u0441\u043b\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c const storedErrors = JSON.parse(localStorage.getItem('pendingErrors') || '[]'); storedErrors.push(error); localStorage.setItem('pendingErrors', JSON.stringify(storedErrors)); } } getHealthStatus() { const recentErrors = this.errors.filter( error => Date.now() - error.timestamp < 300000 // \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u043c\u0438\u043d\u0443\u0442 ); return { status: recentErrors.length > 10 ? 'unhealthy' : 'healthy', errorRate: recentErrors.length, lastError: recentErrors[recentErrors.length - 1], metrics: Object.fromEntries(this.metrics) }; } } // React hook \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 const useAppHealth = () => { const [healthStatus, setHealthStatus] = useState({ status: 'healthy' }); const monitoringRef = useRef(new FrontendMonitoring()); useEffect(() => { const interval = setInterval(() => { setHealthStatus(monitoringRef.current.getHealthStatus()); }, 30000); // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0435 30 \u0441\u0435\u043a\u0443\u043d\u0434 return () => clearInterval(interval); }, []); return healthStatus; }; Best Practices \u0434\u043b\u044f \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b Fail Fast, Recover Gracefully : \u0411\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0438\u0437\u044f\u0449\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c Defensive Programming : \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a Progressive Enhancement : \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 Bulkhead Pattern : \u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Health Checks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b Graceful Timeouts : \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b User Feedback : \u0418\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 WebSockets - \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0435 real-time \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f State Management - \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438 Circuit Breaker, Retry, Bulkhead - \u0417\u043d\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 Service Workers \u0438 PWA \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438? - \u041a\u0430\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u0442\u043a\u0430\u0437\u044b? - \u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c graceful degradation? - \u041a\u0430\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f? - \u041a\u0430\u043a \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c?","title":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f frontend \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"questions/architecture/resilient-frontend/#frontend","text":"","title":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f frontend \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"questions/architecture/resilient-frontend/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0445 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u0432\u044b\u0441\u043e\u043a\u0438\u0445 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u043a \u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u0441\u0431\u043e\u0435\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/resilient-frontend/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/resilient-frontend/#_3","text":"","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b"},{"location":"questions/architecture/resilient-frontend/#1-graceful-degradation","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u0436\u0435 \u043f\u0440\u0438 \u043e\u0442\u043a\u0430\u0437\u0435 \u0447\u0430\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438. // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 graceful degradation function WeatherWidget() { const [weather, setWeather] = useState(null); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); useEffect(() => { const handleOnlineStatus = () => setIsOnline(navigator.onLine); window.addEventListener('online', handleOnlineStatus); window.addEventListener('offline', handleOnlineStatus); return () => { window.removeEventListener('online', handleOnlineStatus); window.removeEventListener('offline', handleOnlineStatus); }; }, []); useEffect(() => { const fetchWeather = async () => { try { const response = await fetch('/api/weather'); if (!response.ok) throw new Error('Weather service unavailable'); const data = await response.json(); setWeather(data); setError(null); } catch (err) { setError(err.message); // Fallback \u043a \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c const cachedWeather = localStorage.getItem('weather'); if (cachedWeather) { setWeather(JSON.parse(cachedWeather)); } } }; if (isOnline) { fetchWeather(); } }, [isOnline]); // Graceful degradation \u0432 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0435 if (!isOnline) { return ( <div className=\"weather-widget offline\"> <p>\ud83d\udcf1 \u041d\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443</p> {weather && ( <div> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435:</p> <p>{weather.temperature}\u00b0C (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435)</p> </div> )} </div> ); } if (error && !weather) { return ( <div className=\"weather-widget error\"> <p>\u26a0\ufe0f \u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u043e\u0433\u043e\u0434\u044b \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d</p> <p>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0437\u0436\u0435</p> </div> ); } return ( <div className=\"weather-widget\"> {weather ? ( <div> <p>{weather.temperature}\u00b0C</p> <p>{weather.condition}</p> </div> ) : ( <p>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043e\u0433\u043e\u0434\u044b...</p> )} {error && ( <small className=\"warning\"> \u041f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 </small> )} </div> ); }","title":"1. Graceful Degradation"},{"location":"questions/architecture/resilient-frontend/#2-circuit-breaker-pattern","text":"\u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0445 \u043e\u0442\u043a\u0430\u0437\u043e\u0432 \u043f\u0440\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. class CircuitBreaker { constructor(options = {}) { this.failureThreshold = options.failureThreshold || 5; this.resetTimeout = options.resetTimeout || 60000; this.monitoringPeriod = options.monitoringPeriod || 10000; this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN this.failureCount = 0; this.lastFailureTime = null; this.successCount = 0; } async execute(operation) { if (this.state === 'OPEN') { if (Date.now() - this.lastFailureTime > this.resetTimeout) { this.state = 'HALF_OPEN'; this.successCount = 0; } else { throw new Error('Circuit breaker is OPEN'); } } try { const result = await operation(); if (this.state === 'HALF_OPEN') { this.successCount++; if (this.successCount >= 3) { this.reset(); } } else { this.reset(); } return result; } catch (error) { this.recordFailure(); throw error; } } recordFailure() { this.failureCount++; this.lastFailureTime = Date.now(); if (this.failureCount >= this.failureThreshold) { this.state = 'OPEN'; } } reset() { this.state = 'CLOSED'; this.failureCount = 0; this.lastFailureTime = null; } getState() { return { state: this.state, failureCount: this.failureCount, lastFailureTime: this.lastFailureTime }; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Circuit Breaker const apiCircuitBreaker = new CircuitBreaker({ failureThreshold: 3, resetTimeout: 30000 }); class APIService { async fetchUserData(userId) { return apiCircuitBreaker.execute(async () => { const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return response.json(); }); } } // React hook \u0434\u043b\u044f Circuit Breaker const useCircuitBreaker = (operation, dependencies = []) => { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); const [circuitState, setCircuitState] = useState('CLOSED'); const circuitBreakerRef = useRef(new CircuitBreaker()); const execute = useCallback(async () => { setLoading(true); setError(null); try { const result = await circuitBreakerRef.current.execute(operation); setData(result); setCircuitState(circuitBreakerRef.current.getState().state); } catch (err) { setError(err.message); setCircuitState(circuitBreakerRef.current.getState().state); } finally { setLoading(false); } }, dependencies); return { data, loading, error, circuitState, execute }; };","title":"2. Circuit Breaker Pattern"},{"location":"questions/architecture/resilient-frontend/#3-retry-logic-exponential-backoff","text":"class RetryManager { constructor(options = {}) { this.maxRetries = options.maxRetries || 3; this.baseDelay = options.baseDelay || 1000; this.maxDelay = options.maxDelay || 30000; this.factor = options.factor || 2; this.jitter = options.jitter || true; } async execute(operation, context = {}) { let lastError; for (let attempt = 0; attempt <= this.maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error; // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0448\u0438\u0431\u043e\u043a if (this.shouldNotRetry(error)) { throw error; } if (attempt === this.maxRetries) { break; } const delay = this.calculateDelay(attempt); console.log(`Retry attempt ${attempt + 1} after ${delay}ms`); await this.sleep(delay); } } throw lastError; } shouldNotRetry(error) { // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a (4xx) if (error.status >= 400 && error.status < 500) { return true; } // \u041d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a const nonRetryableErrors = [ 'ValidationError', 'AuthenticationError', 'AuthorizationError' ]; return nonRetryableErrors.includes(error.name); } calculateDelay(attempt) { let delay = this.baseDelay * Math.pow(this.factor, attempt); delay = Math.min(delay, this.maxDelay); if (this.jitter) { // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f thundering herd delay = delay * (0.5 + Math.random() * 0.5); } return Math.floor(delay); } sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } } // HTTP Client \u0441 retry logic class ResilientHttpClient { constructor(options = {}) { this.retryManager = new RetryManager(options.retry); this.circuitBreaker = new CircuitBreaker(options.circuitBreaker); this.timeout = options.timeout || 10000; } async request(url, options = {}) { return this.circuitBreaker.execute(async () => { return this.retryManager.execute(async () => { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), this.timeout); try { const response = await fetch(url, { ...options, signal: controller.signal }); if (!response.ok) { const error = new Error(`HTTP ${response.status}`); error.status = response.status; throw error; } return response.json(); } finally { clearTimeout(timeoutId); } }); }); } } // React hook \u0434\u043b\u044f resilient API calls const useResilientAPI = () => { const clientRef = useRef(new ResilientHttpClient({ retry: { maxRetries: 3, baseDelay: 1000 }, circuitBreaker: { failureThreshold: 5 }, timeout: 15000 })); const request = useCallback(async (url, options) => { return clientRef.current.request(url, options); }, []); return { request }; };","title":"3. Retry Logic \u0441 Exponential Backoff"},{"location":"questions/architecture/resilient-frontend/#_4","text":"","title":"\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0444\u0444\u043b\u0430\u0439\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430"},{"location":"questions/architecture/resilient-frontend/#service-worker","text":"// sw.js - Service Worker const CACHE_NAME = 'app-cache-v1'; const STATIC_CACHE_URLS = [ '/', '/static/js/bundle.js', '/static/css/main.css', '/offline.html' ]; // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const cacheStrategies = { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u0435\u0448, \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0442\u044c cacheFirst: async (request) => { const cached = await caches.match(request); if (cached) return cached; try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { // Fallback \u0434\u043b\u044f \u043e\u0444\u0444\u043b\u0430\u0439\u043d if (request.destination === 'document') { return caches.match('/offline.html'); } throw error; } }, // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0442\u044c, \u043f\u043e\u0442\u043e\u043c \u043a\u0435\u0448 networkFirst: async (request) => { try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { const cached = await caches.match(request); if (cached) return cached; throw error; } }, // Stale-while-revalidate staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { const cache = caches.open(CACHE_NAME); cache.then(c => c.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(STATIC_CACHE_URLS)) ); }); self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); // \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f if (url.pathname.startsWith('/api/')) { // API - network first event.respondWith(cacheStrategies.networkFirst(request)); } else if (url.pathname.startsWith('/static/')) { // \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b - cache first event.respondWith(cacheStrategies.cacheFirst(request)); } else { // HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b - stale while revalidate event.respondWith(cacheStrategies.staleWhileRevalidate(request)); } }); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 self.addEventListener('sync', (event) => { if (event.tag === 'background-sync') { event.waitUntil(handleBackgroundSync()); } }); async function handleBackgroundSync() { // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 const requests = await getPendingRequests(); for (const request of requests) { try { await fetch(request.url, request.options); await removePendingRequest(request.id); } catch (error) { console.log('Background sync failed:', error); } } }","title":"Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/resilient-frontend/#offline-queue-management","text":"class OfflineQueue { constructor() { this.queue = []; this.isOnline = navigator.onLine; this.setupEventListeners(); this.loadPersistedQueue(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => { this.isOnline = false; }); } async add(request) { const queueItem = { id: crypto.randomUUID(), ...request, timestamp: Date.now(), retryCount: 0 }; this.queue.push(queueItem); await this.persistQueue(); if (this.isOnline) { this.processQueue(); } return queueItem.id; } async processQueue() { if (!this.isOnline || this.queue.length === 0) return; const processedIds = []; for (const item of this.queue) { try { await this.executeRequest(item); processedIds.push(item.id); } catch (error) { item.retryCount++; if (item.retryCount >= 3) { console.error('Request failed after 3 retries:', item); processedIds.push(item.id); } } } // \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b this.queue = this.queue.filter(item => !processedIds.includes(item.id)); await this.persistQueue(); } async executeRequest(item) { const response = await fetch(item.url, { method: item.method, headers: item.headers, body: item.body }); if (!response.ok) { throw new Error(`HTTP ${response.status}`); } return response; } async persistQueue() { try { localStorage.setItem('offlineQueue', JSON.stringify(this.queue)); } catch (error) { console.error('Failed to persist offline queue:', error); } } async loadPersistedQueue() { try { const stored = localStorage.getItem('offlineQueue'); if (stored) { this.queue = JSON.parse(stored); } } catch (error) { console.error('Failed to load offline queue:', error); this.queue = []; } } getQueueStatus() { return { isOnline: this.isOnline, queueLength: this.queue.length, pendingItems: this.queue.map(item => ({ id: item.id, url: item.url, method: item.method, timestamp: item.timestamp, retryCount: item.retryCount })) }; } } // React hook \u0434\u043b\u044f offline queue const useOfflineQueue = () => { const queueRef = useRef(new OfflineQueue()); const [queueStatus, setQueueStatus] = useState( queueRef.current.getQueueStatus() ); useEffect(() => { const updateStatus = () => { setQueueStatus(queueRef.current.getQueueStatus()); }; const interval = setInterval(updateStatus, 1000); window.addEventListener('online', updateStatus); window.addEventListener('offline', updateStatus); return () => { clearInterval(interval); window.removeEventListener('online', updateStatus); window.removeEventListener('offline', updateStatus); }; }, []); const addToQueue = useCallback((request) => { return queueRef.current.add(request); }, []); return { queueStatus, addToQueue }; };","title":"Offline Queue Management"},{"location":"questions/architecture/resilient-frontend/#error-boundaries-error-handling","text":"","title":"Error Boundaries \u0438 Error Handling"},{"location":"questions/architecture/resilient-frontend/#advanced-error-boundary","text":"class ResilientErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null, errorInfo: null, retryCount: 0 }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { this.setState({ error, errorInfo, retryCount: this.state.retryCount + 1 }); // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 this.logError(error, errorInfo); // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0448\u0438\u0431\u043e\u043a if (this.shouldAutoRecover(error)) { setTimeout(() => { this.handleRetry(); }, 2000); } } shouldAutoRecover(error) { // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f network \u043e\u0448\u0438\u0431\u043e\u043a return error.name === 'ChunkLoadError' || error.message.includes('Loading chunk'); } logError(error, errorInfo) { const errorReport = { message: error.message, stack: error.stack, componentStack: errorInfo.componentStack, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, url: window.location.href, userId: this.props.userId }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 if (window.errorReporting) { window.errorReporting.captureException(error, { extra: errorReport }); } // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0444\u0444\u043b\u0430\u0439\u043d const errors = JSON.parse(localStorage.getItem('errorLog') || '[]'); errors.push(errorReport); // \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 50 \u043e\u0448\u0438\u0431\u043e\u043a if (errors.length > 50) { errors.splice(0, errors.length - 50); } localStorage.setItem('errorLog', JSON.stringify(errors)); } handleRetry = () => { this.setState({ hasError: false, error: null, errorInfo: null }); }; render() { if (this.state.hasError) { const { error, retryCount } = this.state; const { fallback: FallbackComponent } = this.props; if (FallbackComponent) { return ( <FallbackComponent error={error} retryCount={retryCount} onRetry={this.handleRetry} /> ); } return ( <div className=\"error-boundary\"> <h2>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a</h2> <details> <summary>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438</summary> <pre>{error?.message}</pre> </details> {retryCount < 3 && ( <button onClick={this.handleRetry}> \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430 ({retryCount}/3) </button> )} {retryCount >= 3 && ( <div> <p>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443</p> <button onClick={() => window.location.reload()}> \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c </button> </div> )} </div> ); } return this.props.children; } } // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 fallback \u0434\u043b\u044f \u043e\u0448\u0438\u0431\u043e\u043a function ErrorFallback({ error, retryCount, onRetry }) { const isNetworkError = error?.name === 'ChunkLoadError' || error?.message?.includes('fetch'); return ( <div className=\"error-fallback\"> {isNetworkError ? ( <div> <h3>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c</h3> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430</p> </div> ) : ( <div> <h3>\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430</h3> <p>\u041c\u044b \u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430\u0434 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c</p> </div> )} <button onClick={onRetry} disabled={retryCount >= 3}> \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430 </button> </div> ); }","title":"Advanced Error Boundary"},{"location":"questions/architecture/resilient-frontend/#_5","text":"","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/resilient-frontend/#performance-error-monitoring","text":"class FrontendMonitoring { constructor(options = {}) { this.config = options; this.metrics = new Map(); this.errors = []; this.setupPerformanceObserver(); this.setupErrorHandling(); } setupPerformanceObserver() { if ('PerformanceObserver' in window) { // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 Core Web Vitals const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric(entry.name, entry.value); } }); observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] }); } // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 window.addEventListener('load', () => { const navigation = performance.getEntriesByType('navigation')[0]; this.recordMetric('page-load-time', navigation.loadEventEnd - navigation.loadEventStart); this.recordMetric('dom-content-loaded', navigation.domContentLoadedEventEnd); }); } setupErrorHandling() { window.addEventListener('error', (event) => { this.recordError({ type: 'javascript-error', message: event.message, filename: event.filename, lineno: event.lineno, colno: event.colno, stack: event.error?.stack }); }); window.addEventListener('unhandledrejection', (event) => { this.recordError({ type: 'unhandled-promise-rejection', message: event.reason?.message || String(event.reason), stack: event.reason?.stack }); }); } recordMetric(name, value) { const timestamp = Date.now(); if (!this.metrics.has(name)) { this.metrics.set(name, []); } this.metrics.get(name).push({ value, timestamp }); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0440\u0430\u0437\u0443 if (this.isCriticalMetric(name)) { this.sendMetric(name, value); } } recordError(error) { const errorData = { ...error, timestamp: Date.now(), url: window.location.href, userAgent: navigator.userAgent }; this.errors.push(errorData); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0441\u0440\u0430\u0437\u0443 this.sendError(errorData); } isCriticalMetric(name) { const criticalMetrics = [ 'largest-contentful-paint', 'first-input-delay', 'cumulative-layout-shift' ]; return criticalMetrics.includes(name); } async sendMetric(name, value) { try { await fetch('/api/metrics', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ type: 'metric', name, value, timestamp: Date.now() }) }); } catch (error) { console.error('Failed to send metric:', error); } } async sendError(error) { try { await fetch('/api/errors', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(error) }); } catch (err) { // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0435\u0441\u043b\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c const storedErrors = JSON.parse(localStorage.getItem('pendingErrors') || '[]'); storedErrors.push(error); localStorage.setItem('pendingErrors', JSON.stringify(storedErrors)); } } getHealthStatus() { const recentErrors = this.errors.filter( error => Date.now() - error.timestamp < 300000 // \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u043c\u0438\u043d\u0443\u0442 ); return { status: recentErrors.length > 10 ? 'unhealthy' : 'healthy', errorRate: recentErrors.length, lastError: recentErrors[recentErrors.length - 1], metrics: Object.fromEntries(this.metrics) }; } } // React hook \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 const useAppHealth = () => { const [healthStatus, setHealthStatus] = useState({ status: 'healthy' }); const monitoringRef = useRef(new FrontendMonitoring()); useEffect(() => { const interval = setInterval(() => { setHealthStatus(monitoringRef.current.getHealthStatus()); }, 30000); // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0435 30 \u0441\u0435\u043a\u0443\u043d\u0434 return () => clearInterval(interval); }, []); return healthStatus; };","title":"Performance \u0438 Error Monitoring"},{"location":"questions/architecture/resilient-frontend/#best-practices","text":"Fail Fast, Recover Gracefully : \u0411\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0438\u0437\u044f\u0449\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c Defensive Programming : \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a Progressive Enhancement : \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 Bulkhead Pattern : \u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Health Checks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b Graceful Timeouts : \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b User Feedback : \u0418\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","title":"Best Practices \u0434\u043b\u044f \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b"},{"location":"questions/architecture/resilient-frontend/#_6","text":"Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 WebSockets - \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0435 real-time \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f State Management - \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/architecture/resilient-frontend/#_7","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438 Circuit Breaker, Retry, Bulkhead - \u0417\u043d\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 Service Workers \u0438 PWA \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438? - \u041a\u0430\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u0442\u043a\u0430\u0437\u044b? - \u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c graceful degradation? - \u041a\u0430\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f? - \u041a\u0430\u043a \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/resilient-frontend_small/","text":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f Frontend \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small) \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 Circuit Breaker Pattern class CircuitBreaker { constructor({ failureThreshold = 5, resetTimeout = 60000 } = {}) { this.failureThreshold = failureThreshold; this.resetTimeout = resetTimeout; this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN this.failureCount = 0; this.lastFailureTime = null; } async execute(operation) { if (this.state === 'OPEN') { if (Date.now() - this.lastFailureTime > this.resetTimeout) { this.state = 'HALF_OPEN'; } else { throw new Error('Circuit breaker is OPEN'); } } try { const result = await operation(); this.reset(); return result; } catch (error) { this.recordFailure(); throw error; } } recordFailure() { this.failureCount++; this.lastFailureTime = Date.now(); if (this.failureCount >= this.failureThreshold) { this.state = 'OPEN'; } } reset() { this.state = 'CLOSED'; this.failureCount = 0; } } Retry \u0441 Exponential Backoff class RetryManager { constructor({ maxRetries = 3, baseDelay = 1000, factor = 2 } = {}) { this.maxRetries = maxRetries; this.baseDelay = baseDelay; this.factor = factor; } async execute(operation) { let lastError; for (let attempt = 0; attempt <= this.maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error; if (this.shouldNotRetry(error) || attempt === this.maxRetries) { break; } const delay = this.baseDelay * Math.pow(this.factor, attempt); await this.sleep(delay + Math.random() * 1000); // jitter } } throw lastError; } shouldNotRetry(error) { return error.status >= 400 && error.status < 500; // Client errors } sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } } Resilient HTTP Client class ResilientHttpClient { constructor(options = {}) { this.retryManager = new RetryManager(options.retry); this.circuitBreaker = new CircuitBreaker(options.circuitBreaker); this.timeout = options.timeout || 10000; } async request(url, options = {}) { return this.circuitBreaker.execute(async () => { return this.retryManager.execute(async () => { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), this.timeout); try { const response = await fetch(url, { ...options, signal: controller.signal }); if (!response.ok) { const error = new Error(`HTTP ${response.status}`); error.status = response.status; throw error; } return response.json(); } finally { clearTimeout(timeoutId); } }); }); } } Graceful Degradation Progressive Enhancement Component function WeatherWidget() { const [weather, setWeather] = useState(null); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); useEffect(() => { const handleOnline = () => setIsOnline(navigator.onLine); window.addEventListener('online', handleOnline); window.addEventListener('offline', handleOnline); return () => { window.removeEventListener('online', handleOnline); window.removeEventListener('offline', handleOnline); }; }, []); // Offline state if (!isOnline) { const cached = JSON.parse(localStorage.getItem('weather') || 'null'); return ( <div className=\"weather-offline\"> \ud83d\udcf1 Offline mode {cached && <div>{cached.temp}\u00b0C (cached)</div>} </div> ); } // Error state with fallback if (error && !weather) { return ( <div className=\"weather-error\"> \u26a0\ufe0f Service unavailable <button onClick={() => setError(null)}>Retry</button> </div> ); } return weather ? <div>{weather.temp}\u00b0C</div> : <div>Loading...</div>; } Offline Support Service Worker Caching Strategies // sw.js const cacheStrategies = { cacheFirst: async (request) => { const cached = await caches.match(request); if (cached) return cached; try { const response = await fetch(request); const cache = await caches.open('v1'); cache.put(request, response.clone()); return response; } catch { return caches.match('/offline.html'); } }, networkFirst: async (request) => { try { const response = await fetch(request); const cache = await caches.open('v1'); cache.put(request, response.clone()); return response; } catch { return caches.match(request); } }, staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; self.addEventListener('fetch', (event) => { const url = new URL(event.request.url); if (url.pathname.startsWith('/api/')) { event.respondWith(cacheStrategies.networkFirst(event.request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(cacheStrategies.cacheFirst(event.request)); } else { event.respondWith(cacheStrategies.staleWhileRevalidate(event.request)); } }); Offline Queue class OfflineQueue { constructor() { this.queue = JSON.parse(localStorage.getItem('offlineQueue') || '[]'); this.isOnline = navigator.onLine; window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => this.isOnline = false); } add(request) { const item = { id: crypto.randomUUID(), ...request, timestamp: Date.now(), retryCount: 0 }; this.queue.push(item); this.persist(); if (this.isOnline) this.processQueue(); return item.id; } async processQueue() { if (!this.isOnline) return; const processed = []; for (const item of this.queue) { try { await fetch(item.url, { method: item.method, headers: item.headers, body: item.body }); processed.push(item.id); } catch (error) { if (++item.retryCount >= 3) { processed.push(item.id); } } } this.queue = this.queue.filter(item => !processed.includes(item.id)); this.persist(); } persist() { localStorage.setItem('offlineQueue', JSON.stringify(this.queue)); } } Error Boundaries Advanced Error Boundary class ResilientErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, retryCount: 0 }; } static getDerivedStateFromError() { return { hasError: true }; } componentDidCatch(error, errorInfo) { this.setState(prev => ({ retryCount: prev.retryCount + 1 })); // Log error this.logError(error, errorInfo); // Auto-recovery for chunk load errors if (error.name === 'ChunkLoadError') { setTimeout(() => this.handleRetry(), 2000); } } logError(error, errorInfo) { const report = { message: error.message, stack: error.stack, componentStack: errorInfo.componentStack, timestamp: Date.now(), url: location.href }; // Send to monitoring service fetch('/api/errors', { method: 'POST', body: JSON.stringify(report) }).catch(() => { // Fallback to localStorage const errors = JSON.parse(localStorage.getItem('errors') || '[]'); errors.push(report); localStorage.setItem('errors', JSON.stringify(errors.slice(-50))); }); } handleRetry = () => { this.setState({ hasError: false }); }; render() { if (this.state.hasError) { return ( <div className=\"error-boundary\"> <h2>Something went wrong</h2> {this.state.retryCount < 3 ? ( <button onClick={this.handleRetry}> Retry ({this.state.retryCount}/3) </button> ) : ( <button onClick={() => location.reload()}> Reload Page </button> )} </div> ); } return this.props.children; } } \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c Performance & Error Monitoring class FrontendMonitoring { constructor() { this.metrics = new Map(); this.errors = []; this.setupObservers(); } setupObservers() { // Core Web Vitals new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric(entry.name, entry.value); } }).observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] }); // Error handling window.addEventListener('error', (e) => { this.recordError({ type: 'js-error', message: e.message, filename: e.filename, lineno: e.lineno, stack: e.error?.stack }); }); window.addEventListener('unhandledrejection', (e) => { this.recordError({ type: 'promise-rejection', message: e.reason?.message || String(e.reason), stack: e.reason?.stack }); }); } recordMetric(name, value) { if (!this.metrics.has(name)) this.metrics.set(name, []); this.metrics.get(name).push({ value, timestamp: Date.now() }); // Send critical metrics immediately if (['largest-contentful-paint', 'first-input-delay'].includes(name)) { this.sendMetric(name, value); } } recordError(error) { const enrichedError = { ...error, timestamp: Date.now(), url: location.href, userAgent: navigator.userAgent }; this.errors.push(enrichedError); this.sendError(enrichedError); } async sendMetric(name, value) { try { await fetch('/api/metrics', { method: 'POST', body: JSON.stringify({ name, value, timestamp: Date.now() }) }); } catch (e) { console.warn('Failed to send metric:', e); } } async sendError(error) { try { await fetch('/api/errors', { method: 'POST', body: JSON.stringify(error) }); } catch (e) { // Store in localStorage as fallback const stored = JSON.parse(localStorage.getItem('pendingErrors') || '[]'); stored.push(error); localStorage.setItem('pendingErrors', JSON.stringify(stored)); } } getHealthStatus() { const recentErrors = this.errors.filter( e => Date.now() - e.timestamp < 300000 ); return { status: recentErrors.length > 10 ? 'unhealthy' : 'healthy', errorRate: recentErrors.length, lastError: recentErrors[recentErrors.length - 1] }; } } // React hook const useAppHealth = () => { const [health, setHealth] = useState({ status: 'healthy' }); const monitor = useRef(new FrontendMonitoring()); useEffect(() => { const interval = setInterval(() => { setHealth(monitor.current.getHealthStatus()); }, 30000); return () => clearInterval(interval); }, []); return health; }; Resilient React Hooks Resilient API Hook const useResilientAPI = (url, options = {}) => { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const client = useRef(new ResilientHttpClient({ retry: { maxRetries: 3, baseDelay: 1000 }, circuitBreaker: { failureThreshold: 5 }, timeout: 15000 })); const request = useCallback(async (method = 'GET', body = null) => { setLoading(true); setError(null); try { const result = await client.current.request(url, { method, body }); setData(result); return result; } catch (err) { setError(err.message); throw err; } finally { setLoading(false); } }, [url]); useEffect(() => { if (options.autoFetch !== false) { request(); } }, [request, options.autoFetch]); return { data, loading, error, request }; }; \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 Fail Fast, Recover Gracefully : - \u0411\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b - \u0418\u0437\u044f\u0449\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u0442 \u043e\u0448\u0438\u0431\u043e\u043a - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0439\u0442\u0435 fallback \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c Bulkhead Pattern : - \u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u0442\u043a\u0430\u0437\u044b - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0439\u0442\u0435 blast radius \u043f\u0440\u043e\u0431\u043b\u0435\u043c Progressive Enhancement : - \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 - Graceful degradation \u043f\u0440\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445 Circuit Breaker Benefits : - \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0443 upstream \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f Use Case \u041f\u043b\u044e\u0441\u044b \u041c\u0438\u043d\u0443\u0441\u044b Cache First \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0423\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 Network First API \u0434\u0430\u043d\u043d\u044b\u0435 \u0421\u0432\u0435\u0436\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u043f\u0440\u0438 offline Stale While Revalidate \u041f\u043e\u043b\u0443\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0411\u0430\u043b\u0430\u043d\u0441 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0438 \u0441\u0432\u0435\u0436\u0435\u0441\u0442\u0438 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 Error Recovery Strategies Automatic Recovery : const autoRecoveryErrors = [ 'ChunkLoadError', 'NetworkError', 'TimeoutError' ]; const shouldAutoRecover = (error) => autoRecoveryErrors.some(type => error.name.includes(type)); User-Initiated Recovery : const userRecoveryStrategies = { reload: () => window.location.reload(), retry: (operation) => operation(), skipFeature: () => ({ disabled: true }) }; Best Practices Senior-level Defense in Depth : \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0443\u0440\u043e\u0432\u043d\u0438 \u0437\u0430\u0449\u0438\u0442\u044b Graceful Timeouts : \u0420\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Health Checks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Progressive Loading : \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c Error Budgets : \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0448\u0438\u0431\u043e\u043a Observability : \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043b\u043e\u0433\u0438, \u0442\u0440\u0435\u0439\u0441\u0438\u043d\u0433 Chaos Engineering : \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Circuit Breaker \u0434\u043b\u044f frontend API? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445? \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438? \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u0430\u043b\u0435\u0440\u0442\u0438\u043d\u0433 \u0434\u043b\u044f frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 resilience patterns? Error boundaries vs global error handling?","title":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f Frontend \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small)"},{"location":"questions/architecture/resilient-frontend_small/#frontend-small","text":"","title":"\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f Frontend \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 (small)"},{"location":"questions/architecture/resilient-frontend_small/#_1","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438"},{"location":"questions/architecture/resilient-frontend_small/#circuit-breaker-pattern","text":"class CircuitBreaker { constructor({ failureThreshold = 5, resetTimeout = 60000 } = {}) { this.failureThreshold = failureThreshold; this.resetTimeout = resetTimeout; this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN this.failureCount = 0; this.lastFailureTime = null; } async execute(operation) { if (this.state === 'OPEN') { if (Date.now() - this.lastFailureTime > this.resetTimeout) { this.state = 'HALF_OPEN'; } else { throw new Error('Circuit breaker is OPEN'); } } try { const result = await operation(); this.reset(); return result; } catch (error) { this.recordFailure(); throw error; } } recordFailure() { this.failureCount++; this.lastFailureTime = Date.now(); if (this.failureCount >= this.failureThreshold) { this.state = 'OPEN'; } } reset() { this.state = 'CLOSED'; this.failureCount = 0; } }","title":"Circuit Breaker Pattern"},{"location":"questions/architecture/resilient-frontend_small/#retry-exponential-backoff","text":"class RetryManager { constructor({ maxRetries = 3, baseDelay = 1000, factor = 2 } = {}) { this.maxRetries = maxRetries; this.baseDelay = baseDelay; this.factor = factor; } async execute(operation) { let lastError; for (let attempt = 0; attempt <= this.maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error; if (this.shouldNotRetry(error) || attempt === this.maxRetries) { break; } const delay = this.baseDelay * Math.pow(this.factor, attempt); await this.sleep(delay + Math.random() * 1000); // jitter } } throw lastError; } shouldNotRetry(error) { return error.status >= 400 && error.status < 500; // Client errors } sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } }","title":"Retry \u0441 Exponential Backoff"},{"location":"questions/architecture/resilient-frontend_small/#resilient-http-client","text":"class ResilientHttpClient { constructor(options = {}) { this.retryManager = new RetryManager(options.retry); this.circuitBreaker = new CircuitBreaker(options.circuitBreaker); this.timeout = options.timeout || 10000; } async request(url, options = {}) { return this.circuitBreaker.execute(async () => { return this.retryManager.execute(async () => { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), this.timeout); try { const response = await fetch(url, { ...options, signal: controller.signal }); if (!response.ok) { const error = new Error(`HTTP ${response.status}`); error.status = response.status; throw error; } return response.json(); } finally { clearTimeout(timeoutId); } }); }); } }","title":"Resilient HTTP Client"},{"location":"questions/architecture/resilient-frontend_small/#graceful-degradation","text":"","title":"Graceful Degradation"},{"location":"questions/architecture/resilient-frontend_small/#progressive-enhancement-component","text":"function WeatherWidget() { const [weather, setWeather] = useState(null); const [error, setError] = useState(null); const [isOnline, setIsOnline] = useState(navigator.onLine); useEffect(() => { const handleOnline = () => setIsOnline(navigator.onLine); window.addEventListener('online', handleOnline); window.addEventListener('offline', handleOnline); return () => { window.removeEventListener('online', handleOnline); window.removeEventListener('offline', handleOnline); }; }, []); // Offline state if (!isOnline) { const cached = JSON.parse(localStorage.getItem('weather') || 'null'); return ( <div className=\"weather-offline\"> \ud83d\udcf1 Offline mode {cached && <div>{cached.temp}\u00b0C (cached)</div>} </div> ); } // Error state with fallback if (error && !weather) { return ( <div className=\"weather-error\"> \u26a0\ufe0f Service unavailable <button onClick={() => setError(null)}>Retry</button> </div> ); } return weather ? <div>{weather.temp}\u00b0C</div> : <div>Loading...</div>; }","title":"Progressive Enhancement Component"},{"location":"questions/architecture/resilient-frontend_small/#offline-support","text":"","title":"Offline Support"},{"location":"questions/architecture/resilient-frontend_small/#service-worker-caching-strategies","text":"// sw.js const cacheStrategies = { cacheFirst: async (request) => { const cached = await caches.match(request); if (cached) return cached; try { const response = await fetch(request); const cache = await caches.open('v1'); cache.put(request, response.clone()); return response; } catch { return caches.match('/offline.html'); } }, networkFirst: async (request) => { try { const response = await fetch(request); const cache = await caches.open('v1'); cache.put(request, response.clone()); return response; } catch { return caches.match(request); } }, staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; self.addEventListener('fetch', (event) => { const url = new URL(event.request.url); if (url.pathname.startsWith('/api/')) { event.respondWith(cacheStrategies.networkFirst(event.request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(cacheStrategies.cacheFirst(event.request)); } else { event.respondWith(cacheStrategies.staleWhileRevalidate(event.request)); } });","title":"Service Worker Caching Strategies"},{"location":"questions/architecture/resilient-frontend_small/#offline-queue","text":"class OfflineQueue { constructor() { this.queue = JSON.parse(localStorage.getItem('offlineQueue') || '[]'); this.isOnline = navigator.onLine; window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => this.isOnline = false); } add(request) { const item = { id: crypto.randomUUID(), ...request, timestamp: Date.now(), retryCount: 0 }; this.queue.push(item); this.persist(); if (this.isOnline) this.processQueue(); return item.id; } async processQueue() { if (!this.isOnline) return; const processed = []; for (const item of this.queue) { try { await fetch(item.url, { method: item.method, headers: item.headers, body: item.body }); processed.push(item.id); } catch (error) { if (++item.retryCount >= 3) { processed.push(item.id); } } } this.queue = this.queue.filter(item => !processed.includes(item.id)); this.persist(); } persist() { localStorage.setItem('offlineQueue', JSON.stringify(this.queue)); } }","title":"Offline Queue"},{"location":"questions/architecture/resilient-frontend_small/#error-boundaries","text":"","title":"Error Boundaries"},{"location":"questions/architecture/resilient-frontend_small/#advanced-error-boundary","text":"class ResilientErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, retryCount: 0 }; } static getDerivedStateFromError() { return { hasError: true }; } componentDidCatch(error, errorInfo) { this.setState(prev => ({ retryCount: prev.retryCount + 1 })); // Log error this.logError(error, errorInfo); // Auto-recovery for chunk load errors if (error.name === 'ChunkLoadError') { setTimeout(() => this.handleRetry(), 2000); } } logError(error, errorInfo) { const report = { message: error.message, stack: error.stack, componentStack: errorInfo.componentStack, timestamp: Date.now(), url: location.href }; // Send to monitoring service fetch('/api/errors', { method: 'POST', body: JSON.stringify(report) }).catch(() => { // Fallback to localStorage const errors = JSON.parse(localStorage.getItem('errors') || '[]'); errors.push(report); localStorage.setItem('errors', JSON.stringify(errors.slice(-50))); }); } handleRetry = () => { this.setState({ hasError: false }); }; render() { if (this.state.hasError) { return ( <div className=\"error-boundary\"> <h2>Something went wrong</h2> {this.state.retryCount < 3 ? ( <button onClick={this.handleRetry}> Retry ({this.state.retryCount}/3) </button> ) : ( <button onClick={() => location.reload()}> Reload Page </button> )} </div> ); } return this.props.children; } }","title":"Advanced Error Boundary"},{"location":"questions/architecture/resilient-frontend_small/#_2","text":"","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/resilient-frontend_small/#performance-error-monitoring","text":"class FrontendMonitoring { constructor() { this.metrics = new Map(); this.errors = []; this.setupObservers(); } setupObservers() { // Core Web Vitals new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric(entry.name, entry.value); } }).observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] }); // Error handling window.addEventListener('error', (e) => { this.recordError({ type: 'js-error', message: e.message, filename: e.filename, lineno: e.lineno, stack: e.error?.stack }); }); window.addEventListener('unhandledrejection', (e) => { this.recordError({ type: 'promise-rejection', message: e.reason?.message || String(e.reason), stack: e.reason?.stack }); }); } recordMetric(name, value) { if (!this.metrics.has(name)) this.metrics.set(name, []); this.metrics.get(name).push({ value, timestamp: Date.now() }); // Send critical metrics immediately if (['largest-contentful-paint', 'first-input-delay'].includes(name)) { this.sendMetric(name, value); } } recordError(error) { const enrichedError = { ...error, timestamp: Date.now(), url: location.href, userAgent: navigator.userAgent }; this.errors.push(enrichedError); this.sendError(enrichedError); } async sendMetric(name, value) { try { await fetch('/api/metrics', { method: 'POST', body: JSON.stringify({ name, value, timestamp: Date.now() }) }); } catch (e) { console.warn('Failed to send metric:', e); } } async sendError(error) { try { await fetch('/api/errors', { method: 'POST', body: JSON.stringify(error) }); } catch (e) { // Store in localStorage as fallback const stored = JSON.parse(localStorage.getItem('pendingErrors') || '[]'); stored.push(error); localStorage.setItem('pendingErrors', JSON.stringify(stored)); } } getHealthStatus() { const recentErrors = this.errors.filter( e => Date.now() - e.timestamp < 300000 ); return { status: recentErrors.length > 10 ? 'unhealthy' : 'healthy', errorRate: recentErrors.length, lastError: recentErrors[recentErrors.length - 1] }; } } // React hook const useAppHealth = () => { const [health, setHealth] = useState({ status: 'healthy' }); const monitor = useRef(new FrontendMonitoring()); useEffect(() => { const interval = setInterval(() => { setHealth(monitor.current.getHealthStatus()); }, 30000); return () => clearInterval(interval); }, []); return health; };","title":"Performance &amp; Error Monitoring"},{"location":"questions/architecture/resilient-frontend_small/#resilient-react-hooks","text":"","title":"Resilient React Hooks"},{"location":"questions/architecture/resilient-frontend_small/#resilient-api-hook","text":"const useResilientAPI = (url, options = {}) => { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const client = useRef(new ResilientHttpClient({ retry: { maxRetries: 3, baseDelay: 1000 }, circuitBreaker: { failureThreshold: 5 }, timeout: 15000 })); const request = useCallback(async (method = 'GET', body = null) => { setLoading(true); setError(null); try { const result = await client.current.request(url, { method, body }); setData(result); return result; } catch (err) { setError(err.message); throw err; } finally { setLoading(false); } }, [url]); useEffect(() => { if (options.autoFetch !== false) { request(); } }, [request, options.autoFetch]); return { data, loading, error, request }; };","title":"Resilient API Hook"},{"location":"questions/architecture/resilient-frontend_small/#_3","text":"Fail Fast, Recover Gracefully : - \u0411\u044b\u0441\u0442\u0440\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b - \u0418\u0437\u044f\u0449\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u0442 \u043e\u0448\u0438\u0431\u043e\u043a - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0439\u0442\u0435 fallback \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c Bulkhead Pattern : - \u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u0442\u043a\u0430\u0437\u044b - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0439\u0442\u0435 blast radius \u043f\u0440\u043e\u0431\u043b\u0435\u043c Progressive Enhancement : - \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 - Graceful degradation \u043f\u0440\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445 Circuit Breaker Benefits : - \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0443 upstream \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438"},{"location":"questions/architecture/resilient-frontend_small/#_4","text":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f Use Case \u041f\u043b\u044e\u0441\u044b \u041c\u0438\u043d\u0443\u0441\u044b Cache First \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0423\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 Network First API \u0434\u0430\u043d\u043d\u044b\u0435 \u0421\u0432\u0435\u0436\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u043f\u0440\u0438 offline Stale While Revalidate \u041f\u043e\u043b\u0443\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0411\u0430\u043b\u0430\u043d\u0441 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0438 \u0441\u0432\u0435\u0436\u0435\u0441\u0442\u0438 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/resilient-frontend_small/#error-recovery-strategies","text":"Automatic Recovery : const autoRecoveryErrors = [ 'ChunkLoadError', 'NetworkError', 'TimeoutError' ]; const shouldAutoRecover = (error) => autoRecoveryErrors.some(type => error.name.includes(type)); User-Initiated Recovery : const userRecoveryStrategies = { reload: () => window.location.reload(), retry: (operation) => operation(), skipFeature: () => ({ disabled: true }) };","title":"Error Recovery Strategies"},{"location":"questions/architecture/resilient-frontend_small/#best-practices-senior-level","text":"Defense in Depth : \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0443\u0440\u043e\u0432\u043d\u0438 \u0437\u0430\u0449\u0438\u0442\u044b Graceful Timeouts : \u0420\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Health Checks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Progressive Loading : \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c Error Budgets : \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0448\u0438\u0431\u043e\u043a Observability : \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043b\u043e\u0433\u0438, \u0442\u0440\u0435\u0439\u0441\u0438\u043d\u0433 Chaos Engineering : \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438","title":"Best Practices Senior-level"},{"location":"questions/architecture/resilient-frontend_small/#senior","text":"\u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Circuit Breaker \u0434\u043b\u044f frontend API? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445? \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438? \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u0430\u043b\u0435\u0440\u0442\u0438\u043d\u0433 \u0434\u043b\u044f frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 resilience patterns? Error boundaries vs global error handling?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/architecture/state-management/","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u044b\u0445 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u044b\u0431\u043e\u0440 \u043c\u0435\u0436\u0434\u0443 Redux, Context API, Zustand \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c Redux \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f - \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 DevTools - Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0430 - Time travel debugging - \u0421\u0442\u0440\u043e\u0433\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041c\u043d\u043e\u0433\u043e boilerplate \u043a\u043e\u0434\u0430 - \u041a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f - Overkill \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 // Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 import { createSlice, configureStore } from '@reduxjs/toolkit'; const userSlice = createSlice({ name: 'user', initialState: { profile: null, loading: false, error: null, }, reducers: { setLoading: (state, action) => { state.loading = action.payload; }, setUser: (state, action) => { state.profile = action.payload; state.loading = false; state.error = null; }, setError: (state, action) => { state.error = action.payload; state.loading = false; }, }, }); // Async thunk \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 export const fetchUser = createAsyncThunk( 'user/fetchUser', async (userId, { rejectWithValue }) => { try { const response = await api.getUser(userId); return response.data; } catch (error) { return rejectWithValue(error.response.data); } } ); const store = configureStore({ reducer: { user: userSlice.reducer, }, middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: { ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], }, }), }); Context API + useReducer \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u0412\u0441\u0442\u0440\u043e\u0435\u043d \u0432 React - \u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438 \u0447\u0430\u0441\u0442\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u0445 - \u041d\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 DevTools - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 // \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441 Context API const UserContext = createContext(); const UserDispatchContext = createContext(); function userReducer(state, action) { switch (action.type) { case 'SET_LOADING': return { ...state, loading: action.payload }; case 'SET_USER': return { ...state, profile: action.payload, loading: false, error: null, }; case 'SET_ERROR': return { ...state, error: action.payload, loading: false, }; default: throw new Error(`Unknown action: ${action.type}`); } } export function UserProvider({ children }) { const [state, dispatch] = useReducer(userReducer, { profile: null, loading: false, error: null, }); return ( <UserContext.Provider value={state}> <UserDispatchContext.Provider value={dispatch}> {children} </UserDispatchContext.Provider> </UserContext.Provider> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f export function useUser() { const context = useContext(UserContext); if (context === undefined) { throw new Error('useUser must be used within a UserProvider'); } return context; } export function useUserDispatch() { const context = useContext(UserDispatchContext); if (context === undefined) { throw new Error('useUserDispatch must be used within a UserProvider'); } return context; } Zustand \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 boilerplate - TypeScript \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 - \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f import { create } from 'zustand'; import { devtools, persist } from 'zustand/middleware'; const useUserStore = create( devtools( persist( (set, get) => ({ profile: null, loading: false, error: null, setLoading: (loading) => set({ loading }), setUser: (profile) => set({ profile, loading: false, error: null, }), setError: (error) => set({ error, loading: false, }), fetchUser: async (userId) => { set({ loading: true }); try { const user = await api.getUser(userId); get().setUser(user); } catch (error) { get().setError(error.message); } }, reset: () => set({ profile: null, loading: false, error: null, }), }), { name: 'user-storage', partialize: (state) => ({ profile: state.profile }), } ) ) ); \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Flux Architecture // \u041e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 // Action -> Dispatcher -> Store -> View -> Action // Actions const UserActions = { FETCH_USER_REQUEST: 'FETCH_USER_REQUEST', FETCH_USER_SUCCESS: 'FETCH_USER_SUCCESS', FETCH_USER_FAILURE: 'FETCH_USER_FAILURE', }; // Action Creators const fetchUser = (userId) => async (dispatch) => { dispatch({ type: UserActions.FETCH_USER_REQUEST }); try { const user = await api.getUser(userId); dispatch({ type: UserActions.FETCH_USER_SUCCESS, payload: user, }); } catch (error) { dispatch({ type: UserActions.FETCH_USER_FAILURE, payload: error.message, }); } }; CQRS (Command Query Responsibility Segregation) // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserCommands { constructor(store) { this.store = store; } async updateProfile(userId, data) { this.store.dispatch({ type: 'UPDATE_PROFILE_START' }); try { await api.updateUser(userId, data); this.store.dispatch({ type: 'UPDATE_PROFILE_SUCCESS', payload: { userId, data }, }); } catch (error) { this.store.dispatch({ type: 'UPDATE_PROFILE_ERROR', payload: error.message, }); } } } class UserQueries { constructor(store) { this.store = store; } getUser(userId) { return this.store.getState().users.entities[userId]; } getUsersList() { return Object.values(this.store.getState().users.entities); } isUserLoading(userId) { return this.store.getState().users.loading[userId] || false; } } \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 // \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const normalizedState = { users: { byId: { '1': { id: '1', name: 'John', posts: ['1', '2'] }, '2': { id: '2', name: 'Jane', posts: ['3'] }, }, allIds: ['1', '2'], }, posts: { byId: { '1': { id: '1', title: 'Post 1', authorId: '1' }, '2': { id: '2', title: 'Post 2', authorId: '1' }, '3': { id: '3', title: 'Post 3', authorId: '2' }, }, allIds: ['1', '2', '3'], }, }; // \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0434\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 const selectUserWithPosts = createSelector( [selectUserById, selectAllPosts], (user, posts) => ({ ...user, posts: user.posts.map(postId => posts[postId]), }) ); \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u043e\u0432 import { createSelector } from '@reduxjs/toolkit'; // \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b const selectUsers = (state) => state.users.byId; const selectUserIds = (state) => state.users.allIds; const selectFilter = (state) => state.ui.userFilter; // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b const selectFilteredUsers = createSelector( [selectUsers, selectUserIds, selectFilter], (users, userIds, filter) => { if (!filter) return userIds.map(id => users[id]); return userIds .map(id => users[id]) .filter(user => user.name.toLowerCase().includes(filter.toLowerCase()) ); } ); Subscription \u043f\u0430\u0442\u0442\u0435\u0440\u043d // \u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 Context API function createSubscription() { const listeners = new Set(); return { subscribe: (callback) => { listeners.add(callback); return () => listeners.delete(callback); }, notify: (data) => { listeners.forEach(callback => callback(data)); }, }; } // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 const StateContext = createContext(); function StateProvider({ children }) { const [state, setState] = useState(initialState); const subscription = useMemo(() => createSubscription(), []); const updateState = useCallback((newState) => { setState(newState); subscription.notify(newState); }, [subscription]); return ( <StateContext.Provider value={{ state, updateState, subscription }}> {children} </StateContext.Provider> ); } Middleware \u0438 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b Redux Saga import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'; function* fetchUserSaga(action) { try { yield put({ type: 'FETCH_USER_REQUEST' }); const user = yield call(api.getUser, action.payload.userId); yield put({ type: 'FETCH_USER_SUCCESS', payload: user }); } catch (error) { yield put({ type: 'FETCH_USER_FAILURE', payload: error.message }); } } function* watchFetchUser() { yield takeLatest('FETCH_USER', fetchUserSaga); } function* rootSaga() { yield all([ watchFetchUser(), // \u0434\u0440\u0443\u0433\u0438\u0435 watchers... ]); } Custom Middleware const apiMiddleware = (store) => (next) => (action) => { if (action.type?.endsWith('_REQUEST')) { // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 console.log('API Request:', action); } return next(action); }; const errorMiddleware = (store) => (next) => (action) => { const result = next(action); if (action.error) { // \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a console.error('Error occurred:', action.payload); // \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c toast notification } return result; }; \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0443 \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f : \u041c\u0430\u043b\u044b\u0435: useState + Context API \u0421\u0440\u0435\u0434\u043d\u0438\u0435: Zustand \u0438\u043b\u0438 Context API + useReducer \u0411\u043e\u043b\u044c\u0448\u0438\u0435: Redux Toolkit \u041a\u043e\u043c\u0430\u043d\u0434\u0430 : \u0414\u0436\u0443\u043d\u0438\u043e\u0440\u044b: Context API \u041c\u0438\u043a\u0441\u043e\u0432\u0430\u043d\u043d\u0430\u044f: Zustand \u041e\u043f\u044b\u0442\u043d\u0430\u044f: Redux \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f : DevTools: Redux \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430: Zustand TypeScript: Zustand \u0438\u043b\u0438 Redux Toolkit SSR: \u043b\u044e\u0431\u043e\u0435 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439 Best Practices \u0414\u0435\u0440\u0436\u0438\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c : \u041f\u043e\u0434\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 : \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b : \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 UI \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 : \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 UI \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 : \u0414\u0435\u043b\u0430\u0439\u0442\u0435 reducers \u0438 actions \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c\u0438 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React Context API - Context API \u0432 \u0434\u0435\u0442\u0430\u043b\u044f\u0445 Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 trade-offs \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 state management \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 middleware \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Redux vs Context API? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Context API? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c state management \u043b\u043e\u0433\u0438\u043a\u0443? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445?","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c"},{"location":"questions/architecture/state-management/#_1","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c"},{"location":"questions/architecture/state-management/#_2","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u044b\u0445 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u044b\u0431\u043e\u0440 \u043c\u0435\u0436\u0434\u0443 Redux, Context API, Zustand \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/state-management/#_3","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/state-management/#_4","text":"","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c"},{"location":"questions/architecture/state-management/#redux","text":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f - \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 DevTools - Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0430 - Time travel debugging - \u0421\u0442\u0440\u043e\u0433\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041c\u043d\u043e\u0433\u043e boilerplate \u043a\u043e\u0434\u0430 - \u041a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f - Overkill \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 // Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 import { createSlice, configureStore } from '@reduxjs/toolkit'; const userSlice = createSlice({ name: 'user', initialState: { profile: null, loading: false, error: null, }, reducers: { setLoading: (state, action) => { state.loading = action.payload; }, setUser: (state, action) => { state.profile = action.payload; state.loading = false; state.error = null; }, setError: (state, action) => { state.error = action.payload; state.loading = false; }, }, }); // Async thunk \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 export const fetchUser = createAsyncThunk( 'user/fetchUser', async (userId, { rejectWithValue }) => { try { const response = await api.getUser(userId); return response.data; } catch (error) { return rejectWithValue(error.response.data); } } ); const store = configureStore({ reducer: { user: userSlice.reducer, }, middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: { ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], }, }), });","title":"Redux"},{"location":"questions/architecture/state-management/#context-api-usereducer","text":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u0412\u0441\u0442\u0440\u043e\u0435\u043d \u0432 React - \u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438 \u0447\u0430\u0441\u0442\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u0445 - \u041d\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 DevTools - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 // \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441 Context API const UserContext = createContext(); const UserDispatchContext = createContext(); function userReducer(state, action) { switch (action.type) { case 'SET_LOADING': return { ...state, loading: action.payload }; case 'SET_USER': return { ...state, profile: action.payload, loading: false, error: null, }; case 'SET_ERROR': return { ...state, error: action.payload, loading: false, }; default: throw new Error(`Unknown action: ${action.type}`); } } export function UserProvider({ children }) { const [state, dispatch] = useReducer(userReducer, { profile: null, loading: false, error: null, }); return ( <UserContext.Provider value={state}> <UserDispatchContext.Provider value={dispatch}> {children} </UserDispatchContext.Provider> </UserContext.Provider> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f export function useUser() { const context = useContext(UserContext); if (context === undefined) { throw new Error('useUser must be used within a UserProvider'); } return context; } export function useUserDispatch() { const context = useContext(UserDispatchContext); if (context === undefined) { throw new Error('useUserDispatch must be used within a UserProvider'); } return context; }","title":"Context API + useReducer"},{"location":"questions/architecture/state-management/#zustand","text":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 boilerplate - TypeScript \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 - \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f import { create } from 'zustand'; import { devtools, persist } from 'zustand/middleware'; const useUserStore = create( devtools( persist( (set, get) => ({ profile: null, loading: false, error: null, setLoading: (loading) => set({ loading }), setUser: (profile) => set({ profile, loading: false, error: null, }), setError: (error) => set({ error, loading: false, }), fetchUser: async (userId) => { set({ loading: true }); try { const user = await api.getUser(userId); get().setUser(user); } catch (error) { get().setError(error.message); } }, reset: () => set({ profile: null, loading: false, error: null, }), }), { name: 'user-storage', partialize: (state) => ({ profile: state.profile }), } ) ) );","title":"Zustand"},{"location":"questions/architecture/state-management/#_5","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/architecture/state-management/#flux-architecture","text":"// \u041e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 // Action -> Dispatcher -> Store -> View -> Action // Actions const UserActions = { FETCH_USER_REQUEST: 'FETCH_USER_REQUEST', FETCH_USER_SUCCESS: 'FETCH_USER_SUCCESS', FETCH_USER_FAILURE: 'FETCH_USER_FAILURE', }; // Action Creators const fetchUser = (userId) => async (dispatch) => { dispatch({ type: UserActions.FETCH_USER_REQUEST }); try { const user = await api.getUser(userId); dispatch({ type: UserActions.FETCH_USER_SUCCESS, payload: user, }); } catch (error) { dispatch({ type: UserActions.FETCH_USER_FAILURE, payload: error.message, }); } };","title":"Flux Architecture"},{"location":"questions/architecture/state-management/#cqrs-command-query-responsibility-segregation","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserCommands { constructor(store) { this.store = store; } async updateProfile(userId, data) { this.store.dispatch({ type: 'UPDATE_PROFILE_START' }); try { await api.updateUser(userId, data); this.store.dispatch({ type: 'UPDATE_PROFILE_SUCCESS', payload: { userId, data }, }); } catch (error) { this.store.dispatch({ type: 'UPDATE_PROFILE_ERROR', payload: error.message, }); } } } class UserQueries { constructor(store) { this.store = store; } getUser(userId) { return this.store.getState().users.entities[userId]; } getUsersList() { return Object.values(this.store.getState().users.entities); } isUserLoading(userId) { return this.store.getState().users.loading[userId] || false; } }","title":"CQRS (Command Query Responsibility Segregation)"},{"location":"questions/architecture/state-management/#_6","text":"// \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const normalizedState = { users: { byId: { '1': { id: '1', name: 'John', posts: ['1', '2'] }, '2': { id: '2', name: 'Jane', posts: ['3'] }, }, allIds: ['1', '2'], }, posts: { byId: { '1': { id: '1', title: 'Post 1', authorId: '1' }, '2': { id: '2', title: 'Post 2', authorId: '1' }, '3': { id: '3', title: 'Post 3', authorId: '2' }, }, allIds: ['1', '2', '3'], }, }; // \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0434\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 const selectUserWithPosts = createSelector( [selectUserById, selectAllPosts], (user, posts) => ({ ...user, posts: user.posts.map(postId => posts[postId]), }) );","title":"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/architecture/state-management/#_7","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/architecture/state-management/#_8","text":"import { createSelector } from '@reduxjs/toolkit'; // \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b const selectUsers = (state) => state.users.byId; const selectUserIds = (state) => state.users.allIds; const selectFilter = (state) => state.ui.userFilter; // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b const selectFilteredUsers = createSelector( [selectUsers, selectUserIds, selectFilter], (users, userIds, filter) => { if (!filter) return userIds.map(id => users[id]); return userIds .map(id => users[id]) .filter(user => user.name.toLowerCase().includes(filter.toLowerCase()) ); } );","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u043e\u0432"},{"location":"questions/architecture/state-management/#subscription","text":"// \u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 Context API function createSubscription() { const listeners = new Set(); return { subscribe: (callback) => { listeners.add(callback); return () => listeners.delete(callback); }, notify: (data) => { listeners.forEach(callback => callback(data)); }, }; } // \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 const StateContext = createContext(); function StateProvider({ children }) { const [state, setState] = useState(initialState); const subscription = useMemo(() => createSubscription(), []); const updateState = useCallback((newState) => { setState(newState); subscription.notify(newState); }, [subscription]); return ( <StateContext.Provider value={{ state, updateState, subscription }}> {children} </StateContext.Provider> ); }","title":"Subscription \u043f\u0430\u0442\u0442\u0435\u0440\u043d"},{"location":"questions/architecture/state-management/#middleware","text":"","title":"Middleware \u0438 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b"},{"location":"questions/architecture/state-management/#redux-saga","text":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'; function* fetchUserSaga(action) { try { yield put({ type: 'FETCH_USER_REQUEST' }); const user = yield call(api.getUser, action.payload.userId); yield put({ type: 'FETCH_USER_SUCCESS', payload: user }); } catch (error) { yield put({ type: 'FETCH_USER_FAILURE', payload: error.message }); } } function* watchFetchUser() { yield takeLatest('FETCH_USER', fetchUserSaga); } function* rootSaga() { yield all([ watchFetchUser(), // \u0434\u0440\u0443\u0433\u0438\u0435 watchers... ]); }","title":"Redux Saga"},{"location":"questions/architecture/state-management/#custom-middleware","text":"const apiMiddleware = (store) => (next) => (action) => { if (action.type?.endsWith('_REQUEST')) { // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 console.log('API Request:', action); } return next(action); }; const errorMiddleware = (store) => (next) => (action) => { const result = next(action); if (action.error) { // \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a console.error('Error occurred:', action.payload); // \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c toast notification } return result; };","title":"Custom Middleware"},{"location":"questions/architecture/state-management/#_9","text":"","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0443"},{"location":"questions/architecture/state-management/#_10","text":"\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f : \u041c\u0430\u043b\u044b\u0435: useState + Context API \u0421\u0440\u0435\u0434\u043d\u0438\u0435: Zustand \u0438\u043b\u0438 Context API + useReducer \u0411\u043e\u043b\u044c\u0448\u0438\u0435: Redux Toolkit \u041a\u043e\u043c\u0430\u043d\u0434\u0430 : \u0414\u0436\u0443\u043d\u0438\u043e\u0440\u044b: Context API \u041c\u0438\u043a\u0441\u043e\u0432\u0430\u043d\u043d\u0430\u044f: Zustand \u041e\u043f\u044b\u0442\u043d\u0430\u044f: Redux \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f : DevTools: Redux \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430: Zustand TypeScript: Zustand \u0438\u043b\u0438 Redux Toolkit SSR: \u043b\u044e\u0431\u043e\u0435 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439","title":"\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"questions/architecture/state-management/#best-practices","text":"\u0414\u0435\u0440\u0436\u0438\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c : \u041f\u043e\u0434\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 : \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b : \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 UI \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 : \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 UI \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 : \u0414\u0435\u043b\u0430\u0439\u0442\u0435 reducers \u0438 actions \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c\u0438","title":"Best Practices"},{"location":"questions/architecture/state-management/#_11","text":"Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React Context API - Context API \u0432 \u0434\u0435\u0442\u0430\u043b\u044f\u0445 Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/architecture/state-management/#_12","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 trade-offs \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 state management \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - \u041e\u043f\u044b\u0442 \u0441 middleware \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Redux vs Context API? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Context API? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c state management \u043b\u043e\u0433\u0438\u043a\u0443? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/state-management_small/","text":"State Management Architecture - Senior Cheat Sheet (small) \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 Redux Context API Zustand Boilerplate \u041c\u043d\u043e\u0433\u043e \u0421\u0440\u0435\u0434\u043d\u0435 \u041c\u0438\u043d\u0438\u043c\u0443\u043c DevTools \u2705 \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u274c \u2705 Performance \u2705 \u274c (re-renders) \u2705 Learning Curve \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f TypeScript \u0425\u043e\u0440\u043e\u0448\u043e \u0421\u0440\u0435\u0434\u043d\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705 \u0421\u043b\u043e\u0436\u043d\u043e \u2705 Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Async thunk const fetchUser = createAsyncThunk( 'user/fetchUser', async (userId, { rejectWithValue }) => { try { const response = await api.getUser(userId); return response.data; } catch (error) { return rejectWithValue(error.response.data); } } ); // Slice const userSlice = createSlice({ name: 'user', initialState: { profile: null, loading: false, error: null }, reducers: { setUser: (state, action) => { state.profile = action.payload; }, clearUser: (state) => { state.profile = null; } }, extraReducers: (builder) => { builder .addCase(fetchUser.pending, (state) => { state.loading = true; }) .addCase(fetchUser.fulfilled, (state, action) => { state.loading = false; state.profile = action.payload; }) .addCase(fetchUser.rejected, (state, action) => { state.loading = false; state.error = action.payload; }); } }); Context API + useReducer // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 dispatch const UserContext = createContext(); const UserDispatchContext = createContext(); function userReducer(state, action) { switch (action.type) { case 'SET_USER': return { ...state, profile: action.payload, loading: false }; case 'SET_LOADING': return { ...state, loading: action.payload }; default: return state; } } export function UserProvider({ children }) { const [state, dispatch] = useReducer(userReducer, { profile: null, loading: false, error: null }); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f performance const value = useMemo(() => state, [state]); const dispatchValue = useMemo(() => dispatch, [dispatch]); return ( <UserContext.Provider value={value}> <UserDispatchContext.Provider value={dispatchValue}> {children} </UserDispatchContext.Provider> </UserContext.Provider> ); } // Custom hooks export const useUser = () => { const context = useContext(UserContext); if (!context) throw new Error('useUser must be used within UserProvider'); return context; }; Zustand - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 import { create } from 'zustand'; import { devtools, persist } from 'zustand/middleware'; const useUserStore = create( devtools( persist( (set, get) => ({ // State profile: null, loading: false, error: null, // Actions setUser: (profile) => set({ profile, loading: false, error: null }), setLoading: (loading) => set({ loading }), setError: (error) => set({ error, loading: false }), // Async actions fetchUser: async (userId) => { set({ loading: true }); try { const user = await api.getUser(userId); get().setUser(user); } catch (error) { get().setError(error.message); } }, reset: () => set({ profile: null, loading: false, error: null }) }), { name: 'user-storage', partialize: (state) => ({ profile: state.profile }) } ) ) ); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserProfile() { const { profile, loading, fetchUser } = useUserStore(); useEffect(() => { fetchUser(userId); }, [fetchUser, userId]); return loading ? <Spinner /> : <div>{profile?.name}</div>; } \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Flux Architecture // \u041e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a: Action -> Dispatcher -> Store -> View const UserActions = { FETCH_USER: 'FETCH_USER', SET_USER: 'SET_USER' }; // Action creators const fetchUser = (userId) => async (dispatch) => { dispatch({ type: 'FETCH_USER_REQUEST' }); try { const user = await api.getUser(userId); dispatch({ type: 'FETCH_USER_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'FETCH_USER_ERROR', payload: error.message }); } }; CQRS \u043f\u0430\u0442\u0442\u0435\u0440\u043d // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserCommands { constructor(store) { this.store = store; } async updateProfile(userId, data) { this.store.dispatch({ type: 'UPDATE_PROFILE_START' }); try { await api.updateUser(userId, data); this.store.dispatch({ type: 'UPDATE_PROFILE_SUCCESS', payload: data }); } catch (error) { this.store.dispatch({ type: 'UPDATE_PROFILE_ERROR', payload: error }); } } } class UserQueries { constructor(store) { this.store = store; } getUser(userId) { return this.store.getState().users.byId[userId]; } getAllUsers() { return Object.values(this.store.getState().users.byId); } } \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 // \u274c \u041f\u043b\u043e\u0445\u043e - nested \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 const badState = { posts: [ { id: 1, title: 'Post 1', author: { id: 1, name: 'John' }, comments: [{ id: 1, text: 'Comment 1', author: { id: 1, name: 'John' } }] } ] }; // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 const normalizedState = { users: { byId: { '1': { id: '1', name: 'John' } }, allIds: ['1'] }, posts: { byId: { '1': { id: '1', title: 'Post 1', authorId: '1' } }, allIds: ['1'] }, comments: { byId: { '1': { id: '1', text: 'Comment 1', postId: '1', authorId: '1' } }, allIds: ['1'] } }; Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b import { createSelector } from '@reduxjs/toolkit'; const selectUsers = (state) => state.users.byId; const selectFilter = (state) => state.ui.filter; const selectFilteredUsers = createSelector( [selectUsers, selectFilter], (users, filter) => { if (!filter) return Object.values(users); return Object.values(users).filter(user => user.name.toLowerCase().includes(filter.toLowerCase()) ); } ); Context \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 const UserDataContext = createContext(); // \u0420\u0435\u0434\u043a\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f const UserUIContext = createContext(); // \u0427\u0430\u0441\u0442\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f // Subscription \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f Context function createContextSubscription() { const subscribers = new Set(); return { subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); }, notify: (data) => subscribers.forEach(cb => cb(data)) }; } Middleware \u0434\u043b\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 Custom middleware const apiMiddleware = (store) => (next) => (action) => { if (action.meta?.api) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 handleApiCall(action, store.dispatch); } return next(action); }; const loggerMiddleware = (store) => (next) => (action) => { console.group(`Action: ${action.type}`); console.log('Previous State:', store.getState()); const result = next(action); console.log('Next State:', store.getState()); console.groupEnd(); return result; }; \u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Redux - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 - \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 Time travel debugging \u043d\u0443\u0436\u0435\u043d Middleware \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f side effects DevTools \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b Context API - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0422\u0435\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 UI \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041d\u0435\u0442 \u0447\u0430\u0441\u0442\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 Zustand - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: \u0421\u0440\u0435\u0434\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b TypeScript \u043f\u0440\u043e\u0435\u043a\u0442\u044b - \u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041c\u0438\u043d\u0438\u043c\u0443\u043c boilerplate Senior Rules \u0414\u0435\u0440\u0436\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c - \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 nested \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 UI \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u0440\u0430\u0437\u043d\u044b\u0435 stores/contexts \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b - \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e - reducers \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u0442\u044b\u043c\u0438 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 DevTools \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b - \u0434\u043b\u044f debugging \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0435 TypeScript \u0432\u0435\u0437\u0434\u0435 - \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 state \u0438 actions \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 : - \u041c\u0430\u043b\u044b\u0439 \u2192 useState + Context API - \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u2192 Zustand - \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u2192 Redux Toolkit \u041a\u043e\u043c\u0430\u043d\u0434\u0430 : - Junior \u2192 Context API - Mixed \u2192 Zustand - Senior \u2192 Redux \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f : - DevTools \u2192 Redux - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u2192 Zustand - TypeScript \u2192 Zustand/Redux - Performance \u2192 Redux/Zustand \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0435 \u043f\u0435\u0440\u0435\u0438\u043d\u0436\u0438\u043d\u0438\u0440\u044c! \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0439 \u043f\u043e \u043c\u0435\u0440\u0435 \u0440\u043e\u0441\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"State Management Architecture - Senior Cheat Sheet (small)"},{"location":"questions/architecture/state-management_small/#state-management-architecture-senior-cheat-sheet-small","text":"","title":"State Management Architecture - Senior Cheat Sheet (small)"},{"location":"questions/architecture/state-management_small/#_1","text":"Redux Context API Zustand Boilerplate \u041c\u043d\u043e\u0433\u043e \u0421\u0440\u0435\u0434\u043d\u0435 \u041c\u0438\u043d\u0438\u043c\u0443\u043c DevTools \u2705 \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u274c \u2705 Performance \u2705 \u274c (re-renders) \u2705 Learning Curve \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f TypeScript \u0425\u043e\u0440\u043e\u0448\u043e \u0421\u0440\u0435\u0434\u043d\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705 \u0421\u043b\u043e\u0436\u043d\u043e \u2705","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0439"},{"location":"questions/architecture/state-management_small/#redux-toolkit-","text":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Async thunk const fetchUser = createAsyncThunk( 'user/fetchUser', async (userId, { rejectWithValue }) => { try { const response = await api.getUser(userId); return response.data; } catch (error) { return rejectWithValue(error.response.data); } } ); // Slice const userSlice = createSlice({ name: 'user', initialState: { profile: null, loading: false, error: null }, reducers: { setUser: (state, action) => { state.profile = action.payload; }, clearUser: (state) => { state.profile = null; } }, extraReducers: (builder) => { builder .addCase(fetchUser.pending, (state) => { state.loading = true; }) .addCase(fetchUser.fulfilled, (state, action) => { state.loading = false; state.profile = action.payload; }) .addCase(fetchUser.rejected, (state, action) => { state.loading = false; state.error = action.payload; }); } });","title":"Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/state-management_small/#context-api-usereducer","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 dispatch const UserContext = createContext(); const UserDispatchContext = createContext(); function userReducer(state, action) { switch (action.type) { case 'SET_USER': return { ...state, profile: action.payload, loading: false }; case 'SET_LOADING': return { ...state, loading: action.payload }; default: return state; } } export function UserProvider({ children }) { const [state, dispatch] = useReducer(userReducer, { profile: null, loading: false, error: null }); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f performance const value = useMemo(() => state, [state]); const dispatchValue = useMemo(() => dispatch, [dispatch]); return ( <UserContext.Provider value={value}> <UserDispatchContext.Provider value={dispatchValue}> {children} </UserDispatchContext.Provider> </UserContext.Provider> ); } // Custom hooks export const useUser = () => { const context = useContext(UserContext); if (!context) throw new Error('useUser must be used within UserProvider'); return context; };","title":"Context API + useReducer"},{"location":"questions/architecture/state-management_small/#zustand-","text":"import { create } from 'zustand'; import { devtools, persist } from 'zustand/middleware'; const useUserStore = create( devtools( persist( (set, get) => ({ // State profile: null, loading: false, error: null, // Actions setUser: (profile) => set({ profile, loading: false, error: null }), setLoading: (loading) => set({ loading }), setError: (error) => set({ error, loading: false }), // Async actions fetchUser: async (userId) => { set({ loading: true }); try { const user = await api.getUser(userId); get().setUser(user); } catch (error) { get().setError(error.message); } }, reset: () => set({ profile: null, loading: false, error: null }) }), { name: 'user-storage', partialize: (state) => ({ profile: state.profile }) } ) ) ); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserProfile() { const { profile, loading, fetchUser } = useUserStore(); useEffect(() => { fetchUser(userId); }, [fetchUser, userId]); return loading ? <Spinner /> : <div>{profile?.name}</div>; }","title":"Zustand - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/architecture/state-management_small/#_2","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/architecture/state-management_small/#flux-architecture","text":"// \u041e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a: Action -> Dispatcher -> Store -> View const UserActions = { FETCH_USER: 'FETCH_USER', SET_USER: 'SET_USER' }; // Action creators const fetchUser = (userId) => async (dispatch) => { dispatch({ type: 'FETCH_USER_REQUEST' }); try { const user = await api.getUser(userId); dispatch({ type: 'FETCH_USER_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'FETCH_USER_ERROR', payload: error.message }); } };","title":"Flux Architecture"},{"location":"questions/architecture/state-management_small/#cqrs","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserCommands { constructor(store) { this.store = store; } async updateProfile(userId, data) { this.store.dispatch({ type: 'UPDATE_PROFILE_START' }); try { await api.updateUser(userId, data); this.store.dispatch({ type: 'UPDATE_PROFILE_SUCCESS', payload: data }); } catch (error) { this.store.dispatch({ type: 'UPDATE_PROFILE_ERROR', payload: error }); } } } class UserQueries { constructor(store) { this.store = store; } getUser(userId) { return this.store.getState().users.byId[userId]; } getAllUsers() { return Object.values(this.store.getState().users.byId); } }","title":"CQRS \u043f\u0430\u0442\u0442\u0435\u0440\u043d"},{"location":"questions/architecture/state-management_small/#_3","text":"// \u274c \u041f\u043b\u043e\u0445\u043e - nested \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 const badState = { posts: [ { id: 1, title: 'Post 1', author: { id: 1, name: 'John' }, comments: [{ id: 1, text: 'Comment 1', author: { id: 1, name: 'John' } }] } ] }; // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 const normalizedState = { users: { byId: { '1': { id: '1', name: 'John' } }, allIds: ['1'] }, posts: { byId: { '1': { id: '1', title: 'Post 1', authorId: '1' } }, allIds: ['1'] }, comments: { byId: { '1': { id: '1', text: 'Comment 1', postId: '1', authorId: '1' } }, allIds: ['1'] } };","title":"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/architecture/state-management_small/#performance","text":"","title":"Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/architecture/state-management_small/#_4","text":"import { createSelector } from '@reduxjs/toolkit'; const selectUsers = (state) => state.users.byId; const selectFilter = (state) => state.ui.filter; const selectFilteredUsers = createSelector( [selectUsers, selectFilter], (users, filter) => { if (!filter) return Object.values(users); return Object.values(users).filter(user => user.name.toLowerCase().includes(filter.toLowerCase()) ); } );","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b"},{"location":"questions/architecture/state-management_small/#context","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 const UserDataContext = createContext(); // \u0420\u0435\u0434\u043a\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f const UserUIContext = createContext(); // \u0427\u0430\u0441\u0442\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f // Subscription \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f Context function createContextSubscription() { const subscribers = new Set(); return { subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); }, notify: (data) => subscribers.forEach(cb => cb(data)) }; }","title":"Context \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/architecture/state-management_small/#middleware","text":"","title":"Middleware \u0434\u043b\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432"},{"location":"questions/architecture/state-management_small/#custom-middleware","text":"const apiMiddleware = (store) => (next) => (action) => { if (action.meta?.api) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 handleApiCall(action, store.dispatch); } return next(action); }; const loggerMiddleware = (store) => (next) => (action) => { console.group(`Action: ${action.type}`); console.log('Previous State:', store.getState()); const result = next(action); console.log('Next State:', store.getState()); console.groupEnd(); return result; };","title":"Custom middleware"},{"location":"questions/architecture/state-management_small/#_5","text":"","title":"\u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/architecture/state-management_small/#redux-","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 - \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 Time travel debugging \u043d\u0443\u0436\u0435\u043d Middleware \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f side effects DevTools \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b","title":"Redux - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:"},{"location":"questions/architecture/state-management_small/#context-api-","text":"\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0422\u0435\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 UI \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041d\u0435\u0442 \u0447\u0430\u0441\u0442\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439","title":"Context API - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:"},{"location":"questions/architecture/state-management_small/#zustand-_1","text":"\u0421\u0440\u0435\u0434\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b TypeScript \u043f\u0440\u043e\u0435\u043a\u0442\u044b - \u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041c\u0438\u043d\u0438\u043c\u0443\u043c boilerplate","title":"Zustand - \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:"},{"location":"questions/architecture/state-management_small/#senior-rules","text":"\u0414\u0435\u0440\u0436\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c - \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 nested \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 UI \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u0440\u0430\u0437\u043d\u044b\u0435 stores/contexts \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b - \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e - reducers \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u0442\u044b\u043c\u0438 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 DevTools \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b - \u0434\u043b\u044f debugging \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0435 TypeScript \u0432\u0435\u0437\u0434\u0435 - \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 state \u0438 actions","title":"Senior Rules"},{"location":"questions/architecture/state-management_small/#_6","text":"\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 : - \u041c\u0430\u043b\u044b\u0439 \u2192 useState + Context API - \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u2192 Zustand - \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u2192 Redux Toolkit \u041a\u043e\u043c\u0430\u043d\u0434\u0430 : - Junior \u2192 Context API - Mixed \u2192 Zustand - Senior \u2192 Redux \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f : - DevTools \u2192 Redux - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u2192 Zustand - TypeScript \u2192 Zustand/Redux - Performance \u2192 Redux/Zustand \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0435 \u043f\u0435\u0440\u0435\u0438\u043d\u0436\u0438\u043d\u0438\u0440\u044c! \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0439 \u043f\u043e \u043c\u0435\u0440\u0435 \u0440\u043e\u0441\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u0430"},{"location":"questions/architecture/websockets-realtime/","text":"WebSockets \u0438 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 real-time \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c WebSockets, Server-Sent Events \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 WebSockets \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0434\u0443\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0439 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044e. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041d\u0438\u0437\u043a\u0430\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430 - \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f - \u041c\u0435\u043d\u044c\u0448\u0435 overhead \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 HTTP polling \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 firewall - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f // \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 WebSocket class WebSocketConnection { constructor(url, options = {}) { this.url = url; this.options = options; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = options.maxReconnectAttempts || 5; this.reconnectInterval = options.reconnectInterval || 1000; this.listeners = new Map(); } connect() { try { this.ws = new WebSocket(this.url); this.setupEventHandlers(); } catch (error) { console.error('WebSocket connection failed:', error); this.handleReconnect(); } } setupEventHandlers() { this.ws.onopen = (event) => { console.log('WebSocket connected'); this.reconnectAttempts = 0; this.emit('connected', event); }; this.ws.onmessage = (event) => { try { const data = JSON.parse(event.data); this.emit(data.type, data.payload); } catch (error) { console.error('Failed to parse WebSocket message:', error); } }; this.ws.onclose = (event) => { console.log('WebSocket disconnected:', event.code, event.reason); this.emit('disconnected', event); if (!event.wasClean) { this.handleReconnect(); } }; this.ws.onerror = (error) => { console.error('WebSocket error:', error); this.emit('error', error); }; } handleReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Reconnect attempt ${this.reconnectAttempts}`); setTimeout(() => { this.connect(); }, this.reconnectInterval * this.reconnectAttempts); } else { console.error('Max reconnect attempts reached'); this.emit('maxReconnectAttemptsReached'); } } send(type, payload) { if (this.ws?.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify({ type, payload })); } else { console.warn('WebSocket is not open. Message not sent:', { type, payload }); } } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } off(event, callback) { if (this.listeners.has(event)) { const callbacks = this.listeners.get(event); const index = callbacks.indexOf(callback); if (index > -1) { callbacks.splice(index, 1); } } } emit(event, data) { if (this.listeners.has(event)) { this.listeners.get(event).forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(1000, 'Client disconnecting'); this.ws = null; } } } Server-Sent Events (SSE) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 HTTP. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 - \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f (\u0441\u0435\u0440\u0432\u0435\u0440 \u2192 \u043a\u043b\u0438\u0435\u043d\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 // SSE \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f class ServerSentEvents { constructor(url, options = {}) { this.url = url; this.options = options; this.eventSource = null; this.listeners = new Map(); } connect() { if (this.eventSource) { this.disconnect(); } this.eventSource = new EventSource(this.url, this.options); this.eventSource.onopen = (event) => { console.log('SSE connected'); this.emit('connected', event); }; this.eventSource.onmessage = (event) => { try { const data = JSON.parse(event.data); this.emit('message', data); } catch (error) { this.emit('message', event.data); } }; this.eventSource.onerror = (error) => { console.error('SSE error:', error); this.emit('error', error); }; } // \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f addEventListener(type, callback) { this.eventSource?.addEventListener(type, callback); } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } emit(event, data) { if (this.listeners.has(event)) { this.listeners.get(event).forEach(callback => callback(data)); } } disconnect() { if (this.eventSource) { this.eventSource.close(); this.eventSource = null; } } } React Integration Custom Hook \u0434\u043b\u044f WebSockets import { useEffect, useRef, useState, useCallback } from 'react'; const useWebSocket = (url, options = {}) => { const [connectionStatus, setConnectionStatus] = useState('Disconnected'); const [lastMessage, setLastMessage] = useState(null); const [messageHistory, setMessageHistory] = useState([]); const ws = useRef(null); const reconnectTimeoutId = useRef(null); const reconnectAttempts = useRef(0); const maxReconnectAttempts = options.maxReconnectAttempts || 5; const reconnectInterval = options.reconnectInterval || 1000; const connect = useCallback(() => { try { ws.current = new WebSocket(url); ws.current.onopen = () => { setConnectionStatus('Connected'); reconnectAttempts.current = 0; }; ws.current.onmessage = (event) => { const message = JSON.parse(event.data); setLastMessage(message); if (options.keepHistory) { setMessageHistory(prev => [...prev, message]); } }; ws.current.onclose = (event) => { setConnectionStatus('Disconnected'); if (!event.wasClean && reconnectAttempts.current < maxReconnectAttempts) { reconnectAttempts.current++; setConnectionStatus('Reconnecting'); reconnectTimeoutId.current = setTimeout(() => { connect(); }, reconnectInterval * reconnectAttempts.current); } }; ws.current.onerror = () => { setConnectionStatus('Error'); }; } catch (error) { setConnectionStatus('Error'); } }, [url, maxReconnectAttempts, reconnectInterval, options.keepHistory]); const sendMessage = useCallback((message) => { if (ws.current?.readyState === WebSocket.OPEN) { ws.current.send(JSON.stringify(message)); return true; } return false; }, []); const disconnect = useCallback(() => { if (reconnectTimeoutId.current) { clearTimeout(reconnectTimeoutId.current); } if (ws.current) { ws.current.close(1000, 'Client disconnecting'); } }, []); useEffect(() => { connect(); return () => { disconnect(); }; }, [connect, disconnect]); return { connectionStatus, lastMessage, messageHistory, sendMessage, disconnect, reconnect: connect }; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function ChatComponent() { const { connectionStatus, lastMessage, sendMessage } = useWebSocket( 'ws://localhost:8080/chat', { keepHistory: true, maxReconnectAttempts: 3 } ); const [message, setMessage] = useState(''); const [messages, setMessages] = useState([]); useEffect(() => { if (lastMessage) { setMessages(prev => [...prev, lastMessage]); } }, [lastMessage]); const handleSendMessage = () => { if (message.trim()) { sendMessage({ type: 'chat', content: message, timestamp: Date.now() }); setMessage(''); } }; return ( <div> <div>Status: {connectionStatus}</div> <div> {messages.map((msg, index) => ( <div key={index}>{msg.content}</div> ))} </div> <input value={message} onChange={(e) => setMessage(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()} /> <button onClick={handleSendMessage}>Send</button> </div> ); } Context \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e WebSocket \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f import React, { createContext, useContext, useReducer, useEffect } from 'react'; const WebSocketContext = createContext(); const initialState = { isConnected: false, messages: [], activeUsers: [], error: null }; function websocketReducer(state, action) { switch (action.type) { case 'CONNECT': return { ...state, isConnected: true, error: null }; case 'DISCONNECT': return { ...state, isConnected: false }; case 'ERROR': return { ...state, error: action.payload, isConnected: false }; case 'MESSAGE_RECEIVED': return { ...state, messages: [...state.messages, action.payload] }; case 'USERS_UPDATE': return { ...state, activeUsers: action.payload }; case 'CLEAR_MESSAGES': return { ...state, messages: [] }; default: return state; } } export function WebSocketProvider({ children, url }) { const [state, dispatch] = useReducer(websocketReducer, initialState); const wsRef = useRef(); useEffect(() => { const connect = () => { wsRef.current = new WebSocket(url); wsRef.current.onopen = () => { dispatch({ type: 'CONNECT' }); }; wsRef.current.onmessage = (event) => { const data = JSON.parse(event.data); switch (data.type) { case 'message': dispatch({ type: 'MESSAGE_RECEIVED', payload: data.payload }); break; case 'users': dispatch({ type: 'USERS_UPDATE', payload: data.payload }); break; } }; wsRef.current.onclose = () => { dispatch({ type: 'DISCONNECT' }); // \u041f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b setTimeout(connect, 3000); }; wsRef.current.onerror = (error) => { dispatch({ type: 'ERROR', payload: error.message }); }; }; connect(); return () => { wsRef.current?.close(); }; }, [url]); const sendMessage = (message) => { if (wsRef.current?.readyState === WebSocket.OPEN) { wsRef.current.send(JSON.stringify(message)); } }; return ( <WebSocketContext.Provider value={{ ...state, sendMessage }}> {children} </WebSocketContext.Provider> ); } export const useWebSocketContext = () => { const context = useContext(WebSocketContext); if (!context) { throw new Error('useWebSocketContext must be used within WebSocketProvider'); } return context; }; \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Room/Channel Management class RoomManager { constructor(websocket) { this.ws = websocket; this.rooms = new Map(); this.currentRooms = new Set(); } joinRoom(roomId, callbacks = {}) { if (this.currentRooms.has(roomId)) { return false; } this.rooms.set(roomId, callbacks); this.currentRooms.add(roomId); this.ws.send({ type: 'join_room', payload: { roomId } }); return true; } leaveRoom(roomId) { if (!this.currentRooms.has(roomId)) { return false; } this.rooms.delete(roomId); this.currentRooms.delete(roomId); this.ws.send({ type: 'leave_room', payload: { roomId } }); return true; } sendToRoom(roomId, message) { if (this.currentRooms.has(roomId)) { this.ws.send({ type: 'room_message', payload: { roomId, message } }); } } handleMessage(data) { if (data.roomId && this.rooms.has(data.roomId)) { const callbacks = this.rooms.get(data.roomId); switch (data.type) { case 'room_message': callbacks.onMessage?.(data.payload); break; case 'user_joined': callbacks.onUserJoined?.(data.payload); break; case 'user_left': callbacks.onUserLeft?.(data.payload); break; } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const roomManager = new RoomManager(websocket); roomManager.joinRoom('chat-general', { onMessage: (message) => console.log('New message:', message), onUserJoined: (user) => console.log('User joined:', user), onUserLeft: (user) => console.log('User left:', user) }); Message Queue \u0434\u043b\u044f offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 class MessageQueue { constructor(websocket) { this.ws = websocket; this.queue = []; this.isOnline = navigator.onLine; this.setupEventListeners(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => { this.isOnline = false; }); this.ws.on('connected', () => { this.processQueue(); }); } send(message) { const queuedMessage = { ...message, id: crypto.randomUUID(), timestamp: Date.now(), retryCount: 0 }; if (this.isOnline && this.ws.isConnected()) { this.sendMessage(queuedMessage); } else { this.enqueue(queuedMessage); } } enqueue(message) { this.queue.push(message); // \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 localStorage \u0434\u043b\u044f \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } dequeue() { const message = this.queue.shift(); localStorage.setItem('messageQueue', JSON.stringify(this.queue)); return message; } processQueue() { while (this.queue.length > 0 && this.isOnline && this.ws.isConnected()) { const message = this.dequeue(); this.sendMessage(message); } } sendMessage(message) { try { this.ws.send(message); } catch (error) { // \u0415\u0441\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c if (message.retryCount < 3) { message.retryCount++; this.enqueue(message); } } } // \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 restoreQueue() { const saved = localStorage.getItem('messageQueue'); if (saved) { this.queue = JSON.parse(saved); } } } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Message Batching class MessageBatcher { constructor(websocket, options = {}) { this.ws = websocket; this.batchSize = options.batchSize || 10; this.flushInterval = options.flushInterval || 100; this.buffer = []; this.timeoutId = null; } send(message) { this.buffer.push(message); if (this.buffer.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } } flush() { if (this.buffer.length === 0) return; this.ws.send({ type: 'batch', payload: this.buffer }); this.buffer = []; if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } } } Connection Pooling class WebSocketPool { constructor(urls, options = {}) { this.urls = urls; this.maxConnections = options.maxConnections || urls.length; this.connections = []; this.currentIndex = 0; this.setupConnections(); } setupConnections() { for (let i = 0; i < Math.min(this.maxConnections, this.urls.length); i++) { const connection = new WebSocketConnection(this.urls[i]); this.connections.push(connection); } } send(message) { const connection = this.getNextConnection(); connection.send(message); } getNextConnection() { // Round-robin \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 const connection = this.connections[this.currentIndex]; this.currentIndex = (this.currentIndex + 1) % this.connections.length; return connection; } broadcast(message) { this.connections.forEach(connection => { connection.send(message); }); } } \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Authentication \u0438 Authorization class SecureWebSocket extends WebSocketConnection { constructor(url, options = {}) { super(url, options); this.token = options.token; this.refreshToken = options.refreshToken; } connect() { // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 URL \u0438\u043b\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 const urlWithAuth = `${this.url}?token=${this.token}`; this.ws = new WebSocket(urlWithAuth); this.setupEventHandlers(); } send(type, payload) { const message = { type, payload, token: this.token, timestamp: Date.now() }; super.send(message); } handleTokenExpiration() { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 this.refreshAuthToken() .then(newToken => { this.token = newToken; this.disconnect(); this.connect(); }) .catch(error => { console.error('Token refresh failed:', error); this.emit('authError', error); }); } async refreshAuthToken() { const response = await fetch('/api/auth/refresh', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ refreshToken: this.refreshToken }) }); const data = await response.json(); return data.accessToken; } } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0410\u0441\u043f\u0435\u043a\u0442 WebSockets SSE Long Polling WebRTC \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f P2P \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f Overhead \u041d\u0438\u0437\u043a\u0438\u0439 \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u041d\u0438\u0437\u043a\u0438\u0439 Proxy support \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f Best Practices Graceful Degradation : \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 fallback \u043d\u0430 polling Connection Management : \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f Message Validation : \u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Error Handling : \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043e\u0448\u0438\u0431\u043e\u043a Performance : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 batching \u0438 throttling Security : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 Security - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0432 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 real-time \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 WebSockets, SSE \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u041e\u043f\u044b\u0442 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\u043c\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c WebSockets vs SSE vs Long Polling? - \u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439? - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c real-time \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 firewall?","title":"WebSockets \u0438 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"questions/architecture/websockets-realtime/#websockets-real-time","text":"","title":"WebSockets \u0438 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"questions/architecture/websockets-realtime/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 real-time \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c WebSockets, Server-Sent Events \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/architecture/websockets-realtime/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/architecture/websockets-realtime/#real-time","text":"","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"questions/architecture/websockets-realtime/#websockets","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0434\u0443\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0439 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044e. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041d\u0438\u0437\u043a\u0430\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430 - \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f - \u041c\u0435\u043d\u044c\u0448\u0435 overhead \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 HTTP polling \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 firewall - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f // \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 WebSocket class WebSocketConnection { constructor(url, options = {}) { this.url = url; this.options = options; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = options.maxReconnectAttempts || 5; this.reconnectInterval = options.reconnectInterval || 1000; this.listeners = new Map(); } connect() { try { this.ws = new WebSocket(this.url); this.setupEventHandlers(); } catch (error) { console.error('WebSocket connection failed:', error); this.handleReconnect(); } } setupEventHandlers() { this.ws.onopen = (event) => { console.log('WebSocket connected'); this.reconnectAttempts = 0; this.emit('connected', event); }; this.ws.onmessage = (event) => { try { const data = JSON.parse(event.data); this.emit(data.type, data.payload); } catch (error) { console.error('Failed to parse WebSocket message:', error); } }; this.ws.onclose = (event) => { console.log('WebSocket disconnected:', event.code, event.reason); this.emit('disconnected', event); if (!event.wasClean) { this.handleReconnect(); } }; this.ws.onerror = (error) => { console.error('WebSocket error:', error); this.emit('error', error); }; } handleReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Reconnect attempt ${this.reconnectAttempts}`); setTimeout(() => { this.connect(); }, this.reconnectInterval * this.reconnectAttempts); } else { console.error('Max reconnect attempts reached'); this.emit('maxReconnectAttemptsReached'); } } send(type, payload) { if (this.ws?.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify({ type, payload })); } else { console.warn('WebSocket is not open. Message not sent:', { type, payload }); } } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } off(event, callback) { if (this.listeners.has(event)) { const callbacks = this.listeners.get(event); const index = callbacks.indexOf(callback); if (index > -1) { callbacks.splice(index, 1); } } } emit(event, data) { if (this.listeners.has(event)) { this.listeners.get(event).forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(1000, 'Client disconnecting'); this.ws = null; } } }","title":"WebSockets"},{"location":"questions/architecture/websockets-realtime/#server-sent-events-sse","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 HTTP. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 - \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f (\u0441\u0435\u0440\u0432\u0435\u0440 \u2192 \u043a\u043b\u0438\u0435\u043d\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 // SSE \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f class ServerSentEvents { constructor(url, options = {}) { this.url = url; this.options = options; this.eventSource = null; this.listeners = new Map(); } connect() { if (this.eventSource) { this.disconnect(); } this.eventSource = new EventSource(this.url, this.options); this.eventSource.onopen = (event) => { console.log('SSE connected'); this.emit('connected', event); }; this.eventSource.onmessage = (event) => { try { const data = JSON.parse(event.data); this.emit('message', data); } catch (error) { this.emit('message', event.data); } }; this.eventSource.onerror = (error) => { console.error('SSE error:', error); this.emit('error', error); }; } // \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f addEventListener(type, callback) { this.eventSource?.addEventListener(type, callback); } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } emit(event, data) { if (this.listeners.has(event)) { this.listeners.get(event).forEach(callback => callback(data)); } } disconnect() { if (this.eventSource) { this.eventSource.close(); this.eventSource = null; } } }","title":"Server-Sent Events (SSE)"},{"location":"questions/architecture/websockets-realtime/#react-integration","text":"","title":"React Integration"},{"location":"questions/architecture/websockets-realtime/#custom-hook-websockets","text":"import { useEffect, useRef, useState, useCallback } from 'react'; const useWebSocket = (url, options = {}) => { const [connectionStatus, setConnectionStatus] = useState('Disconnected'); const [lastMessage, setLastMessage] = useState(null); const [messageHistory, setMessageHistory] = useState([]); const ws = useRef(null); const reconnectTimeoutId = useRef(null); const reconnectAttempts = useRef(0); const maxReconnectAttempts = options.maxReconnectAttempts || 5; const reconnectInterval = options.reconnectInterval || 1000; const connect = useCallback(() => { try { ws.current = new WebSocket(url); ws.current.onopen = () => { setConnectionStatus('Connected'); reconnectAttempts.current = 0; }; ws.current.onmessage = (event) => { const message = JSON.parse(event.data); setLastMessage(message); if (options.keepHistory) { setMessageHistory(prev => [...prev, message]); } }; ws.current.onclose = (event) => { setConnectionStatus('Disconnected'); if (!event.wasClean && reconnectAttempts.current < maxReconnectAttempts) { reconnectAttempts.current++; setConnectionStatus('Reconnecting'); reconnectTimeoutId.current = setTimeout(() => { connect(); }, reconnectInterval * reconnectAttempts.current); } }; ws.current.onerror = () => { setConnectionStatus('Error'); }; } catch (error) { setConnectionStatus('Error'); } }, [url, maxReconnectAttempts, reconnectInterval, options.keepHistory]); const sendMessage = useCallback((message) => { if (ws.current?.readyState === WebSocket.OPEN) { ws.current.send(JSON.stringify(message)); return true; } return false; }, []); const disconnect = useCallback(() => { if (reconnectTimeoutId.current) { clearTimeout(reconnectTimeoutId.current); } if (ws.current) { ws.current.close(1000, 'Client disconnecting'); } }, []); useEffect(() => { connect(); return () => { disconnect(); }; }, [connect, disconnect]); return { connectionStatus, lastMessage, messageHistory, sendMessage, disconnect, reconnect: connect }; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function ChatComponent() { const { connectionStatus, lastMessage, sendMessage } = useWebSocket( 'ws://localhost:8080/chat', { keepHistory: true, maxReconnectAttempts: 3 } ); const [message, setMessage] = useState(''); const [messages, setMessages] = useState([]); useEffect(() => { if (lastMessage) { setMessages(prev => [...prev, lastMessage]); } }, [lastMessage]); const handleSendMessage = () => { if (message.trim()) { sendMessage({ type: 'chat', content: message, timestamp: Date.now() }); setMessage(''); } }; return ( <div> <div>Status: {connectionStatus}</div> <div> {messages.map((msg, index) => ( <div key={index}>{msg.content}</div> ))} </div> <input value={message} onChange={(e) => setMessage(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()} /> <button onClick={handleSendMessage}>Send</button> </div> ); }","title":"Custom Hook \u0434\u043b\u044f WebSockets"},{"location":"questions/architecture/websockets-realtime/#context-websocket","text":"import React, { createContext, useContext, useReducer, useEffect } from 'react'; const WebSocketContext = createContext(); const initialState = { isConnected: false, messages: [], activeUsers: [], error: null }; function websocketReducer(state, action) { switch (action.type) { case 'CONNECT': return { ...state, isConnected: true, error: null }; case 'DISCONNECT': return { ...state, isConnected: false }; case 'ERROR': return { ...state, error: action.payload, isConnected: false }; case 'MESSAGE_RECEIVED': return { ...state, messages: [...state.messages, action.payload] }; case 'USERS_UPDATE': return { ...state, activeUsers: action.payload }; case 'CLEAR_MESSAGES': return { ...state, messages: [] }; default: return state; } } export function WebSocketProvider({ children, url }) { const [state, dispatch] = useReducer(websocketReducer, initialState); const wsRef = useRef(); useEffect(() => { const connect = () => { wsRef.current = new WebSocket(url); wsRef.current.onopen = () => { dispatch({ type: 'CONNECT' }); }; wsRef.current.onmessage = (event) => { const data = JSON.parse(event.data); switch (data.type) { case 'message': dispatch({ type: 'MESSAGE_RECEIVED', payload: data.payload }); break; case 'users': dispatch({ type: 'USERS_UPDATE', payload: data.payload }); break; } }; wsRef.current.onclose = () => { dispatch({ type: 'DISCONNECT' }); // \u041f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b setTimeout(connect, 3000); }; wsRef.current.onerror = (error) => { dispatch({ type: 'ERROR', payload: error.message }); }; }; connect(); return () => { wsRef.current?.close(); }; }, [url]); const sendMessage = (message) => { if (wsRef.current?.readyState === WebSocket.OPEN) { wsRef.current.send(JSON.stringify(message)); } }; return ( <WebSocketContext.Provider value={{ ...state, sendMessage }}> {children} </WebSocketContext.Provider> ); } export const useWebSocketContext = () => { const context = useContext(WebSocketContext); if (!context) { throw new Error('useWebSocketContext must be used within WebSocketProvider'); } return context; };","title":"Context \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e WebSocket \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"},{"location":"questions/architecture/websockets-realtime/#_3","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/architecture/websockets-realtime/#roomchannel-management","text":"class RoomManager { constructor(websocket) { this.ws = websocket; this.rooms = new Map(); this.currentRooms = new Set(); } joinRoom(roomId, callbacks = {}) { if (this.currentRooms.has(roomId)) { return false; } this.rooms.set(roomId, callbacks); this.currentRooms.add(roomId); this.ws.send({ type: 'join_room', payload: { roomId } }); return true; } leaveRoom(roomId) { if (!this.currentRooms.has(roomId)) { return false; } this.rooms.delete(roomId); this.currentRooms.delete(roomId); this.ws.send({ type: 'leave_room', payload: { roomId } }); return true; } sendToRoom(roomId, message) { if (this.currentRooms.has(roomId)) { this.ws.send({ type: 'room_message', payload: { roomId, message } }); } } handleMessage(data) { if (data.roomId && this.rooms.has(data.roomId)) { const callbacks = this.rooms.get(data.roomId); switch (data.type) { case 'room_message': callbacks.onMessage?.(data.payload); break; case 'user_joined': callbacks.onUserJoined?.(data.payload); break; case 'user_left': callbacks.onUserLeft?.(data.payload); break; } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const roomManager = new RoomManager(websocket); roomManager.joinRoom('chat-general', { onMessage: (message) => console.log('New message:', message), onUserJoined: (user) => console.log('User joined:', user), onUserLeft: (user) => console.log('User left:', user) });","title":"Room/Channel Management"},{"location":"questions/architecture/websockets-realtime/#message-queue-offline","text":"class MessageQueue { constructor(websocket) { this.ws = websocket; this.queue = []; this.isOnline = navigator.onLine; this.setupEventListeners(); } setupEventListeners() { window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => { this.isOnline = false; }); this.ws.on('connected', () => { this.processQueue(); }); } send(message) { const queuedMessage = { ...message, id: crypto.randomUUID(), timestamp: Date.now(), retryCount: 0 }; if (this.isOnline && this.ws.isConnected()) { this.sendMessage(queuedMessage); } else { this.enqueue(queuedMessage); } } enqueue(message) { this.queue.push(message); // \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 localStorage \u0434\u043b\u044f \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } dequeue() { const message = this.queue.shift(); localStorage.setItem('messageQueue', JSON.stringify(this.queue)); return message; } processQueue() { while (this.queue.length > 0 && this.isOnline && this.ws.isConnected()) { const message = this.dequeue(); this.sendMessage(message); } } sendMessage(message) { try { this.ws.send(message); } catch (error) { // \u0415\u0441\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c if (message.retryCount < 3) { message.retryCount++; this.enqueue(message); } } } // \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 restoreQueue() { const saved = localStorage.getItem('messageQueue'); if (saved) { this.queue = JSON.parse(saved); } } }","title":"Message Queue \u0434\u043b\u044f offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438"},{"location":"questions/architecture/websockets-realtime/#_4","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/architecture/websockets-realtime/#message-batching","text":"class MessageBatcher { constructor(websocket, options = {}) { this.ws = websocket; this.batchSize = options.batchSize || 10; this.flushInterval = options.flushInterval || 100; this.buffer = []; this.timeoutId = null; } send(message) { this.buffer.push(message); if (this.buffer.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } } flush() { if (this.buffer.length === 0) return; this.ws.send({ type: 'batch', payload: this.buffer }); this.buffer = []; if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } } }","title":"Message Batching"},{"location":"questions/architecture/websockets-realtime/#connection-pooling","text":"class WebSocketPool { constructor(urls, options = {}) { this.urls = urls; this.maxConnections = options.maxConnections || urls.length; this.connections = []; this.currentIndex = 0; this.setupConnections(); } setupConnections() { for (let i = 0; i < Math.min(this.maxConnections, this.urls.length); i++) { const connection = new WebSocketConnection(this.urls[i]); this.connections.push(connection); } } send(message) { const connection = this.getNextConnection(); connection.send(message); } getNextConnection() { // Round-robin \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 const connection = this.connections[this.currentIndex]; this.currentIndex = (this.currentIndex + 1) % this.connections.length; return connection; } broadcast(message) { this.connections.forEach(connection => { connection.send(message); }); } }","title":"Connection Pooling"},{"location":"questions/architecture/websockets-realtime/#_5","text":"","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/websockets-realtime/#authentication-authorization","text":"class SecureWebSocket extends WebSocketConnection { constructor(url, options = {}) { super(url, options); this.token = options.token; this.refreshToken = options.refreshToken; } connect() { // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 URL \u0438\u043b\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 const urlWithAuth = `${this.url}?token=${this.token}`; this.ws = new WebSocket(urlWithAuth); this.setupEventHandlers(); } send(type, payload) { const message = { type, payload, token: this.token, timestamp: Date.now() }; super.send(message); } handleTokenExpiration() { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 this.refreshAuthToken() .then(newToken => { this.token = newToken; this.disconnect(); this.connect(); }) .catch(error => { console.error('Token refresh failed:', error); this.emit('authError', error); }); } async refreshAuthToken() { const response = await fetch('/api/auth/refresh', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ refreshToken: this.refreshToken }) }); const data = await response.json(); return data.accessToken; } }","title":"Authentication \u0438 Authorization"},{"location":"questions/architecture/websockets-realtime/#_6","text":"\u0410\u0441\u043f\u0435\u043a\u0442 WebSockets SSE Long Polling WebRTC \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f P2P \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f Overhead \u041d\u0438\u0437\u043a\u0438\u0439 \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u041d\u0438\u0437\u043a\u0438\u0439 Proxy support \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439"},{"location":"questions/architecture/websockets-realtime/#best-practices","text":"Graceful Degradation : \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 fallback \u043d\u0430 polling Connection Management : \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f Message Validation : \u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Error Handling : \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043e\u0448\u0438\u0431\u043e\u043a Performance : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 batching \u0438 throttling Security : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438","title":"Best Practices"},{"location":"questions/architecture/websockets-realtime/#_7","text":"Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 Security - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0432 real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 State Management - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 real-time \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/architecture/websockets-realtime/#_8","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 WebSockets, SSE \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u041e\u043f\u044b\u0442 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\u043c\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c WebSockets vs SSE vs Long Polling? - \u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439? - \u041a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c real-time \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f? - \u041a\u0430\u043a \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u043a\u0441\u0438 \u0438 firewall?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/architecture/websockets-realtime_small/","text":"WebSockets \u0438 Real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f (small) \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 Overhead Proxy support Use Case WebSockets \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0438\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0427\u0430\u0442\u044b, \u0438\u0433\u0440\u044b SSE \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, live updates Long Polling \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f Fallback \u0440\u0435\u0448\u0435\u043d\u0438\u044f WebRTC P2P \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0438\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0412\u0438\u0434\u0435\u043e/\u0430\u0443\u0434\u0438\u043e \u0437\u0432\u043e\u043d\u043a\u0438 WebSocket \u0441 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c class WebSocketConnection { constructor(url, options = {}) { this.url = url; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = options.maxReconnectAttempts || 5; this.reconnectInterval = options.reconnectInterval || 1000; this.listeners = new Map(); } connect() { this.ws = new WebSocket(this.url); this.ws.onopen = () => { this.reconnectAttempts = 0; this.emit('connected'); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.payload); }; this.ws.onclose = (event) => { if (!event.wasClean) this.handleReconnect(); }; } handleReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; setTimeout(() => this.connect(), this.reconnectInterval * this.reconnectAttempts); } } send(type, payload) { if (this.ws?.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify({ type, payload })); } } } React Hook \u0434\u043b\u044f WebSockets const useWebSocket = (url, options = {}) => { const [connectionStatus, setConnectionStatus] = useState('Disconnected'); const [lastMessage, setLastMessage] = useState(null); const ws = useRef(null); const reconnectTimeoutId = useRef(null); const connect = useCallback(() => { ws.current = new WebSocket(url); ws.current.onopen = () => setConnectionStatus('Connected'); ws.current.onmessage = (event) => setLastMessage(JSON.parse(event.data)); ws.current.onclose = (event) => { setConnectionStatus('Disconnected'); if (!event.wasClean) { setConnectionStatus('Reconnecting'); reconnectTimeoutId.current = setTimeout(connect, 3000); } }; }, [url]); const sendMessage = useCallback((message) => { if (ws.current?.readyState === WebSocket.OPEN) { ws.current.send(JSON.stringify(message)); return true; } return false; }, []); useEffect(() => { connect(); return () => { clearTimeout(reconnectTimeoutId.current); ws.current?.close(); }; }, [connect]); return { connectionStatus, lastMessage, sendMessage }; }; WebSocket Context \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const WebSocketContext = createContext(); function websocketReducer(state, action) { switch (action.type) { case 'CONNECT': return { ...state, isConnected: true, error: null }; case 'DISCONNECT': return { ...state, isConnected: false }; case 'MESSAGE_RECEIVED': return { ...state, messages: [...state.messages, action.payload] }; case 'USERS_UPDATE': return { ...state, activeUsers: action.payload }; default: return state; } } export function WebSocketProvider({ children, url }) { const [state, dispatch] = useReducer(websocketReducer, { isConnected: false, messages: [], activeUsers: [], error: null }); const wsRef = useRef(); useEffect(() => { const connect = () => { wsRef.current = new WebSocket(url); wsRef.current.onopen = () => dispatch({ type: 'CONNECT' }); wsRef.current.onmessage = (event) => { const data = JSON.parse(event.data); dispatch({ type: `${data.type.toUpperCase()}`, payload: data.payload }); }; wsRef.current.onclose = () => { dispatch({ type: 'DISCONNECT' }); setTimeout(connect, 3000); }; }; connect(); return () => wsRef.current?.close(); }, [url]); const sendMessage = (message) => { if (wsRef.current?.readyState === WebSocket.OPEN) { wsRef.current.send(JSON.stringify(message)); } }; return ( <WebSocketContext.Provider value={{ ...state, sendMessage }}> {children} </WebSocketContext.Provider> ); } Server-Sent Events (SSE) class ServerSentEvents { constructor(url) { this.eventSource = new EventSource(url); this.listeners = new Map(); this.eventSource.onmessage = (event) => { const data = JSON.parse(event.data); this.emit('message', data); }; } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f addEventListener(type, callback) { this.eventSource.addEventListener(type, callback); } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } emit(event, data) { this.listeners.get(event)?.forEach(callback => callback(data)); } } \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Room/Channel Management class RoomManager { constructor(websocket) { this.ws = websocket; this.rooms = new Map(); this.currentRooms = new Set(); } joinRoom(roomId, callbacks = {}) { if (this.currentRooms.has(roomId)) return false; this.rooms.set(roomId, callbacks); this.currentRooms.add(roomId); this.ws.send({ type: 'join_room', payload: { roomId } }); return true; } handleMessage(data) { if (data.roomId && this.rooms.has(data.roomId)) { const callbacks = this.rooms.get(data.roomId); callbacks[`on${data.type}`]?.(data.payload); } } } Message Queue \u0434\u043b\u044f offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 class MessageQueue { constructor(websocket) { this.ws = websocket; this.queue = JSON.parse(localStorage.getItem('messageQueue') || '[]'); this.isOnline = navigator.onLine; window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => this.isOnline = false); } send(message) { const queuedMessage = { ...message, id: crypto.randomUUID(), timestamp: Date.now(), retryCount: 0 }; if (this.isOnline && this.ws.isConnected()) { this.sendMessage(queuedMessage); } else { this.enqueue(queuedMessage); } } enqueue(message) { this.queue.push(message); localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } processQueue() { while (this.queue.length > 0 && this.isOnline) { const message = this.queue.shift(); this.sendMessage(message); } localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Message Batching class MessageBatcher { constructor(websocket, { batchSize = 10, flushInterval = 100 } = {}) { this.ws = websocket; this.batchSize = batchSize; this.flushInterval = flushInterval; this.buffer = []; this.timeoutId = null; } send(message) { this.buffer.push(message); if (this.buffer.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } } flush() { if (this.buffer.length === 0) return; this.ws.send({ type: 'batch', payload: this.buffer }); this.buffer = []; clearTimeout(this.timeoutId); this.timeoutId = null; } } Connection Pooling class WebSocketPool { constructor(urls) { this.connections = urls.map(url => new WebSocketConnection(url)); this.currentIndex = 0; } send(message) { const connection = this.connections[this.currentIndex]; this.currentIndex = (this.currentIndex + 1) % this.connections.length; connection.send(message); } broadcast(message) { this.connections.forEach(conn => conn.send(message)); } } \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f WebSocket class SecureWebSocket extends WebSocketConnection { constructor(url, { token, refreshToken } = {}) { super(url); this.token = token; this.refreshToken = refreshToken; } connect() { const urlWithAuth = `${this.url}?token=${this.token}`; this.ws = new WebSocket(urlWithAuth); this.setupEventHandlers(); } send(type, payload) { const message = { type, payload, token: this.token, timestamp: Date.now() }; super.send(message); } async refreshAuthToken() { const response = await fetch('/api/auth/refresh', { method: 'POST', body: JSON.stringify({ refreshToken: this.refreshToken }) }); const data = await response.json(); this.token = data.accessToken; this.reconnect(); } } \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f : - Sticky sessions \u0434\u043b\u044f WebSockets - Redis pub/sub \u0434\u043b\u044f multi-instance - Message brokers (RabbitMQ, Apache Kafka) \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f : - Exponential backoff \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 - Heartbeat/ping-pong \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f - Circuit breaker pattern Fallback \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 : const RealtimeClient = { async connect(url) { try { return new WebSocketConnection(url); } catch { try { return new ServerSentEvents(url + '/sse'); } catch { return new LongPolling(url + '/poll'); } } } }; Best Practices Senior-level Graceful degradation : WebSocket \u2192 SSE \u2192 Long polling Message validation : JSON schema \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f Rate limiting : Throttling \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 Monitoring : Connection health, message latency Testing : Mock WebSocket \u0434\u043b\u044f unit \u0442\u0435\u0441\u0442\u043e\u0432 Error recovery : Exponential backoff, circuit breaker Security : Token refresh, message encryption Performance : Batching, compression, connection pooling \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 : Horizontal scaling WebSocket servers Load balancing : Sticky sessions vs stateless approach Message ordering : \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 Backpressure : \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 Monitoring : \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 Security : CSRF, XSS \u0437\u0430\u0449\u0438\u0442\u0430 \u0432 real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445","title":"WebSockets \u0438 Real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f (small)"},{"location":"questions/architecture/websockets-realtime_small/#websockets-real-time-small","text":"","title":"WebSockets \u0438 Real-time \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f (small)"},{"location":"questions/architecture/websockets-realtime_small/#_1","text":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 Overhead Proxy support Use Case WebSockets \u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0438\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0427\u0430\u0442\u044b, \u0438\u0433\u0440\u044b SSE \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, live updates Long Polling \u041e\u0434\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f Fallback \u0440\u0435\u0448\u0435\u043d\u0438\u044f WebRTC P2P \u041e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0430\u044f \u041d\u0438\u0437\u043a\u0438\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u0412\u0438\u0434\u0435\u043e/\u0430\u0443\u0434\u0438\u043e \u0437\u0432\u043e\u043d\u043a\u0438","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"},{"location":"questions/architecture/websockets-realtime_small/#websocket","text":"class WebSocketConnection { constructor(url, options = {}) { this.url = url; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = options.maxReconnectAttempts || 5; this.reconnectInterval = options.reconnectInterval || 1000; this.listeners = new Map(); } connect() { this.ws = new WebSocket(this.url); this.ws.onopen = () => { this.reconnectAttempts = 0; this.emit('connected'); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.payload); }; this.ws.onclose = (event) => { if (!event.wasClean) this.handleReconnect(); }; } handleReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; setTimeout(() => this.connect(), this.reconnectInterval * this.reconnectAttempts); } } send(type, payload) { if (this.ws?.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify({ type, payload })); } } }","title":"WebSocket \u0441 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c"},{"location":"questions/architecture/websockets-realtime_small/#react-hook-websockets","text":"const useWebSocket = (url, options = {}) => { const [connectionStatus, setConnectionStatus] = useState('Disconnected'); const [lastMessage, setLastMessage] = useState(null); const ws = useRef(null); const reconnectTimeoutId = useRef(null); const connect = useCallback(() => { ws.current = new WebSocket(url); ws.current.onopen = () => setConnectionStatus('Connected'); ws.current.onmessage = (event) => setLastMessage(JSON.parse(event.data)); ws.current.onclose = (event) => { setConnectionStatus('Disconnected'); if (!event.wasClean) { setConnectionStatus('Reconnecting'); reconnectTimeoutId.current = setTimeout(connect, 3000); } }; }, [url]); const sendMessage = useCallback((message) => { if (ws.current?.readyState === WebSocket.OPEN) { ws.current.send(JSON.stringify(message)); return true; } return false; }, []); useEffect(() => { connect(); return () => { clearTimeout(reconnectTimeoutId.current); ws.current?.close(); }; }, [connect]); return { connectionStatus, lastMessage, sendMessage }; };","title":"React Hook \u0434\u043b\u044f WebSockets"},{"location":"questions/architecture/websockets-realtime_small/#websocket-context","text":"const WebSocketContext = createContext(); function websocketReducer(state, action) { switch (action.type) { case 'CONNECT': return { ...state, isConnected: true, error: null }; case 'DISCONNECT': return { ...state, isConnected: false }; case 'MESSAGE_RECEIVED': return { ...state, messages: [...state.messages, action.payload] }; case 'USERS_UPDATE': return { ...state, activeUsers: action.payload }; default: return state; } } export function WebSocketProvider({ children, url }) { const [state, dispatch] = useReducer(websocketReducer, { isConnected: false, messages: [], activeUsers: [], error: null }); const wsRef = useRef(); useEffect(() => { const connect = () => { wsRef.current = new WebSocket(url); wsRef.current.onopen = () => dispatch({ type: 'CONNECT' }); wsRef.current.onmessage = (event) => { const data = JSON.parse(event.data); dispatch({ type: `${data.type.toUpperCase()}`, payload: data.payload }); }; wsRef.current.onclose = () => { dispatch({ type: 'DISCONNECT' }); setTimeout(connect, 3000); }; }; connect(); return () => wsRef.current?.close(); }, [url]); const sendMessage = (message) => { if (wsRef.current?.readyState === WebSocket.OPEN) { wsRef.current.send(JSON.stringify(message)); } }; return ( <WebSocketContext.Provider value={{ ...state, sendMessage }}> {children} </WebSocketContext.Provider> ); }","title":"WebSocket Context \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"},{"location":"questions/architecture/websockets-realtime_small/#server-sent-events-sse","text":"class ServerSentEvents { constructor(url) { this.eventSource = new EventSource(url); this.listeners = new Map(); this.eventSource.onmessage = (event) => { const data = JSON.parse(event.data); this.emit('message', data); }; } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f addEventListener(type, callback) { this.eventSource.addEventListener(type, callback); } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } emit(event, data) { this.listeners.get(event)?.forEach(callback => callback(data)); } }","title":"Server-Sent Events (SSE)"},{"location":"questions/architecture/websockets-realtime_small/#_2","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/architecture/websockets-realtime_small/#roomchannel-management","text":"class RoomManager { constructor(websocket) { this.ws = websocket; this.rooms = new Map(); this.currentRooms = new Set(); } joinRoom(roomId, callbacks = {}) { if (this.currentRooms.has(roomId)) return false; this.rooms.set(roomId, callbacks); this.currentRooms.add(roomId); this.ws.send({ type: 'join_room', payload: { roomId } }); return true; } handleMessage(data) { if (data.roomId && this.rooms.has(data.roomId)) { const callbacks = this.rooms.get(data.roomId); callbacks[`on${data.type}`]?.(data.payload); } } }","title":"Room/Channel Management"},{"location":"questions/architecture/websockets-realtime_small/#message-queue-offline","text":"class MessageQueue { constructor(websocket) { this.ws = websocket; this.queue = JSON.parse(localStorage.getItem('messageQueue') || '[]'); this.isOnline = navigator.onLine; window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); }); window.addEventListener('offline', () => this.isOnline = false); } send(message) { const queuedMessage = { ...message, id: crypto.randomUUID(), timestamp: Date.now(), retryCount: 0 }; if (this.isOnline && this.ws.isConnected()) { this.sendMessage(queuedMessage); } else { this.enqueue(queuedMessage); } } enqueue(message) { this.queue.push(message); localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } processQueue() { while (this.queue.length > 0 && this.isOnline) { const message = this.queue.shift(); this.sendMessage(message); } localStorage.setItem('messageQueue', JSON.stringify(this.queue)); } }","title":"Message Queue \u0434\u043b\u044f offline \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438"},{"location":"questions/architecture/websockets-realtime_small/#_3","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/architecture/websockets-realtime_small/#message-batching","text":"class MessageBatcher { constructor(websocket, { batchSize = 10, flushInterval = 100 } = {}) { this.ws = websocket; this.batchSize = batchSize; this.flushInterval = flushInterval; this.buffer = []; this.timeoutId = null; } send(message) { this.buffer.push(message); if (this.buffer.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } } flush() { if (this.buffer.length === 0) return; this.ws.send({ type: 'batch', payload: this.buffer }); this.buffer = []; clearTimeout(this.timeoutId); this.timeoutId = null; } }","title":"Message Batching"},{"location":"questions/architecture/websockets-realtime_small/#connection-pooling","text":"class WebSocketPool { constructor(urls) { this.connections = urls.map(url => new WebSocketConnection(url)); this.currentIndex = 0; } send(message) { const connection = this.connections[this.currentIndex]; this.currentIndex = (this.currentIndex + 1) % this.connections.length; connection.send(message); } broadcast(message) { this.connections.forEach(conn => conn.send(message)); } }","title":"Connection Pooling"},{"location":"questions/architecture/websockets-realtime_small/#_4","text":"","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/architecture/websockets-realtime_small/#websocket_1","text":"class SecureWebSocket extends WebSocketConnection { constructor(url, { token, refreshToken } = {}) { super(url); this.token = token; this.refreshToken = refreshToken; } connect() { const urlWithAuth = `${this.url}?token=${this.token}`; this.ws = new WebSocket(urlWithAuth); this.setupEventHandlers(); } send(type, payload) { const message = { type, payload, token: this.token, timestamp: Date.now() }; super.send(message); } async refreshAuthToken() { const response = await fetch('/api/auth/refresh', { method: 'POST', body: JSON.stringify({ refreshToken: this.refreshToken }) }); const data = await response.json(); this.token = data.accessToken; this.reconnect(); } }","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f WebSocket"},{"location":"questions/architecture/websockets-realtime_small/#_5","text":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f : - Sticky sessions \u0434\u043b\u044f WebSockets - Redis pub/sub \u0434\u043b\u044f multi-instance - Message brokers (RabbitMQ, Apache Kafka) \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f : - Exponential backoff \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 - Heartbeat/ping-pong \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f - Circuit breaker pattern Fallback \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 : const RealtimeClient = { async connect(url) { try { return new WebSocketConnection(url); } catch { try { return new ServerSentEvents(url + '/sse'); } catch { return new LongPolling(url + '/poll'); } } } };","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"questions/architecture/websockets-realtime_small/#best-practices-senior-level","text":"Graceful degradation : WebSocket \u2192 SSE \u2192 Long polling Message validation : JSON schema \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f Rate limiting : Throttling \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 Monitoring : Connection health, message latency Testing : Mock WebSocket \u0434\u043b\u044f unit \u0442\u0435\u0441\u0442\u043e\u0432 Error recovery : Exponential backoff, circuit breaker Security : Token refresh, message encryption Performance : Batching, compression, connection pooling","title":"Best Practices Senior-level"},{"location":"questions/architecture/websockets-realtime_small/#senior","text":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 : Horizontal scaling WebSocket servers Load balancing : Sticky sessions vs stateless approach Message ordering : \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 Backpressure : \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 Monitoring : \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 Security : CSRF, XSS \u0437\u0430\u0449\u0438\u0442\u0430 \u0432 real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/javascript/async-programming/","text":"Promises, Async/Await \u0438 Generators \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 promises, async/await \u0438 generators \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u0438\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 React \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 \u0412 JavaScript \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c: Promises, async/await \u0438 generators. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f. Promises - \u041e\u0441\u043d\u043e\u0432\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 Promises \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0435\u0451 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Promise // \u0422\u0440\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Promise: // 1. Pending - \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 // 2. Fulfilled - \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e // 3. Rejected - \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 const promise = new Promise((resolve, reject) => { const success = Math.random() > 0.5; setTimeout(() => { if (success) { resolve('\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430!'); } else { reject(new Error('\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a')); } }, 1000); }); promise .then(result => console.log(result)) .catch(error => console.error(error)) .finally(() => console.log('\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430')); \u041c\u0435\u0442\u043e\u0434\u044b Promise // Promise.all - \u0436\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u043c\u0438\u0441\u043e\u0432 const fetchUsers = fetch('/api/users').then(r => r.json()); const fetchPosts = fetch('/api/posts').then(r => r.json()); const fetchComments = fetch('/api/comments').then(r => r.json()); Promise.all([fetchUsers, fetchPosts, fetchComments]) .then(([users, posts, comments]) => { console.log('\u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b:', { users, posts, comments }); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:', error); }); // Promise.allSettled - \u0436\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0438) Promise.allSettled([fetchUsers, fetchPosts, fetchComments]) .then(results => { results.forEach((result, index) => { if (result.status === 'fulfilled') { console.log(`\u0417\u0430\u043f\u0440\u043e\u0441 ${index} \u0443\u0441\u043f\u0435\u0448\u0435\u043d:`, result.value); } else { console.log(`\u0417\u0430\u043f\u0440\u043e\u0441 ${index} \u043d\u0435\u0443\u0434\u0430\u0447\u0435\u043d:`, result.reason); } }); }); // Promise.race - \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u043f\u0440\u043e\u043c\u0438\u0441 const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000) ); Promise.race([fetchUsers, timeout]) .then(result => console.log('\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:', result)) .catch(error => console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0438\u043b\u0438 \u0442\u0430\u0439\u043c\u0430\u0443\u0442:', error)); // Promise.any - \u043f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0438\u0441 (ES2021) Promise.any([fetchUsers, fetchPosts, fetchComments]) .then(firstSuccess => console.log('\u041f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439:', firstSuccess)) .catch(aggregateError => console.error('\u0412\u0441\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b:', aggregateError)); \u0426\u0435\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u043e\u043c\u0438\u0441\u043e\u0432 // Chaining promises fetch('/api/user/123') .then(response => { if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); }) .then(user => { console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c:', user); return fetch(`/api/posts?userId=${user.id}`); }) .then(response => response.json()) .then(posts => { console.log('\u041f\u043e\u0441\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:', posts); return posts.map(post => post.id); }) .then(postIds => { console.log('ID \u043f\u043e\u0441\u0442\u043e\u0432:', postIds); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0435:', error); }); Async/Await - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 Async/await - \u044d\u0442\u043e \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0445\u0430\u0440 \u043d\u0430\u0434 \u043f\u0440\u043e\u043c\u0438\u0441\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u0445\u043e\u0436\u0438\u043c \u043d\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439. \u041e\u0441\u043d\u043e\u0432\u044b async/await // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 async \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Promise async function fetchUserData(userId) { try { const userResponse = await fetch(`/api/user/${userId}`); if (!userResponse.ok) { throw new Error(`HTTP error! status: ${userResponse.status}`); } const user = await userResponse.json(); console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c:', user); const postsResponse = await fetch(`/api/posts?userId=${user.id}`); const posts = await postsResponse.json(); console.log('\u041f\u043e\u0441\u0442\u044b:', posts); return { user, posts }; } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:', error); throw error; // \u041f\u0435\u0440\u0435\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 fetchUserData(123) .then(data => console.log('\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b:', data)) .catch(error => console.error('\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430:', error)); \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441 async/await // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e) async function fetchDataSequential() { const users = await fetch('/api/users').then(r => r.json()); const posts = await fetch('/api/posts').then(r => r.json()); const comments = await fetch('/api/comments').then(r => r.json()); return { users, posts, comments }; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u0431\u044b\u0441\u0442\u0440\u043e) async function fetchDataParallel() { const [users, posts, comments] = await Promise.all([ fetch('/api/users').then(r => r.json()), fetch('/api/posts').then(r => r.json()), fetch('/api/comments').then(r => r.json()) ]); return { users, posts, comments }; } // \u2705 \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 async function fetchDataMixed() { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const user = await fetch('/api/user/123').then(r => r.json()); // \u0417\u0430\u0442\u0435\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 const [posts, profile, friends] = await Promise.all([ fetch(`/api/posts?userId=${user.id}`).then(r => r.json()), fetch(`/api/profile/${user.id}`).then(r => r.json()), fetch(`/api/friends/${user.id}`).then(r => r.json()) ]); return { user, posts, profile, friends }; } Generators - \u041b\u0435\u043d\u0438\u0432\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b Generators \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0447\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430. \u041e\u0441\u043d\u043e\u0432\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 // \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 function* simpleGenerator() { console.log('\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d'); yield 1; console.log('\u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e yield'); yield 2; console.log('\u041f\u043e\u0441\u043b\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e yield'); return 3; } const gen = simpleGenerator(); console.log(gen.next()); // { value: 1, done: false } console.log(gen.next()); // { value: 2, done: false } console.log(gen.next()); // { value: 3, done: true } // \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441 \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 function* generatorWithInput() { const first = yield '\u0414\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e'; const second = yield '\u0414\u0430\u0439\u0442\u0435 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e'; return first + second; } const inputGen = generatorWithInput(); console.log(inputGen.next()); // { value: '\u0414\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e', done: false } console.log(inputGen.next(10)); // { value: '\u0414\u0430\u0439\u0442\u0435 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e', done: false } console.log(inputGen.next(20)); // { value: 30, done: true } \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b // Async generators (ES2018) async function* asyncGenerator() { yield await fetch('/api/data1').then(r => r.json()); yield await fetch('/api/data2').then(r => r.json()); yield await fetch('/api/data3').then(r => r.json()); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 async generator async function consumeAsyncGenerator() { for await (const data of asyncGenerator()) { console.log('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435:', data); } } // \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 async function* paginatedFetch(baseUrl, pageSize = 10) { let page = 1; let hasMore = true; while (hasMore) { const response = await fetch(`${baseUrl}?page=${page}&size=${pageSize}`); const data = await response.json(); hasMore = data.items.length === pageSize; page++; yield data.items; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0433\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 async function loadAllData() { for await (const items of paginatedFetch('/api/users')) { console.log(`\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 ${items.length} \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438`); // \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 } } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 Promises Async/Await Generators \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a .catch() try/catch try/catch \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f .then() chains \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e yield/next \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 ES6+ ES2017+ ES6+ \u041e\u0442\u043c\u0435\u043d\u0430 \u0421\u043b\u043e\u0436\u043d\u043e \u0421\u043b\u043e\u0436\u043d\u043e \u0415\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u041b\u0435\u043d\u0438\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u041d\u0435\u0442 \u041d\u0435\u0442 \u0414\u0430 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 React 1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 React import React, { useState, useEffect } from 'react'; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 async/await \u0432 useEffect function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { // \u041d\u0435\u043b\u044c\u0437\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c useEffect async \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // useEffect(async () => { ... }, []); // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e let isCancelled = false; const fetchUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error('\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f'); } const userData = await response.json(); if (!isCancelled) { setUser(userData); } } catch (err) { if (!isCancelled) { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchUser(); return () => { isCancelled = true; }; }, [userId]); if (loading) return <div>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430...</div>; if (error) return <div>\u041e\u0448\u0438\u0431\u043a\u0430: {error}</div>; if (!user) return <div>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</div>; return <div>\u041f\u0440\u0438\u0432\u0435\u0442, {user.name}!</div>; } 2. \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 // \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0445\u0443\u043a \u0434\u043b\u044f fetch function useFetch(url, options = {}) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); const fetchData = useCallback(async (customUrl, customOptions = {}) => { const controller = new AbortController(); try { setLoading(true); setError(null); const response = await fetch(customUrl || url, { ...options, ...customOptions, signal: controller.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); setData(result); return result; } catch (err) { if (err.name !== 'AbortError') { setError(err.message); throw err; } } finally { setLoading(false); } return () => controller.abort(); }, [url, options]); useEffect(() => { if (url) { const cleanup = fetchData(); return cleanup; } }, [fetchData, url]); return { data, loading, error, refetch: fetchData }; } // \u0425\u0443\u043a \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 function usePaginatedData(url, pageSize = 10) { const [items, setItems] = useState([]); const [loading, setLoading] = useState(false); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const loadMore = useCallback(async () => { if (loading || !hasMore) return; try { setLoading(true); const response = await fetch(`${url}?page=${page}&size=${pageSize}`); const data = await response.json(); setItems(prev => [...prev, ...data.items]); setHasMore(data.items.length === pageSize); setPage(prev => prev + 1); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:', error); } finally { setLoading(false); } }, [url, pageSize, page, loading, hasMore]); useEffect(() => { loadMore(); }, []); // \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 return { items, loading, hasMore, loadMore }; } 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 useReducer // Reducer \u0434\u043b\u044f async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 const asyncReducer = (state, action) => { switch (action.type) { case 'FETCH_START': return { ...state, loading: true, error: null }; case 'FETCH_SUCCESS': return { ...state, loading: false, data: action.payload }; case 'FETCH_ERROR': return { ...state, loading: false, error: action.error }; case 'RESET': return { data: null, loading: false, error: null }; default: return state; } }; function useAsyncOperation(asyncFunction) { const [state, dispatch] = useReducer(asyncReducer, { data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { dispatch({ type: 'FETCH_START' }); try { const result = await asyncFunction(...args); dispatch({ type: 'FETCH_SUCCESS', payload: result }); return result; } catch (error) { dispatch({ type: 'FETCH_ERROR', error: error.message }); throw error; } }, [asyncFunction]); const reset = useCallback(() => { dispatch({ type: 'RESET' }); }, []); return { ...state, execute, reset }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserManager() { const createUser = async (userData) => { const response = await fetch('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(userData) }); return response.json(); }; const { data, loading, error, execute } = useAsyncOperation(createUser); const handleSubmit = async (formData) => { try { await execute(formData); console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0437\u0434\u0430\u043d:', data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f:', error); } }; return ( <div> {loading && <div>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f...</div>} {error && <div>\u041e\u0448\u0438\u0431\u043a\u0430: {error}</div>} {data && <div>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0437\u0434\u0430\u043d: {data.name}</div>} </div> ); } 4. \u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 AbortController function useAbortableAsync(asyncFunction) { const [state, setState] = useState({ data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { const controller = new AbortController(); setState(prev => ({ ...prev, loading: true, error: null })); try { const result = await asyncFunction(...args, controller.signal); setState({ data: result, loading: false, error: null }); return result; } catch (error) { if (error.name !== 'AbortError') { setState(prev => ({ ...prev, loading: false, error: error.message })); } throw error; } // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0442\u043c\u0435\u043d\u044b return () => controller.abort(); }, [asyncFunction]); return { ...state, execute }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0442\u043c\u0435\u043d\u043e\u0439 function SearchComponent() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const searchAsync = async (searchQuery, signal) => { const response = await fetch(`/api/search?q=${searchQuery}`, { signal }); return response.json(); }; const { data, loading, execute } = useAbortableAsync(searchAsync); useEffect(() => { if (query.length > 2) { const cancelSearch = execute(query); return cancelSearch; // \u041e\u0442\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043f\u043e\u0438\u0441\u043a } }, [query, execute]); useEffect(() => { if (data) { setResults(data.results); } }, [data]); return ( <div> <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"\u041f\u043e\u0438\u0441\u043a...\" /> {loading && <div>\u041f\u043e\u0438\u0441\u043a...</div>} <ul> {results.map(item => ( <li key={item.id}>{item.title}</li> ))} </ul> </div> ); } \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a // \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a class AsyncErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('Async error caught:', error, errorInfo); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 } render() { if (this.state.hasError) { return <div>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a: {this.state.error.message}</div>; } return this.props.children; } } // Retry \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c async function withRetry(asyncFunction, maxRetries = 3, delay = 1000) { let lastError; for (let attempt = 1; attempt <= maxRetries; attempt++) { try { return await asyncFunction(); } catch (error) { lastError = error; if (attempt === maxRetries) { throw error; } // Exponential backoff await new Promise(resolve => setTimeout(resolve, delay * attempt)); } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 retry const fetchWithRetry = () => withRetry( () => fetch('/api/data').then(r => r.json()), 3, 1000 ); Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 async/await \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438, \u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 React \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 Promise hell - \u043d\u0435 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 .then() \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435, \u0433\u0434\u0435 \u044d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 Promise.all Generators \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 React \u0441 useCallback \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 // \u2705 Comprehensive async pattern const useAsyncWithCleanup = (asyncFn, deps) => { const [state, setState] = useState({ data: null, loading: false, error: null }); const mountedRef = useRef(true); useEffect(() => { let cancelled = false; const execute = async () => { if (!mountedRef.current) return; setState(prev => ({ ...prev, loading: true, error: null })); try { const result = await asyncFn(); if (!cancelled && mountedRef.current) { setState({ data: result, loading: false, error: null }); } } catch (error) { if (!cancelled && mountedRef.current) { setState(prev => ({ ...prev, loading: false, error })); } } }; execute(); return () => { cancelled = true; }; }, deps); useEffect(() => { return () => { mountedRef.current = false; }; }, []); return state; }; \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Event Loop, Microtasks \u0438 Macrotasks useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"Promises, Async/Await \u0438 Generators"},{"location":"questions/javascript/async-programming/#promises-asyncawait-generators","text":"","title":"Promises, Async/Await \u0438 Generators"},{"location":"questions/javascript/async-programming/#_1","text":"\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 promises, async/await \u0438 generators \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u0438\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 React \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/async-programming/#_2","text":"\u0412 JavaScript \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c: Promises, async/await \u0438 generators. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/async-programming/#promises-","text":"Promises \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0435\u0451 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","title":"Promises - \u041e\u0441\u043d\u043e\u0432\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/async-programming/#promise","text":"// \u0422\u0440\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Promise: // 1. Pending - \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 // 2. Fulfilled - \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e // 3. Rejected - \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 const promise = new Promise((resolve, reject) => { const success = Math.random() > 0.5; setTimeout(() => { if (success) { resolve('\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430!'); } else { reject(new Error('\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a')); } }, 1000); }); promise .then(result => console.log(result)) .catch(error => console.error(error)) .finally(() => console.log('\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430'));","title":"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Promise"},{"location":"questions/javascript/async-programming/#promise_1","text":"// Promise.all - \u0436\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u043c\u0438\u0441\u043e\u0432 const fetchUsers = fetch('/api/users').then(r => r.json()); const fetchPosts = fetch('/api/posts').then(r => r.json()); const fetchComments = fetch('/api/comments').then(r => r.json()); Promise.all([fetchUsers, fetchPosts, fetchComments]) .then(([users, posts, comments]) => { console.log('\u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b:', { users, posts, comments }); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:', error); }); // Promise.allSettled - \u0436\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0438) Promise.allSettled([fetchUsers, fetchPosts, fetchComments]) .then(results => { results.forEach((result, index) => { if (result.status === 'fulfilled') { console.log(`\u0417\u0430\u043f\u0440\u043e\u0441 ${index} \u0443\u0441\u043f\u0435\u0448\u0435\u043d:`, result.value); } else { console.log(`\u0417\u0430\u043f\u0440\u043e\u0441 ${index} \u043d\u0435\u0443\u0434\u0430\u0447\u0435\u043d:`, result.reason); } }); }); // Promise.race - \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u043f\u0440\u043e\u043c\u0438\u0441 const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000) ); Promise.race([fetchUsers, timeout]) .then(result => console.log('\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:', result)) .catch(error => console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0438\u043b\u0438 \u0442\u0430\u0439\u043c\u0430\u0443\u0442:', error)); // Promise.any - \u043f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0438\u0441 (ES2021) Promise.any([fetchUsers, fetchPosts, fetchComments]) .then(firstSuccess => console.log('\u041f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439:', firstSuccess)) .catch(aggregateError => console.error('\u0412\u0441\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b:', aggregateError));","title":"\u041c\u0435\u0442\u043e\u0434\u044b Promise"},{"location":"questions/javascript/async-programming/#_3","text":"// Chaining promises fetch('/api/user/123') .then(response => { if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); }) .then(user => { console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c:', user); return fetch(`/api/posts?userId=${user.id}`); }) .then(response => response.json()) .then(posts => { console.log('\u041f\u043e\u0441\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:', posts); return posts.map(post => post.id); }) .then(postIds => { console.log('ID \u043f\u043e\u0441\u0442\u043e\u0432:', postIds); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0435:', error); });","title":"\u0426\u0435\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u043e\u043c\u0438\u0441\u043e\u0432"},{"location":"questions/javascript/async-programming/#asyncawait-","text":"Async/await - \u044d\u0442\u043e \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0445\u0430\u0440 \u043d\u0430\u0434 \u043f\u0440\u043e\u043c\u0438\u0441\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u0445\u043e\u0436\u0438\u043c \u043d\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439.","title":"Async/Await - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441"},{"location":"questions/javascript/async-programming/#asyncawait","text":"// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 async \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Promise async function fetchUserData(userId) { try { const userResponse = await fetch(`/api/user/${userId}`); if (!userResponse.ok) { throw new Error(`HTTP error! status: ${userResponse.status}`); } const user = await userResponse.json(); console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c:', user); const postsResponse = await fetch(`/api/posts?userId=${user.id}`); const posts = await postsResponse.json(); console.log('\u041f\u043e\u0441\u0442\u044b:', posts); return { user, posts }; } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:', error); throw error; // \u041f\u0435\u0440\u0435\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 fetchUserData(123) .then(data => console.log('\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b:', data)) .catch(error => console.error('\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430:', error));","title":"\u041e\u0441\u043d\u043e\u0432\u044b async/await"},{"location":"questions/javascript/async-programming/#asyncawait_1","text":"// \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e) async function fetchDataSequential() { const users = await fetch('/api/users').then(r => r.json()); const posts = await fetch('/api/posts').then(r => r.json()); const comments = await fetch('/api/comments').then(r => r.json()); return { users, posts, comments }; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u0431\u044b\u0441\u0442\u0440\u043e) async function fetchDataParallel() { const [users, posts, comments] = await Promise.all([ fetch('/api/users').then(r => r.json()), fetch('/api/posts').then(r => r.json()), fetch('/api/comments').then(r => r.json()) ]); return { users, posts, comments }; } // \u2705 \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 async function fetchDataMixed() { // \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const user = await fetch('/api/user/123').then(r => r.json()); // \u0417\u0430\u0442\u0435\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 const [posts, profile, friends] = await Promise.all([ fetch(`/api/posts?userId=${user.id}`).then(r => r.json()), fetch(`/api/profile/${user.id}`).then(r => r.json()), fetch(`/api/friends/${user.id}`).then(r => r.json()) ]); return { user, posts, profile, friends }; }","title":"\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441 async/await"},{"location":"questions/javascript/async-programming/#generators-","text":"Generators \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0447\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.","title":"Generators - \u041b\u0435\u043d\u0438\u0432\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b"},{"location":"questions/javascript/async-programming/#_4","text":"// \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 function* simpleGenerator() { console.log('\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d'); yield 1; console.log('\u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e yield'); yield 2; console.log('\u041f\u043e\u0441\u043b\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e yield'); return 3; } const gen = simpleGenerator(); console.log(gen.next()); // { value: 1, done: false } console.log(gen.next()); // { value: 2, done: false } console.log(gen.next()); // { value: 3, done: true } // \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441 \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 function* generatorWithInput() { const first = yield '\u0414\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e'; const second = yield '\u0414\u0430\u0439\u0442\u0435 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e'; return first + second; } const inputGen = generatorWithInput(); console.log(inputGen.next()); // { value: '\u0414\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e', done: false } console.log(inputGen.next(10)); // { value: '\u0414\u0430\u0439\u0442\u0435 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e', done: false } console.log(inputGen.next(20)); // { value: 30, done: true }","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432"},{"location":"questions/javascript/async-programming/#_5","text":"// Async generators (ES2018) async function* asyncGenerator() { yield await fetch('/api/data1').then(r => r.json()); yield await fetch('/api/data2').then(r => r.json()); yield await fetch('/api/data3').then(r => r.json()); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 async generator async function consumeAsyncGenerator() { for await (const data of asyncGenerator()) { console.log('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435:', data); } } // \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 async function* paginatedFetch(baseUrl, pageSize = 10) { let page = 1; let hasMore = true; while (hasMore) { const response = await fetch(`${baseUrl}?page=${page}&size=${pageSize}`); const data = await response.json(); hasMore = data.items.length === pageSize; page++; yield data.items; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0433\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 async function loadAllData() { for await (const items of paginatedFetch('/api/users')) { console.log(`\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 ${items.length} \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438`); // \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 } }","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b"},{"location":"questions/javascript/async-programming/#_6","text":"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 Promises Async/Await Generators \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a .catch() try/catch try/catch \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f .then() chains \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e yield/next \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 ES6+ ES2017+ ES6+ \u041e\u0442\u043c\u0435\u043d\u0430 \u0421\u043b\u043e\u0436\u043d\u043e \u0421\u043b\u043e\u0436\u043d\u043e \u0415\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u041b\u0435\u043d\u0438\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u041d\u0435\u0442 \u041d\u0435\u0442 \u0414\u0430","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432"},{"location":"questions/javascript/async-programming/#react","text":"","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 React"},{"location":"questions/javascript/async-programming/#1-react","text":"import React, { useState, useEffect } from 'react'; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 async/await \u0432 useEffect function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { // \u041d\u0435\u043b\u044c\u0437\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c useEffect async \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // useEffect(async () => { ... }, []); // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e let isCancelled = false; const fetchUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error('\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f'); } const userData = await response.json(); if (!isCancelled) { setUser(userData); } } catch (err) { if (!isCancelled) { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchUser(); return () => { isCancelled = true; }; }, [userId]); if (loading) return <div>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430...</div>; if (error) return <div>\u041e\u0448\u0438\u0431\u043a\u0430: {error}</div>; if (!user) return <div>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</div>; return <div>\u041f\u0440\u0438\u0432\u0435\u0442, {user.name}!</div>; }","title":"1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 React"},{"location":"questions/javascript/async-programming/#2","text":"// \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0445\u0443\u043a \u0434\u043b\u044f fetch function useFetch(url, options = {}) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); const fetchData = useCallback(async (customUrl, customOptions = {}) => { const controller = new AbortController(); try { setLoading(true); setError(null); const response = await fetch(customUrl || url, { ...options, ...customOptions, signal: controller.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); setData(result); return result; } catch (err) { if (err.name !== 'AbortError') { setError(err.message); throw err; } } finally { setLoading(false); } return () => controller.abort(); }, [url, options]); useEffect(() => { if (url) { const cleanup = fetchData(); return cleanup; } }, [fetchData, url]); return { data, loading, error, refetch: fetchData }; } // \u0425\u0443\u043a \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 function usePaginatedData(url, pageSize = 10) { const [items, setItems] = useState([]); const [loading, setLoading] = useState(false); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const loadMore = useCallback(async () => { if (loading || !hasMore) return; try { setLoading(true); const response = await fetch(`${url}?page=${page}&size=${pageSize}`); const data = await response.json(); setItems(prev => [...prev, ...data.items]); setHasMore(data.items.length === pageSize); setPage(prev => prev + 1); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:', error); } finally { setLoading(false); } }, [url, pageSize, page, loading, hasMore]); useEffect(() => { loadMore(); }, []); // \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 return { items, loading, hasMore, loadMore }; }","title":"2. \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439"},{"location":"questions/javascript/async-programming/#3-usereducer","text":"// Reducer \u0434\u043b\u044f async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 const asyncReducer = (state, action) => { switch (action.type) { case 'FETCH_START': return { ...state, loading: true, error: null }; case 'FETCH_SUCCESS': return { ...state, loading: false, data: action.payload }; case 'FETCH_ERROR': return { ...state, loading: false, error: action.error }; case 'RESET': return { data: null, loading: false, error: null }; default: return state; } }; function useAsyncOperation(asyncFunction) { const [state, dispatch] = useReducer(asyncReducer, { data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { dispatch({ type: 'FETCH_START' }); try { const result = await asyncFunction(...args); dispatch({ type: 'FETCH_SUCCESS', payload: result }); return result; } catch (error) { dispatch({ type: 'FETCH_ERROR', error: error.message }); throw error; } }, [asyncFunction]); const reset = useCallback(() => { dispatch({ type: 'RESET' }); }, []); return { ...state, execute, reset }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserManager() { const createUser = async (userData) => { const response = await fetch('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(userData) }); return response.json(); }; const { data, loading, error, execute } = useAsyncOperation(createUser); const handleSubmit = async (formData) => { try { await execute(formData); console.log('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0437\u0434\u0430\u043d:', data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f:', error); } }; return ( <div> {loading && <div>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f...</div>} {error && <div>\u041e\u0448\u0438\u0431\u043a\u0430: {error}</div>} {data && <div>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0437\u0434\u0430\u043d: {data.name}</div>} </div> ); }","title":"3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 useReducer"},{"location":"questions/javascript/async-programming/#4-abortcontroller","text":"function useAbortableAsync(asyncFunction) { const [state, setState] = useState({ data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { const controller = new AbortController(); setState(prev => ({ ...prev, loading: true, error: null })); try { const result = await asyncFunction(...args, controller.signal); setState({ data: result, loading: false, error: null }); return result; } catch (error) { if (error.name !== 'AbortError') { setState(prev => ({ ...prev, loading: false, error: error.message })); } throw error; } // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0442\u043c\u0435\u043d\u044b return () => controller.abort(); }, [asyncFunction]); return { ...state, execute }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0442\u043c\u0435\u043d\u043e\u0439 function SearchComponent() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const searchAsync = async (searchQuery, signal) => { const response = await fetch(`/api/search?q=${searchQuery}`, { signal }); return response.json(); }; const { data, loading, execute } = useAbortableAsync(searchAsync); useEffect(() => { if (query.length > 2) { const cancelSearch = execute(query); return cancelSearch; // \u041e\u0442\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043f\u043e\u0438\u0441\u043a } }, [query, execute]); useEffect(() => { if (data) { setResults(data.results); } }, [data]); return ( <div> <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"\u041f\u043e\u0438\u0441\u043a...\" /> {loading && <div>\u041f\u043e\u0438\u0441\u043a...</div>} <ul> {results.map(item => ( <li key={item.id}>{item.title}</li> ))} </ul> </div> ); }","title":"4. \u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 AbortController"},{"location":"questions/javascript/async-programming/#_7","text":"// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a class AsyncErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('Async error caught:', error, errorInfo); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 } render() { if (this.state.hasError) { return <div>\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a: {this.state.error.message}</div>; } return this.props.children; } } // Retry \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c async function withRetry(asyncFunction, maxRetries = 3, delay = 1000) { let lastError; for (let attempt = 1; attempt <= maxRetries; attempt++) { try { return await asyncFunction(); } catch (error) { lastError = error; if (attempt === maxRetries) { throw error; } // Exponential backoff await new Promise(resolve => setTimeout(resolve, delay * attempt)); } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 retry const fetchWithRetry = () => withRetry( () => fetch('/api/data').then(r => r.json()), 3, 1000 );","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a"},{"location":"questions/javascript/async-programming/#senior-","text":"\u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 async/await \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438, \u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 React \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 Promise hell - \u043d\u0435 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 .then() \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435, \u0433\u0434\u0435 \u044d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 Promise.all Generators \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 React \u0441 useCallback","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/async-programming/#_8","text":"// \u2705 Comprehensive async pattern const useAsyncWithCleanup = (asyncFn, deps) => { const [state, setState] = useState({ data: null, loading: false, error: null }); const mountedRef = useRef(true); useEffect(() => { let cancelled = false; const execute = async () => { if (!mountedRef.current) return; setState(prev => ({ ...prev, loading: true, error: null })); try { const result = await asyncFn(); if (!cancelled && mountedRef.current) { setState({ data: result, loading: false, error: null }); } } catch (error) { if (!cancelled && mountedRef.current) { setState(prev => ({ ...prev, loading: false, error })); } } }; execute(); return () => { cancelled = true; }; }, deps); useEffect(() => { return () => { mountedRef.current = false; }; }, []); return state; };","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/javascript/async-programming/#_9","text":"Event Loop, Microtasks \u0438 Macrotasks useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/async-programming_small/","text":"Async Programming - Senior Cheat Sheet (small) Promise \u043c\u0435\u0442\u043e\u0434\u044b // Promise.all - \u0432\u0441\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e const [users, posts] = await Promise.all([fetchUsers(), fetchPosts()]); // Promise.allSettled - \u0432\u0441\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u0441\u044f (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0438) const results = await Promise.allSettled([fetch1(), fetch2()]); // Promise.race - \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0439\u0441\u044f const result = await Promise.race([fetchData(), timeout(5000)]); // Promise.any - \u043f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 (ES2021) const first = await Promise.any([slow(), fast(), failing()]); Async/Await \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e vs \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e) const user = await fetchUser(); const posts = await fetchPosts(); // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e (\u0431\u044b\u0441\u0442\u0440\u043e) const [user, posts] = await Promise.all([fetchUser(), fetchPosts()]); // \u2705 \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u043e (\u0440\u0435\u0430\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430) const user = await fetchUser(id); const [posts, profile] = await Promise.all([ fetchPosts(user.id), fetchProfile(user.id) ]); Generators // \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 function* gen() { const a = yield 1; const b = yield a + 1; return a + b; } // Async \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 (\u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f) async function* paginatedFetch(url) { let page = 1; while (true) { const data = await fetch(`${url}?page=${page++}`); const items = await data.json(); if (items.length === 0) break; yield items; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 for await (const items of paginatedFetch('/api/data')) { process(items); } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 Promises Async/Await Generators \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0448\u0438\u0431\u043a\u0438 .catch() try/catch try/catch \u041e\u0442\u043c\u0435\u043d\u0430 \u0421\u043b\u043e\u0436\u043d\u043e \u0421\u043b\u043e\u0436\u043d\u043e \u041b\u0435\u0433\u043a\u043e \u041b\u0435\u043d\u0438\u0432\u043e\u0441\u0442\u044c \u041d\u0435\u0442 \u041d\u0435\u0442 \u0414\u0430 React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f useEffect \u0441 async // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d useEffect(() => { let cancelled = false; const fetchData = async () => { try { const result = await fetch('/api/data'); if (!cancelled) setData(await result.json()); } catch (error) { if (!cancelled) setError(error); } }; fetchData(); return () => { cancelled = true; }; }, []); Custom hooks // \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 async \u0445\u0443\u043a function useAsyncOperation(asyncFn) { const [state, dispatch] = useReducer(asyncReducer, { data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { dispatch({ type: 'START' }); try { const result = await asyncFn(...args); dispatch({ type: 'SUCCESS', payload: result }); return result; } catch (error) { dispatch({ type: 'ERROR', error }); throw error; } }, [asyncFn]); return { ...state, execute }; } // AbortController \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f function useFetch(url) { const [data, setData] = useState(null); useEffect(() => { const controller = new AbortController(); fetch(url, { signal: controller.signal }) .then(r => r.json()) .then(setData) .catch(err => err.name !== 'AbortError' && console.error(err)); return () => controller.abort(); }, [url]); return data; } \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0445\u0443\u043a function usePaginatedData(url, pageSize = 10) { const [items, setItems] = useState([]); const [hasMore, setHasMore] = useState(true); const loadMore = useCallback(async () => { const response = await fetch(`${url}?page=${page}&size=${pageSize}`); const data = await response.json(); setItems(prev => [...prev, ...data.items]); setHasMore(data.items.length === pageSize); }, [url, pageSize]); return { items, hasMore, loadMore }; } Error Handling Retry \u043f\u0430\u0442\u0442\u0435\u0440\u043d async function withRetry(fn, maxRetries = 3, delay = 1000) { for (let attempt = 1; attempt <= maxRetries; attempt++) { try { return await fn(); } catch (error) { if (attempt === maxRetries) throw error; await new Promise(r => setTimeout(r, delay * attempt)); // Exponential backoff } } } Timeout wrapper function withTimeout(promise, ms) { const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), ms) ); return Promise.race([promise, timeout]); } Senior Patterns Cancelable operations class CancelableOperation { constructor(executor) { this.cancelled = false; this.promise = new Promise((resolve, reject) => { executor( value => this.cancelled ? reject(new Error('Cancelled')) : resolve(value), error => this.cancelled ? reject(new Error('Cancelled')) : reject(error) ); }); } cancel() { this.cancelled = true; } } Queue with concurrency limit class AsyncQueue { constructor(concurrency = 3) { this.concurrency = concurrency; this.running = 0; this.queue = []; } async add(fn) { return new Promise((resolve, reject) => { this.queue.push({ fn, resolve, reject }); this.tryNext(); }); } async tryNext() { if (this.running >= this.concurrency || this.queue.length === 0) return; this.running++; const { fn, resolve, reject } = this.queue.shift(); try { const result = await fn(); resolve(result); } catch (error) { reject(error); } finally { this.running--; this.tryNext(); } } } Senior Rules AbortController \u0434\u043b\u044f \u0432\u0441\u0435\u0445 fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Promise.all \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Cleanup functions \u0432 useEffect \u0432\u0441\u0435\u0433\u0434\u0430 Error boundaries \u0434\u043b\u044f async \u043e\u0448\u0438\u0431\u043e\u043a Retry \u0441 backoff \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Debounce \u0434\u043b\u044f user input Queue \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f concurrency Generators \u0434\u043b\u044f complex iteration/cancellation Anti-patterns // \u274c async useEffect useEffect(async () => { ... }, []); // \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e // \u274c Promise hell fetch().then().then().then(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 async/await // \u274c \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup useEffect(() => { setInterval(fn, 1000); // Leak! }, []); // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 const a = await fetchA(); // \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e const b = await fetchB(); \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u0412\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup, cancellation \u0438 error handling!","title":"Async Programming - Senior Cheat Sheet (small)"},{"location":"questions/javascript/async-programming_small/#async-programming-senior-cheat-sheet-small","text":"","title":"Async Programming - Senior Cheat Sheet (small)"},{"location":"questions/javascript/async-programming_small/#promise","text":"// Promise.all - \u0432\u0441\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e const [users, posts] = await Promise.all([fetchUsers(), fetchPosts()]); // Promise.allSettled - \u0432\u0441\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u0441\u044f (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0438) const results = await Promise.allSettled([fetch1(), fetch2()]); // Promise.race - \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0439\u0441\u044f const result = await Promise.race([fetchData(), timeout(5000)]); // Promise.any - \u043f\u0435\u0440\u0432\u044b\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 (ES2021) const first = await Promise.any([slow(), fast(), failing()]);","title":"Promise \u043c\u0435\u0442\u043e\u0434\u044b"},{"location":"questions/javascript/async-programming_small/#asyncawait","text":"","title":"Async/Await \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/javascript/async-programming_small/#vs","text":"// \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e) const user = await fetchUser(); const posts = await fetchPosts(); // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e (\u0431\u044b\u0441\u0442\u0440\u043e) const [user, posts] = await Promise.all([fetchUser(), fetchPosts()]); // \u2705 \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u043e (\u0440\u0435\u0430\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430) const user = await fetchUser(id); const [posts, profile] = await Promise.all([ fetchPosts(user.id), fetchProfile(user.id) ]);","title":"\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e vs \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e"},{"location":"questions/javascript/async-programming_small/#generators","text":"// \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 function* gen() { const a = yield 1; const b = yield a + 1; return a + b; } // Async \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 (\u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f) async function* paginatedFetch(url) { let page = 1; while (true) { const data = await fetch(`${url}?page=${page++}`); const items = await data.json(); if (items.length === 0) break; yield items; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 for await (const items of paginatedFetch('/api/data')) { process(items); }","title":"Generators"},{"location":"questions/javascript/async-programming_small/#_1","text":"Promises Async/Await Generators \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041e\u0448\u0438\u0431\u043a\u0438 .catch() try/catch try/catch \u041e\u0442\u043c\u0435\u043d\u0430 \u0421\u043b\u043e\u0436\u043d\u043e \u0421\u043b\u043e\u0436\u043d\u043e \u041b\u0435\u0433\u043a\u043e \u041b\u0435\u043d\u0438\u0432\u043e\u0441\u0442\u044c \u041d\u0435\u0442 \u041d\u0435\u0442 \u0414\u0430","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432"},{"location":"questions/javascript/async-programming_small/#react","text":"","title":"React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/async-programming_small/#useeffect-async","text":"// \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d useEffect(() => { let cancelled = false; const fetchData = async () => { try { const result = await fetch('/api/data'); if (!cancelled) setData(await result.json()); } catch (error) { if (!cancelled) setError(error); } }; fetchData(); return () => { cancelled = true; }; }, []);","title":"useEffect \u0441 async"},{"location":"questions/javascript/async-programming_small/#custom-hooks","text":"// \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 async \u0445\u0443\u043a function useAsyncOperation(asyncFn) { const [state, dispatch] = useReducer(asyncReducer, { data: null, loading: false, error: null }); const execute = useCallback(async (...args) => { dispatch({ type: 'START' }); try { const result = await asyncFn(...args); dispatch({ type: 'SUCCESS', payload: result }); return result; } catch (error) { dispatch({ type: 'ERROR', error }); throw error; } }, [asyncFn]); return { ...state, execute }; } // AbortController \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f function useFetch(url) { const [data, setData] = useState(null); useEffect(() => { const controller = new AbortController(); fetch(url, { signal: controller.signal }) .then(r => r.json()) .then(setData) .catch(err => err.name !== 'AbortError' && console.error(err)); return () => controller.abort(); }, [url]); return data; }","title":"Custom hooks"},{"location":"questions/javascript/async-programming_small/#_2","text":"function usePaginatedData(url, pageSize = 10) { const [items, setItems] = useState([]); const [hasMore, setHasMore] = useState(true); const loadMore = useCallback(async () => { const response = await fetch(`${url}?page=${page}&size=${pageSize}`); const data = await response.json(); setItems(prev => [...prev, ...data.items]); setHasMore(data.items.length === pageSize); }, [url, pageSize]); return { items, hasMore, loadMore }; }","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0445\u0443\u043a"},{"location":"questions/javascript/async-programming_small/#error-handling","text":"","title":"Error Handling"},{"location":"questions/javascript/async-programming_small/#retry","text":"async function withRetry(fn, maxRetries = 3, delay = 1000) { for (let attempt = 1; attempt <= maxRetries; attempt++) { try { return await fn(); } catch (error) { if (attempt === maxRetries) throw error; await new Promise(r => setTimeout(r, delay * attempt)); // Exponential backoff } } }","title":"Retry \u043f\u0430\u0442\u0442\u0435\u0440\u043d"},{"location":"questions/javascript/async-programming_small/#timeout-wrapper","text":"function withTimeout(promise, ms) { const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), ms) ); return Promise.race([promise, timeout]); }","title":"Timeout wrapper"},{"location":"questions/javascript/async-programming_small/#senior-patterns","text":"","title":"Senior Patterns"},{"location":"questions/javascript/async-programming_small/#cancelable-operations","text":"class CancelableOperation { constructor(executor) { this.cancelled = false; this.promise = new Promise((resolve, reject) => { executor( value => this.cancelled ? reject(new Error('Cancelled')) : resolve(value), error => this.cancelled ? reject(new Error('Cancelled')) : reject(error) ); }); } cancel() { this.cancelled = true; } }","title":"Cancelable operations"},{"location":"questions/javascript/async-programming_small/#queue-with-concurrency-limit","text":"class AsyncQueue { constructor(concurrency = 3) { this.concurrency = concurrency; this.running = 0; this.queue = []; } async add(fn) { return new Promise((resolve, reject) => { this.queue.push({ fn, resolve, reject }); this.tryNext(); }); } async tryNext() { if (this.running >= this.concurrency || this.queue.length === 0) return; this.running++; const { fn, resolve, reject } = this.queue.shift(); try { const result = await fn(); resolve(result); } catch (error) { reject(error); } finally { this.running--; this.tryNext(); } } }","title":"Queue with concurrency limit"},{"location":"questions/javascript/async-programming_small/#senior-rules","text":"AbortController \u0434\u043b\u044f \u0432\u0441\u0435\u0445 fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Promise.all \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Cleanup functions \u0432 useEffect \u0432\u0441\u0435\u0433\u0434\u0430 Error boundaries \u0434\u043b\u044f async \u043e\u0448\u0438\u0431\u043e\u043a Retry \u0441 backoff \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Debounce \u0434\u043b\u044f user input Queue \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f concurrency Generators \u0434\u043b\u044f complex iteration/cancellation","title":"Senior Rules"},{"location":"questions/javascript/async-programming_small/#anti-patterns","text":"// \u274c async useEffect useEffect(async () => { ... }, []); // \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e // \u274c Promise hell fetch().then().then().then(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 async/await // \u274c \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup useEffect(() => { setInterval(fn, 1000); // Leak! }, []); // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 const a = await fetchA(); // \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e const b = await fetchB(); \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u0412\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup, cancellation \u0438 error handling!","title":"Anti-patterns"},{"location":"questions/javascript/currying/","text":"Currying \u0432 JavaScript \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 currying \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0432 React-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Currying \u2014 \u044d\u0442\u043e \u0442\u0435\u0445\u043d\u0438\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 (partial application) \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0439. \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f function curry(fn) { return function curried(...args) { if (args.length >= fn.length) { return fn(...args); } return (...nextArgs) => curried(...args, ...nextArgs); }; } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f const add = curry((a, b, c) => a + b + c); console.log(add(1)(2)(3)); // 6 console.log(add(1, 2)(3)); // 6 console.log(add(1)(2, 3)); // 6 // \u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 const add1 = add(1); console.log(add1(2, 3)); // 6 const add1and2 = add(1, 2); console.log(add1and2(3)); // 6 \u0411\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f function advancedCurry(fn, arity = fn.length) { return function curried(...args) { if (args.length >= arity) { return fn.apply(this, args); } return function(...nextArgs) { return curried.apply(this, [...args, ...nextArgs]); }; }; } // \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 placeholder const _ = Symbol('placeholder'); function curryWithPlaceholder(fn) { return function curried(...args) { if (args.length >= fn.length && !args.includes(_)) { return fn(...args); } return (...nextArgs) => { const mergedArgs = []; let nextIndex = 0; for (let i = 0; i < args.length; i++) { if (args[i] === _) { mergedArgs[i] = nextArgs[nextIndex++]; } else { mergedArgs[i] = args[i]; } } while (nextIndex < nextArgs.length) { mergedArgs.push(nextArgs[nextIndex++]); } return curried(...mergedArgs); }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 placeholder const multiply = curryWithPlaceholder((a, b, c) => a * b * c); const multiplyBy2 = multiply(_, 2, _); console.log(multiplyBy2(3, 4)); // 24 \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 import React from 'react'; // \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 function TodoListBad({ todos, onToggle, onDelete }) { return ( <ul> {todos.map(todo => ( <li key={todo.id}> <span>{todo.text}</span> <button onClick={() => onToggle(todo.id)}>Toggle</button> <button onClick={() => onDelete(todo.id)}>Delete</button> </li> ))} </ul> ); } // Curried \u043f\u043e\u0434\u0445\u043e\u0434 - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const curry = fn => (...args) => args.length >= fn.length ? fn(...args) : (...nextArgs) => curry(fn)(...args, ...nextArgs); const handleToggle = curry((onToggle, id, event) => { event.preventDefault(); onToggle(id); }); const handleDelete = curry((onDelete, id, event) => { event.preventDefault(); onDelete(id); }); function TodoListGood({ todos, onToggle, onDelete }) { const toggleHandler = handleToggle(onToggle); const deleteHandler = handleDelete(onDelete); return ( <ul> {todos.map(todo => ( <li key={todo.id}> <span>{todo.text}</span> <button onClick={toggleHandler(todo.id)}>Toggle</button> <button onClick={deleteHandler(todo.id)}>Delete</button> </li> ))} </ul> ); } 2. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 (HOC) // Curried HOC \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const withLogger = curry((logLevel, component) => { return function LoggerHOC(props) { console.log(`[${logLevel}] Rendering component:`, component.name); console.log('Props:', props); return React.createElement(component, props); }; }); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const withDebugLog = withLogger('DEBUG'); const withErrorLog = withLogger('ERROR'); const Button = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const DebugButton = withDebugLog(Button); const ErrorButton = withErrorLog(Button); 3. \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u043e\u0440\u043c // Curried \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b const validate = curry((validator, errorMessage, value) => { return validator(value) ? null : errorMessage; }); const required = validate(value => !!value, 'Field is required'); const minLength = curry((min, value) => validate(v => v.length >= min, `Minimum length is ${min}`, value) ); const email = validate( value => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value), 'Invalid email format' ); // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 const composeValidators = (...validators) => value => { for (const validator of validators) { const error = validator(value); if (error) return error; } return null; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 function UserForm() { const [form, setForm] = useState({ name: '', email: '' }); const [errors, setErrors] = useState({}); const validateName = composeValidators(required, minLength(2)); const validateEmail = composeValidators(required, email); const handleChange = curry((field, event) => { const value = event.target.value; setForm(prev => ({ ...prev, [field]: value })); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 const validator = field === 'name' ? validateName : validateEmail; const error = validator(value); setErrors(prev => ({ ...prev, [field]: error })); }); return ( <form> <input value={form.name} onChange={handleChange('name')} placeholder=\"Name\" /> {errors.name && <span>{errors.name}</span>} <input value={form.email} onChange={handleChange('email')} placeholder=\"Email\" /> {errors.email && <span>{errors.email}</span>} </form> ); } 4. API \u0437\u0430\u043f\u0440\u043e\u0441\u044b // Curried \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 const apiRequest = curry((baseURL, method, endpoint, options = {}) => { return fetch(`${baseURL}${endpoint}`, { method, headers: { 'Content-Type': 'application/json', ...options.headers, }, ...options, }).then(response => { if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); }); }); // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const api = apiRequest('https://api.example.com'); const get = api('GET'); const post = api('POST'); const put = api('PUT'); const del = api('DELETE'); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { setLoading(true); get(`/users/${userId}`) .then(setUser) .catch(console.error) .finally(() => setLoading(false)); }, [userId]); const updateUser = useCallback( (updates) => put(`/users/${userId}`, { body: JSON.stringify(updates) }), [userId] ); if (loading) return <div>Loading...</div>; if (!user) return <div>User not found</div>; return <div>{user.name}</div>; } \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f curried \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const memoizedCurry = (fn) => { const cache = new Map(); return function curried(...args) { const key = args.join(','); if (cache.has(key)) { return cache.get(key); } if (args.length >= fn.length) { const result = fn(...args); cache.set(key, result); return result; } const partial = (...nextArgs) => curried(...args, ...nextArgs); cache.set(key, partial); return partial; }; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 React.memo \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 const MemoizedComponent = React.memo(({ onAction, data }) => { return ( <div> {data.map(item => ( <button key={item.id} onClick={onAction(item.id)}> {item.name} </button> ))} </div> ); }); \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f : \u041b\u0435\u0433\u043a\u043e\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c : \u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u0418\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041e\u0442\u043b\u0430\u0434\u043a\u0430 : \u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u043d\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 currying \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e : \u041d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0432\u0435\u0437\u0434\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u043e\u0434 \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f : \u041a\u044d\u0448\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 TypeScript : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 curried \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 : \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 lodash.curry \u0438\u043b\u0438 ramda \u0434\u043b\u044f production React.useCallback : \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u0445\u0443\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Redux/Zustand // Curried actions \u0434\u043b\u044f Redux const createAction = curry((type, payload) => ({ type, payload })); const setUser = createAction('SET_USER'); const setLoading = createAction('SET_LOADING'); const setError = createAction('SET_ERROR'); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 dispatch(setUser({ id: 1, name: 'John' })); dispatch(setLoading(true)); \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Higher-Order Components (HOC) useEffect \u0438 Side Effects TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445","title":"Currying \u0432 JavaScript"},{"location":"questions/javascript/currying/#currying-javascript","text":"","title":"Currying \u0432 JavaScript"},{"location":"questions/javascript/currying/#_1","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 currying \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0432 React-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/currying/#_2","text":"Currying \u2014 \u044d\u0442\u043e \u0442\u0435\u0445\u043d\u0438\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 (partial application) \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0439.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/currying/#_3","text":"function curry(fn) { return function curried(...args) { if (args.length >= fn.length) { return fn(...args); } return (...nextArgs) => curried(...args, ...nextArgs); }; } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f const add = curry((a, b, c) => a + b + c); console.log(add(1)(2)(3)); // 6 console.log(add(1, 2)(3)); // 6 console.log(add(1)(2, 3)); // 6 // \u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 const add1 = add(1); console.log(add1(2, 3)); // 6 const add1and2 = add(1, 2); console.log(add1and2(3)); // 6","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying/#_4","text":"function advancedCurry(fn, arity = fn.length) { return function curried(...args) { if (args.length >= arity) { return fn.apply(this, args); } return function(...nextArgs) { return curried.apply(this, [...args, ...nextArgs]); }; }; } // \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 placeholder const _ = Symbol('placeholder'); function curryWithPlaceholder(fn) { return function curried(...args) { if (args.length >= fn.length && !args.includes(_)) { return fn(...args); } return (...nextArgs) => { const mergedArgs = []; let nextIndex = 0; for (let i = 0; i < args.length; i++) { if (args[i] === _) { mergedArgs[i] = nextArgs[nextIndex++]; } else { mergedArgs[i] = args[i]; } } while (nextIndex < nextArgs.length) { mergedArgs.push(nextArgs[nextIndex++]); } return curried(...mergedArgs); }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 placeholder const multiply = curryWithPlaceholder((a, b, c) => a * b * c); const multiplyBy2 = multiply(_, 2, _); console.log(multiplyBy2(3, 4)); // 24","title":"\u0411\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying/#react","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445"},{"location":"questions/javascript/currying/#1","text":"import React from 'react'; // \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 function TodoListBad({ todos, onToggle, onDelete }) { return ( <ul> {todos.map(todo => ( <li key={todo.id}> <span>{todo.text}</span> <button onClick={() => onToggle(todo.id)}>Toggle</button> <button onClick={() => onDelete(todo.id)}>Delete</button> </li> ))} </ul> ); } // Curried \u043f\u043e\u0434\u0445\u043e\u0434 - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const curry = fn => (...args) => args.length >= fn.length ? fn(...args) : (...nextArgs) => curry(fn)(...args, ...nextArgs); const handleToggle = curry((onToggle, id, event) => { event.preventDefault(); onToggle(id); }); const handleDelete = curry((onDelete, id, event) => { event.preventDefault(); onDelete(id); }); function TodoListGood({ todos, onToggle, onDelete }) { const toggleHandler = handleToggle(onToggle); const deleteHandler = handleDelete(onDelete); return ( <ul> {todos.map(todo => ( <li key={todo.id}> <span>{todo.text}</span> <button onClick={toggleHandler(todo.id)}>Toggle</button> <button onClick={deleteHandler(todo.id)}>Delete</button> </li> ))} </ul> ); }","title":"1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439"},{"location":"questions/javascript/currying/#2-hoc","text":"// Curried HOC \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const withLogger = curry((logLevel, component) => { return function LoggerHOC(props) { console.log(`[${logLevel}] Rendering component:`, component.name); console.log('Props:', props); return React.createElement(component, props); }; }); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const withDebugLog = withLogger('DEBUG'); const withErrorLog = withLogger('ERROR'); const Button = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const DebugButton = withDebugLog(Button); const ErrorButton = withErrorLog(Button);","title":"2. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 (HOC)"},{"location":"questions/javascript/currying/#3","text":"// Curried \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b const validate = curry((validator, errorMessage, value) => { return validator(value) ? null : errorMessage; }); const required = validate(value => !!value, 'Field is required'); const minLength = curry((min, value) => validate(v => v.length >= min, `Minimum length is ${min}`, value) ); const email = validate( value => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value), 'Invalid email format' ); // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 const composeValidators = (...validators) => value => { for (const validator of validators) { const error = validator(value); if (error) return error; } return null; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 function UserForm() { const [form, setForm] = useState({ name: '', email: '' }); const [errors, setErrors] = useState({}); const validateName = composeValidators(required, minLength(2)); const validateEmail = composeValidators(required, email); const handleChange = curry((field, event) => { const value = event.target.value; setForm(prev => ({ ...prev, [field]: value })); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 const validator = field === 'name' ? validateName : validateEmail; const error = validator(value); setErrors(prev => ({ ...prev, [field]: error })); }); return ( <form> <input value={form.name} onChange={handleChange('name')} placeholder=\"Name\" /> {errors.name && <span>{errors.name}</span>} <input value={form.email} onChange={handleChange('email')} placeholder=\"Email\" /> {errors.email && <span>{errors.email}</span>} </form> ); }","title":"3. \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u043e\u0440\u043c"},{"location":"questions/javascript/currying/#4-api","text":"// Curried \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 const apiRequest = curry((baseURL, method, endpoint, options = {}) => { return fetch(`${baseURL}${endpoint}`, { method, headers: { 'Content-Type': 'application/json', ...options.headers, }, ...options, }).then(response => { if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); }); }); // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const api = apiRequest('https://api.example.com'); const get = api('GET'); const post = api('POST'); const put = api('PUT'); const del = api('DELETE'); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { setLoading(true); get(`/users/${userId}`) .then(setUser) .catch(console.error) .finally(() => setLoading(false)); }, [userId]); const updateUser = useCallback( (updates) => put(`/users/${userId}`, { body: JSON.stringify(updates) }), [userId] ); if (loading) return <div>Loading...</div>; if (!user) return <div>User not found</div>; return <div>{user.name}</div>; }","title":"4. API \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/javascript/currying/#_5","text":"// \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f curried \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const memoizedCurry = (fn) => { const cache = new Map(); return function curried(...args) { const key = args.join(','); if (cache.has(key)) { return cache.get(key); } if (args.length >= fn.length) { const result = fn(...args); cache.set(key, result); return result; } const partial = (...nextArgs) => curried(...args, ...nextArgs); cache.set(key, partial); return partial; }; }; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 React.memo \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 const MemoizedComponent = React.memo(({ onAction, data }) => { return ( <div> {data.map(item => ( <button key={item.id} onClick={onAction(item.id)}> {item.name} </button> ))} </div> ); });","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying/#_6","text":"","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/javascript/currying/#_7","text":"\u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f : \u041b\u0435\u0433\u043a\u043e\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c : \u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c : \u0418\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430"},{"location":"questions/javascript/currying/#_8","text":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041e\u0442\u043b\u0430\u0434\u043a\u0430 : \u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u043d\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438"},{"location":"questions/javascript/currying/#senior-","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 currying \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e : \u041d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0432\u0435\u0437\u0434\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u043e\u0434 \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f : \u041a\u044d\u0448\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 TypeScript : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 curried \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 : \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 lodash.curry \u0438\u043b\u0438 ramda \u0434\u043b\u044f production React.useCallback : \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u0445\u0443\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/currying/#reduxzustand","text":"// Curried actions \u0434\u043b\u044f Redux const createAction = curry((type, payload) => ({ type, payload })); const setUser = createAction('SET_USER'); const setLoading = createAction('SET_LOADING'); const setError = createAction('SET_ERROR'); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 dispatch(setUser({ id: 1, name: 'John' })); dispatch(setLoading(true));","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Redux/Zustand"},{"location":"questions/javascript/currying/#_9","text":"Higher-Order Components (HOC) useEffect \u0438 Side Effects TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/currying_small/","text":"Currying - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small) \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f const curry = fn => (...args) => args.length >= fn.length ? fn(...args) : (...nextArgs) => curry(fn)(...args, ...nextArgs); React \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 Event handlers (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f) const handleToggle = curry((onToggle, id, event) => { event.preventDefault(); onToggle(id); }); // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 const toggleHandler = handleToggle(onToggle); return <button onClick={toggleHandler(todo.id)}>Toggle</button>; HOC const withLogger = curry((logLevel, component) => { return function LoggerHOC(props) { console.log(`[${logLevel}]`, component.name, props); return React.createElement(component, props); }; }); const withDebug = withLogger('DEBUG'); \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f const validate = curry((validator, errorMessage, value) => validator(value) ? null : errorMessage ); const required = validate(value => !!value, 'Required'); const minLength = curry((min, value) => validate(v => v.length >= min, `Min ${min} chars`, value) ); // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f const validateName = composeValidators(required, minLength(2)); API const apiRequest = curry((baseURL, method, endpoint, options = {}) => fetch(`${baseURL}${endpoint}`, { method, ...options }) ); const api = apiRequest('https://api.example.com'); const get = api('GET'); const post = api('POST'); \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f const memoizedCurry = (fn) => { const cache = new Map(); return function curried(...args) { const key = args.join(','); if (cache.has(key)) return cache.get(key); const result = args.length >= fn.length ? fn(...args) : (...nextArgs) => curried(...args, ...nextArgs); cache.set(key, result); return result; }; }; Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 React.memo \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 production \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 lodash.curry \u0438\u043b\u0438 ramda \u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e \u0441 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u043c nesting - \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c Redux \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f ```javascript const createAction = curry((type, payload) => ({ type, payload })); const setUser = createAction('SET_USER'); dispatch(setUser({ id: 1, name: 'John' }));","title":"Currying - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/currying_small/#currying-small","text":"","title":"Currying - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/currying_small/#_1","text":"const curry = fn => (...args) => args.length >= fn.length ? fn(...args) : (...nextArgs) => curry(fn)(...args, ...nextArgs);","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying_small/#react","text":"","title":"React \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435"},{"location":"questions/javascript/currying_small/#event-handlers","text":"const handleToggle = curry((onToggle, id, event) => { event.preventDefault(); onToggle(id); }); // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 const toggleHandler = handleToggle(onToggle); return <button onClick={toggleHandler(todo.id)}>Toggle</button>;","title":"Event handlers (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f)"},{"location":"questions/javascript/currying_small/#hoc","text":"const withLogger = curry((logLevel, component) => { return function LoggerHOC(props) { console.log(`[${logLevel}]`, component.name, props); return React.createElement(component, props); }; }); const withDebug = withLogger('DEBUG');","title":"HOC"},{"location":"questions/javascript/currying_small/#_2","text":"const validate = curry((validator, errorMessage, value) => validator(value) ? null : errorMessage ); const required = validate(value => !!value, 'Required'); const minLength = curry((min, value) => validate(v => v.length >= min, `Min ${min} chars`, value) ); // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f const validateName = composeValidators(required, minLength(2));","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying_small/#api","text":"const apiRequest = curry((baseURL, method, endpoint, options = {}) => fetch(`${baseURL}${endpoint}`, { method, ...options }) ); const api = apiRequest('https://api.example.com'); const get = api('GET'); const post = api('POST');","title":"API"},{"location":"questions/javascript/currying_small/#_3","text":"","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/javascript/currying_small/#_4","text":"const memoizedCurry = (fn) => { const cache = new Map(); return function curried(...args) { const key = args.join(','); if (cache.has(key)) return cache.get(key); const result = args.length >= fn.length ? fn(...args) : (...nextArgs) => curried(...args, ...nextArgs); cache.set(key, result); return result; }; };","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/currying_small/#senior-","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 React.memo \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 production \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 lodash.curry \u0438\u043b\u0438 ramda \u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e \u0441 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u043c nesting - \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/currying_small/#redux","text":"```javascript const createAction = curry((type, payload) => ({ type, payload })); const setUser = createAction('SET_USER'); dispatch(setUser({ id: 1, name: 'John' }));","title":"Redux \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/event-loop/","text":"Event Loop, Microtasks \u0438 Macrotasks \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c event loop \u0432 JavaScript, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u043e\u043b\u044c microtasks \u0438 macrotasks. \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Event loop \u2014 \u044d\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0432 JavaScript (\u0432 runtime \u0432\u0440\u043e\u0434\u0435 V8 \u0432 Node.js \u0438\u043b\u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u0445), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. JavaScript \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439, \u043d\u043e event loop \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e non-blocking, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Call stack: \u0421\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, \u0433\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442, event loop \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. Web APIs: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (setTimeout, fetch) \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0444\u043e\u043d\u0435 (\u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u2014 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445). Task queue (macrotasks): \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f macrotasks, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a setTimeout, setInterval, I/O \u0432 Node.js, \u0441\u043e\u0431\u044b\u0442\u0438\u044f DOM (click). \u041e\u043d\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Web APIs. Microtask queue: \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f microtasks \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u043c, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a Promise.resolve().then(), process.nextTick (\u0432 Node.js), MutationObserver. Microtasks \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 macrotask, \u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u043e\u043c. \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 Event loop \u043a\u0440\u0443\u0442\u0438\u0442\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435: \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 call stack. \u0415\u0441\u043b\u0438 \u043f\u0443\u0441\u0442 \u2014 \u0431\u0435\u0440\u0435\u0442 microtasks \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430. \u0417\u0430\u0442\u0435\u043c macrotasks \u2014 \u043e\u0434\u043d\u0443 \u0437\u0430 \u0440\u0430\u0437. \u041f\u043e\u0441\u043b\u0435 macrotask \u0441\u043d\u043e\u0432\u0430 microtasks, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: Microtasks > Rendering (\u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435) > Macrotasks. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask console.log('4'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u0412\u044b\u0432\u043e\u0434: 1 4 3 2 \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f console.log('1') - \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setTimeout - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 callback \u0432 macrotask queue Promise.resolve().then() - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 callback \u0432 microtask queue console.log('4') - \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e Call stack \u043f\u0443\u0441\u0442, event loop \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 microtask queue - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 Promise.then \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 macrotask queue - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 setTimeout \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 console.log('start'); setTimeout(() => console.log('timeout 1'), 0); setTimeout(() => console.log('timeout 2'), 0); Promise.resolve().then(() => { console.log('promise 1'); return Promise.resolve(); }).then(() => { console.log('promise 2'); }); Promise.resolve().then(() => { console.log('promise 3'); }); console.log('end'); // \u0412\u044b\u0432\u043e\u0434: start end promise 1 promise 3 promise 2 timeout 1 timeout 2 \u0412\u0430\u0436\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0434\u043b\u044f React \u041d\u0430 senior-\u0443\u0440\u043e\u0432\u043d\u0435 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 React: useEffect \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c race conditions setState \u0432 Promise.then \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u044c\u0448\u0435 setTimeout Batch updates \u0432 React 18 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 event loop \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 UI function heavyTask() { for (let i = 0; i < 1000000; i++) { // \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 function heavyTaskAsync(start = 0) { const chunk = 10000; for (let i = start; i < start + chunk && i < 1000000; i++) { // \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } if (start + chunk < 1000000) { setTimeout(() => heavyTaskAsync(start + chunk), 0); } } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0439 \u0432 microtasks, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c UI \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 performance.mark \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0412 Node.js process.nextTick \u0438\u043c\u0435\u0435\u0442 \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0447\u0435\u043c \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 event loop \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 Chrome DevTools Performance tab console.time \u0438 console.timeEnd React DevTools Profiler \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Promises, Async/Await \u0438 Generators useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18","title":"Event Loop, Microtasks \u0438 Macrotasks"},{"location":"questions/javascript/event-loop/#event-loop-microtasks-macrotasks","text":"","title":"Event Loop, Microtasks \u0438 Macrotasks"},{"location":"questions/javascript/event-loop/#_1","text":"\u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c event loop \u0432 JavaScript, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u043e\u043b\u044c microtasks \u0438 macrotasks.","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/event-loop/#_2","text":"Event loop \u2014 \u044d\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0432 JavaScript (\u0432 runtime \u0432\u0440\u043e\u0434\u0435 V8 \u0432 Node.js \u0438\u043b\u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u0445), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. JavaScript \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439, \u043d\u043e event loop \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e non-blocking, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/event-loop/#_3","text":"Call stack: \u0421\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, \u0433\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442, event loop \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. Web APIs: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (setTimeout, fetch) \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0444\u043e\u043d\u0435 (\u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u2014 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445). Task queue (macrotasks): \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f macrotasks, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a setTimeout, setInterval, I/O \u0432 Node.js, \u0441\u043e\u0431\u044b\u0442\u0438\u044f DOM (click). \u041e\u043d\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Web APIs. Microtask queue: \u041e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f microtasks \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u043c, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a Promise.resolve().then(), process.nextTick (\u0432 Node.js), MutationObserver. Microtasks \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 macrotask, \u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u043e\u043c.","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"questions/javascript/event-loop/#_4","text":"Event loop \u043a\u0440\u0443\u0442\u0438\u0442\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435: \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 call stack. \u0415\u0441\u043b\u0438 \u043f\u0443\u0441\u0442 \u2014 \u0431\u0435\u0440\u0435\u0442 microtasks \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430. \u0417\u0430\u0442\u0435\u043c macrotasks \u2014 \u043e\u0434\u043d\u0443 \u0437\u0430 \u0440\u0430\u0437. \u041f\u043e\u0441\u043b\u0435 macrotask \u0441\u043d\u043e\u0432\u0430 microtasks, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: Microtasks > Rendering (\u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435) > Macrotasks.","title":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442"},{"location":"questions/javascript/event-loop/#_5","text":"console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask console.log('4'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u0412\u044b\u0432\u043e\u0434: 1 4 3 2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/event-loop/#_6","text":"console.log('1') - \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setTimeout - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 callback \u0432 macrotask queue Promise.resolve().then() - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 callback \u0432 microtask queue console.log('4') - \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e Call stack \u043f\u0443\u0441\u0442, event loop \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 microtask queue - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 Promise.then \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 macrotask queue - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 setTimeout","title":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/event-loop/#_7","text":"console.log('start'); setTimeout(() => console.log('timeout 1'), 0); setTimeout(() => console.log('timeout 2'), 0); Promise.resolve().then(() => { console.log('promise 1'); return Promise.resolve(); }).then(() => { console.log('promise 2'); }); Promise.resolve().then(() => { console.log('promise 3'); }); console.log('end'); // \u0412\u044b\u0432\u043e\u0434: start end promise 1 promise 3 promise 2 timeout 1 timeout 2","title":"\u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440"},{"location":"questions/javascript/event-loop/#react","text":"\u041d\u0430 senior-\u0443\u0440\u043e\u0432\u043d\u0435 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 React: useEffect \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c race conditions setState \u0432 Promise.then \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u044c\u0448\u0435 setTimeout Batch updates \u0432 React 18 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 event loop","title":"\u0412\u0430\u0436\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0434\u043b\u044f React"},{"location":"questions/javascript/event-loop/#_8","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 UI function heavyTask() { for (let i = 0; i < 1000000; i++) { // \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 function heavyTaskAsync(start = 0) { const chunk = 10000; for (let i = start; i < start + chunk && i < 1000000; i++) { // \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } if (start + chunk < 1000000) { setTimeout(() => heavyTaskAsync(start + chunk), 0); } }","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/javascript/event-loop/#senior-","text":"\u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0439 \u0432 microtasks, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c UI \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 performance.mark \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0412 Node.js process.nextTick \u0438\u043c\u0435\u0435\u0442 \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0447\u0435\u043c \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 event loop \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/event-loop/#_9","text":"Chrome DevTools Performance tab console.time \u0438 console.timeEnd React DevTools Profiler \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430"},{"location":"questions/javascript/event-loop/#_10","text":"Promises, Async/Await \u0438 Generators useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/event-loop_small/","text":"Event Loop - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small) \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Call stack - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 Microtask queue - Promise.then, queueMicrotask (\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432\u044b\u0448\u0435) Macrotask queue - setTimeout, setInterval, I/O \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 microtasks \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0431\u0440\u0430\u0443\u0437\u0435\u0440) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u0443 macrotask \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0441 \u043f.2 \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 console.log('1'); setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask console.log('4'); // \u0412\u044b\u0432\u043e\u0434: 1 4 3 2 Senior-\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f setState \u0432 Promise.then \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u044c\u0448\u0435 setTimeout Batch updates \u0432 React 18 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 event loop useEffect cleanup \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c race conditions Node.js \u043e\u0442\u043b\u0438\u0447\u0438\u044f process.nextTick \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432\u044b\u0448\u0435 Promise.then setImmediate vs setTimeout(0) - \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0437\u044b \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c // \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 UI for (let i = 0; i < 1000000; i++) { /* \u0440\u0430\u0431\u043e\u0442\u0430 */ } // \u2705 \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043d\u0430 chunks function workChunk(data, index = 0) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 if (index < data.length) { setTimeout(() => workChunk(data, index + 1000), 0); } } \u0427\u0430\u0441\u0442\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 microtasks \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0413\u043b\u0443\u0431\u043e\u043a\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f \u0432 Promise.then \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a cleanup \u0432 useEffect \u041e\u0442\u043b\u0430\u0434\u043a\u0430 Chrome DevTools Performance performance.mark/measure React DevTools Profiler","title":"Event Loop - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/event-loop_small/#event-loop-small","text":"","title":"Event Loop - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/event-loop_small/#_1","text":"Call stack - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 Microtask queue - Promise.then, queueMicrotask (\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432\u044b\u0448\u0435) Macrotask queue - setTimeout, setInterval, I/O","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"questions/javascript/event-loop_small/#_2","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 microtasks \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0431\u0440\u0430\u0443\u0437\u0435\u0440) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u0443 macrotask \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0441 \u043f.2","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/event-loop_small/#_3","text":"console.log('1'); setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask console.log('4'); // \u0412\u044b\u0432\u043e\u0434: 1 4 3 2","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440"},{"location":"questions/javascript/event-loop_small/#senior-","text":"","title":"Senior-\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/event-loop_small/#react","text":"setState \u0432 Promise.then \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u044c\u0448\u0435 setTimeout Batch updates \u0432 React 18 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 event loop useEffect cleanup \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c race conditions","title":"React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/event-loop_small/#nodejs","text":"process.nextTick \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432\u044b\u0448\u0435 Promise.then setImmediate vs setTimeout(0) - \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0437\u044b","title":"Node.js \u043e\u0442\u043b\u0438\u0447\u0438\u044f"},{"location":"questions/javascript/event-loop_small/#_4","text":"// \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 UI for (let i = 0; i < 1000000; i++) { /* \u0440\u0430\u0431\u043e\u0442\u0430 */ } // \u2705 \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043d\u0430 chunks function workChunk(data, index = 0) { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 if (index < data.length) { setTimeout(() => workChunk(data, index + 1000), 0); } }","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/javascript/event-loop_small/#_5","text":"\u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 microtasks \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0413\u043b\u0443\u0431\u043e\u043a\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f \u0432 Promise.then \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a cleanup \u0432 useEffect","title":"\u0427\u0430\u0441\u0442\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438"},{"location":"questions/javascript/event-loop_small/#_6","text":"Chrome DevTools Performance performance.mark/measure React DevTools Profiler","title":"\u041e\u0442\u043b\u0430\u0434\u043a\u0430"},{"location":"questions/javascript/execution-model/","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript: \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u0430\u043a\u0440\u043e- \u0438 \u043c\u0438\u043a\u0440\u043e\u0437\u0430\u0434\u0430\u0447, \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u0438 async/await. \u041a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f setTimeout(0), queueMicrotask, Promise.then, requestAnimationFrame? \u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0430? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 \u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0430\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, event loop, \u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b // \u041a\u043e\u043d\u0446\u0435\u043f\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: /* \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Call Stack \u2502 \u2502 Web APIs \u2502 \u2502 Task Queues \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2022 setTimeout \u2502 \u2502 \u2022 Macrotasks \u2502 \u2502 \u2502 Function 3 \u2502 \u2502 \u2502 \u2022 fetch \u2502 \u2502 \u2022 Microtasks \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2022 DOM events \u2502 \u2502 \u2022 Animation \u2502 \u2502 \u2502 Function 2 \u2502 \u2502 \u2502 \u2022 etc. \u2502 \u2502 frames \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Function 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Event Loop \u2502 \u2502 \u2502 \u2502 \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u2502 \u2502 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0435\u043a\u043e\u043c \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044f\u043c\u0438 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 */ \u0421\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 (Call Stack) function first() { console.log('First'); second(); console.log('First End'); } function second() { console.log('Second'); third(); console.log('Second End'); } function third() { console.log('Third'); } first(); // Call Stack \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: // 1. [first] // 2. [first, second] // 3. [first, second, third] // 4. [first, second] (third \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // 5. [first] (second \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // 6. [] (first \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // \u0412\u044b\u0432\u043e\u0434: // First // Second // Third // Second End // First End \u041e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 Macrotasks (Task Queue) // Macrotasks \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442: // - setTimeout/setInterval // - setImmediate (Node.js) // - I/O operations // - UI rendering // - DOM events console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => { console.log('2'); // Macrotask }, 0); setTimeout(() => { console.log('3'); // Macrotask }, 0); console.log('4'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 4, 2, 3 Microtasks (Job Queue) // Microtasks \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442: // - Promise.then/catch/finally // - queueMicrotask // - MutationObserver // - process.nextTick (Node.js) console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e Promise.resolve().then(() => { console.log('2'); // Microtask }); queueMicrotask(() => { console.log('3'); // Microtask }); setTimeout(() => { console.log('4'); // Macrotask }, 0); console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 5, 2, 3, 4 // \u0412\u0441\u0435 microtasks \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u044e\u0431\u043e\u0439 macrotask \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 setTimeout(0) vs queueMicrotask vs Promise.then console.log('=== Start ==='); // Macrotask setTimeout(() => console.log('setTimeout 0'), 0); // Microtask queueMicrotask(() => console.log('queueMicrotask')); // Microtask Promise.resolve().then(() => console.log('Promise.then')); // Microtask (\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432 Node.js) if (typeof process !== 'undefined') { process.nextTick(() => console.log('nextTick')); } console.log('=== End ==='); /* \u0412\u044b\u0432\u043e\u0434: === Start === === End === nextTick (\u0442\u043e\u043b\u044c\u043a\u043e \u0432 Node.js) queueMicrotask Promise.then setTimeout 0 */ requestAnimationFrame console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e requestAnimationFrame(() => { console.log('2'); // Animation frame (\u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c) }); setTimeout(() => { console.log('3'); // Macrotask }, 0); Promise.resolve().then(() => { console.log('4'); // Microtask }); console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e /* \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043e\u0431\u044b\u0447\u043d\u043e: 1 5 4 2 3 requestAnimationFrame \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c, \u043d\u043e \u043f\u043e\u0441\u043b\u0435 microtasks */ Event Loop \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c // \u041f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434 Event Loop: /* while (eventLoop.waitForTask()) { const task = eventLoop.nextTask(); execute(task); // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0412\u0421\u0415 microtasks while (microtaskQueue.hasTasks()) { const microtask = microtaskQueue.nextMicrotask(); execute(microtask); } // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e) if (shouldRender()) { // Animation callbacks runAnimationCallbacks(); render(); } } */ // \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: function demonstrateEventLoop() { console.log('Script start'); setTimeout(() => console.log('setTimeout 1'), 0); Promise.resolve().then(() => { console.log('Promise 1'); // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 microtask return Promise.resolve(); }).then(() => { console.log('Promise 2'); }); setTimeout(() => console.log('setTimeout 2'), 0); console.log('Script end'); } demonstrateEventLoop(); /* \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 1. Script start (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) 2. Script end (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) 3. Promise 1 (microtask) 4. Promise 2 (microtask, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 Promise 1) 5. setTimeout 1 (macrotask) 6. setTimeout 2 (macrotask) */ \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 microtasks // \u274c \u041e\u043f\u0430\u0441\u043d\u043e: \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c event loop function recursiveMicrotask() { Promise.resolve().then(() => { console.log('Microtask'); recursiveMicrotask(); // \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f microtasks }); } // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0442\u0430\u043a \u043a\u0430\u043a macrotasks \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e: \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c function safeRecursiveMicrotask(count = 0) { if (count < 5) { Promise.resolve().then(() => { console.log('Microtask', count); safeRecursiveMicrotask(count + 1); }); } } \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0435 async/await \u0438 \u043f\u0440\u043e\u043c\u0438\u0441\u044b async function complexAsyncFlow() { console.log('1'); // Microtask await Promise.resolve(); console.log('2'); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d microtask await Promise.resolve(); console.log('3'); // Macrotask setTimeout(() => console.log('4'), 0); // Microtask await Promise.resolve(); console.log('5'); } console.log('Start'); complexAsyncFlow(); console.log('End'); /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a: Start 1 End 2 3 5 4 */ \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438 1. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u0446\u0438\u043a\u043b\u0430\u0445 // \u274c \u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 for (let i = 0; i < 3; i++) { setTimeout(() => console.log('setTimeout', i), 0); Promise.resolve().then(() => console.log('Promise', i)); } /* \u0412\u044b\u0432\u043e\u0434: Promise 0 Promise 1 Promise 2 setTimeout 0 setTimeout 1 setTimeout 2 \u0412\u0441\u0435 \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u044e\u0431\u044b\u043c setTimeout */ 2. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0446\u0438\u043a\u043b\u0430\u0445 const urls = ['/api/1', '/api/2', '/api/3']; // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 async function fetchSequential() { const results = []; for (const url of urls) { const data = await fetch(url); results.push(data); } return results; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 async function fetchParallel() { const promises = urls.map(url => fetch(url)); return Promise.all(promises); } // \u274c \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u043e\u0435 (\u0447\u0430\u0441\u0442\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430) async function fetchMixed() { const results = []; urls.forEach(async (url) => { const data = await fetch(url); // await \u043d\u0435 \u0436\u0434\u0435\u0442\u0441\u044f \u0432 forEach results.push(data); }); return results; // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432! } 3. Promise constructors vs static methods // \u0420\u0430\u0437\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 console.log('1'); // Immediate microtask Promise.resolve().then(() => { console.log('2'); throw new Error('Error in then'); }).catch(() => { console.log('3'); }); // Macrotask setTimeout(() => { console.log('4'); throw new Error('Error in setTimeout'); // Uncaught! }, 0); console.log('5'); /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1 5 2 3 4 Error: Error in setTimeout (uncaught) */ \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React Race conditions \u0432 useEffect import React, { useState, useEffect } from 'react'; // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 race condition function BadComponent({ userId }) { const [user, setUser] = useState(null); useEffect(() => { // \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 userId \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c race condition fetch(`/api/users/${userId}`) .then(response => response.json()) .then(setUser); // \u041c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 }, [userId]); return <div>{user?.name}</div>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 \u0444\u043b\u0430\u0433\u043e\u043c \u043e\u0442\u043c\u0435\u043d\u044b function GoodComponent({ userId }) { const [user, setUser] = useState(null); useEffect(() => { let isCancelled = false; fetch(`/api/users/${userId}`) .then(response => response.json()) .then(userData => { if (!isCancelled) { setUser(userData); } }); return () => { isCancelled = true; }; }, [userId]); return <div>{user?.name}</div>; } Timing \u0432 React updates function TimingComponent() { const [count, setCount] = useState(0); const handleClick = () => { console.log('1 - Click handler start'); setCount(c => c + 1); // Scheduled update console.log('2 - After setState'); Promise.resolve().then(() => { console.log('3 - Promise.then'); // Microtask }); setTimeout(() => { console.log('4 - setTimeout'); // Macrotask }, 0); console.log('5 - Click handler end'); }; console.log('6 - Render with count:', count); return <button onClick={handleClick}>Count: {count}</button>; } /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043a\u043b\u0438\u043a\u0435: 6 - Render with count: 0 1 - Click handler start 2 - After setState 5 - Click handler end 3 - Promise.then 6 - Render with count: 1 (React update) 4 - setTimeout */ \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 Performance API function measureTiming() { performance.mark('start'); setTimeout(() => { performance.mark('timeout'); performance.measure('timeout-duration', 'start', 'timeout'); const measure = performance.getEntriesByName('timeout-duration')[0]; console.log(`Timeout took: ${measure.duration}ms`); }, 100); Promise.resolve().then(() => { performance.mark('promise'); performance.measure('promise-duration', 'start', 'promise'); const measure = performance.getEntriesByName('promise-duration')[0]; console.log(`Promise took: ${measure.duration}ms`); }); } Chrome DevTools // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 console.time \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f console.time('total-operation'); console.time('sync-part'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f console.timeEnd('sync-part'); console.time('async-part'); Promise.resolve().then(() => { console.timeEnd('async-part'); console.timeEnd('total-operation'); }); \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 1. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 UI // \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f function heavySync() { for (let i = 0; i < 10000000; i++) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } } // \u2705 \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 async function heavyAsync() { const chunkSize = 100000; const total = 10000000; for (let i = 0; i < total; i += chunkSize) { // \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0447\u0430\u043d\u043a for (let j = i; j < Math.min(i + chunkSize, total); j++) { // \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } // \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u043c event loop \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 await new Promise(resolve => setTimeout(resolve, 0)); } } 2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 // \u2705 \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f function optimizedUserInteraction() { // 1. \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 UI feedback (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) showLoadingState(); // 2. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 microtasks Promise.resolve().then(() => { updateCriticalUI(); }); // 3. \u041d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 macrotasks setTimeout(() => { performAnalytics(); prefetchData(); }, 0); } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b : Microtasks > Animation frames > Macrotasks \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 microtasks - \u043e\u043d\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 async \u043a\u043e\u0434 \u0441 Performance API \u0412 React \u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 race conditions \u0432 useEffect \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0439\u0442\u0435 \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0447\u0430\u043d\u043a\u0438 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 timing-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u043a\u043e\u0434 \u0441 mock timers Debugging \u0442\u0435\u0445\u043d\u0438\u043a\u0438 // Wrapper \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function trackExecution(name, fn) { console.log(`${name} scheduled`); return (...args) => { console.log(`${name} executing`); const result = fn(...args); console.log(`${name} completed`); return result; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 setTimeout(trackExecution('timeout', () => { console.log('Timeout work'); }), 0); Promise.resolve().then(trackExecution('promise', () => { console.log('Promise work'); })); queueMicrotask(trackExecution('microtask', () => { console.log('Microtask work'); })); \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Event Loop, Microtasks \u0438 Macrotasks Promises, Async/Await \u0438 Generators \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 useEffect \u0438 Side Effects","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript"},{"location":"questions/javascript/execution-model/#javascript","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript"},{"location":"questions/javascript/execution-model/#_1","text":"\u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript: \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u0430\u043a\u0440\u043e- \u0438 \u043c\u0438\u043a\u0440\u043e\u0437\u0430\u0434\u0430\u0447, \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u0438 async/await. \u041a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f setTimeout(0), queueMicrotask, Promise.then, requestAnimationFrame? \u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0430?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/execution-model/#_2","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f JavaScript \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0430\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432, event loop, \u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/execution-model/#_3","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/execution-model/#_4","text":"// \u041a\u043e\u043d\u0446\u0435\u043f\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: /* \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Call Stack \u2502 \u2502 Web APIs \u2502 \u2502 Task Queues \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2022 setTimeout \u2502 \u2502 \u2022 Macrotasks \u2502 \u2502 \u2502 Function 3 \u2502 \u2502 \u2502 \u2022 fetch \u2502 \u2502 \u2022 Microtasks \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2022 DOM events \u2502 \u2502 \u2022 Animation \u2502 \u2502 \u2502 Function 2 \u2502 \u2502 \u2502 \u2022 etc. \u2502 \u2502 frames \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Function 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Event Loop \u2502 \u2502 \u2502 \u2502 \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u2502 \u2502 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0435\u043a\u043e\u043c \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044f\u043c\u0438 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 */","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"questions/javascript/execution-model/#call-stack","text":"function first() { console.log('First'); second(); console.log('First End'); } function second() { console.log('Second'); third(); console.log('Second End'); } function third() { console.log('Third'); } first(); // Call Stack \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: // 1. [first] // 2. [first, second] // 3. [first, second, third] // 4. [first, second] (third \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // 5. [first] (second \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // 6. [] (first \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430) // \u0412\u044b\u0432\u043e\u0434: // First // Second // Third // Second End // First End","title":"\u0421\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 (Call Stack)"},{"location":"questions/javascript/execution-model/#_5","text":"","title":"\u041e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447"},{"location":"questions/javascript/execution-model/#macrotasks-task-queue","text":"// Macrotasks \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442: // - setTimeout/setInterval // - setImmediate (Node.js) // - I/O operations // - UI rendering // - DOM events console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => { console.log('2'); // Macrotask }, 0); setTimeout(() => { console.log('3'); // Macrotask }, 0); console.log('4'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 4, 2, 3","title":"Macrotasks (Task Queue)"},{"location":"questions/javascript/execution-model/#microtasks-job-queue","text":"// Microtasks \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442: // - Promise.then/catch/finally // - queueMicrotask // - MutationObserver // - process.nextTick (Node.js) console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e Promise.resolve().then(() => { console.log('2'); // Microtask }); queueMicrotask(() => { console.log('3'); // Microtask }); setTimeout(() => { console.log('4'); // Macrotask }, 0); console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 5, 2, 3, 4 // \u0412\u0441\u0435 microtasks \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u044e\u0431\u043e\u0439 macrotask","title":"Microtasks (Job Queue)"},{"location":"questions/javascript/execution-model/#_6","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447"},{"location":"questions/javascript/execution-model/#settimeout0-vs-queuemicrotask-vs-promisethen","text":"console.log('=== Start ==='); // Macrotask setTimeout(() => console.log('setTimeout 0'), 0); // Microtask queueMicrotask(() => console.log('queueMicrotask')); // Microtask Promise.resolve().then(() => console.log('Promise.then')); // Microtask (\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432 Node.js) if (typeof process !== 'undefined') { process.nextTick(() => console.log('nextTick')); } console.log('=== End ==='); /* \u0412\u044b\u0432\u043e\u0434: === Start === === End === nextTick (\u0442\u043e\u043b\u044c\u043a\u043e \u0432 Node.js) queueMicrotask Promise.then setTimeout 0 */","title":"setTimeout(0) vs queueMicrotask vs Promise.then"},{"location":"questions/javascript/execution-model/#requestanimationframe","text":"console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e requestAnimationFrame(() => { console.log('2'); // Animation frame (\u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c) }); setTimeout(() => { console.log('3'); // Macrotask }, 0); Promise.resolve().then(() => { console.log('4'); // Microtask }); console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e /* \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043e\u0431\u044b\u0447\u043d\u043e: 1 5 4 2 3 requestAnimationFrame \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c, \u043d\u043e \u043f\u043e\u0441\u043b\u0435 microtasks */","title":"requestAnimationFrame"},{"location":"questions/javascript/execution-model/#event-loop","text":"// \u041f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434 Event Loop: /* while (eventLoop.waitForTask()) { const task = eventLoop.nextTask(); execute(task); // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0412\u0421\u0415 microtasks while (microtaskQueue.hasTasks()) { const microtask = microtaskQueue.nextMicrotask(); execute(microtask); } // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e) if (shouldRender()) { // Animation callbacks runAnimationCallbacks(); render(); } } */ // \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: function demonstrateEventLoop() { console.log('Script start'); setTimeout(() => console.log('setTimeout 1'), 0); Promise.resolve().then(() => { console.log('Promise 1'); // \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 microtask return Promise.resolve(); }).then(() => { console.log('Promise 2'); }); setTimeout(() => console.log('setTimeout 2'), 0); console.log('Script end'); } demonstrateEventLoop(); /* \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 1. Script start (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) 2. Script end (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) 3. Promise 1 (microtask) 4. Promise 2 (microtask, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 Promise 1) 5. setTimeout 1 (macrotask) 6. setTimeout 2 (macrotask) */","title":"Event Loop \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c"},{"location":"questions/javascript/execution-model/#_7","text":"","title":"\u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438"},{"location":"questions/javascript/execution-model/#microtasks","text":"// \u274c \u041e\u043f\u0430\u0441\u043d\u043e: \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c event loop function recursiveMicrotask() { Promise.resolve().then(() => { console.log('Microtask'); recursiveMicrotask(); // \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f microtasks }); } // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0442\u0430\u043a \u043a\u0430\u043a macrotasks \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e: \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c function safeRecursiveMicrotask(count = 0) { if (count < 5) { Promise.resolve().then(() => { console.log('Microtask', count); safeRecursiveMicrotask(count + 1); }); } }","title":"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 microtasks"},{"location":"questions/javascript/execution-model/#asyncawait","text":"async function complexAsyncFlow() { console.log('1'); // Microtask await Promise.resolve(); console.log('2'); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d microtask await Promise.resolve(); console.log('3'); // Macrotask setTimeout(() => console.log('4'), 0); // Microtask await Promise.resolve(); console.log('5'); } console.log('Start'); complexAsyncFlow(); console.log('End'); /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a: Start 1 End 2 3 5 4 */","title":"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0435 async/await \u0438 \u043f\u0440\u043e\u043c\u0438\u0441\u044b"},{"location":"questions/javascript/execution-model/#_8","text":"","title":"\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438"},{"location":"questions/javascript/execution-model/#1","text":"// \u274c \u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 for (let i = 0; i < 3; i++) { setTimeout(() => console.log('setTimeout', i), 0); Promise.resolve().then(() => console.log('Promise', i)); } /* \u0412\u044b\u0432\u043e\u0434: Promise 0 Promise 1 Promise 2 setTimeout 0 setTimeout 1 setTimeout 2 \u0412\u0441\u0435 \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u044e\u0431\u044b\u043c setTimeout */","title":"1. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u0446\u0438\u043a\u043b\u0430\u0445"},{"location":"questions/javascript/execution-model/#2-async","text":"const urls = ['/api/1', '/api/2', '/api/3']; // \u274c \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 async function fetchSequential() { const results = []; for (const url of urls) { const data = await fetch(url); results.push(data); } return results; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 async function fetchParallel() { const promises = urls.map(url => fetch(url)); return Promise.all(promises); } // \u274c \u0421\u043c\u0435\u0448\u0430\u043d\u043d\u043e\u0435 (\u0447\u0430\u0441\u0442\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430) async function fetchMixed() { const results = []; urls.forEach(async (url) => { const data = await fetch(url); // await \u043d\u0435 \u0436\u0434\u0435\u0442\u0441\u044f \u0432 forEach results.push(data); }); return results; // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432! }","title":"2. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0446\u0438\u043a\u043b\u0430\u0445"},{"location":"questions/javascript/execution-model/#3-promise-constructors-vs-static-methods","text":"// \u0420\u0430\u0437\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 console.log('1'); // Immediate microtask Promise.resolve().then(() => { console.log('2'); throw new Error('Error in then'); }).catch(() => { console.log('3'); }); // Macrotask setTimeout(() => { console.log('4'); throw new Error('Error in setTimeout'); // Uncaught! }, 0); console.log('5'); /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1 5 2 3 4 Error: Error in setTimeout (uncaught) */","title":"3. Promise constructors vs static methods"},{"location":"questions/javascript/execution-model/#react","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React"},{"location":"questions/javascript/execution-model/#race-conditions-useeffect","text":"import React, { useState, useEffect } from 'react'; // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 race condition function BadComponent({ userId }) { const [user, setUser] = useState(null); useEffect(() => { // \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 userId \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c race condition fetch(`/api/users/${userId}`) .then(response => response.json()) .then(setUser); // \u041c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 }, [userId]); return <div>{user?.name}</div>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 \u0444\u043b\u0430\u0433\u043e\u043c \u043e\u0442\u043c\u0435\u043d\u044b function GoodComponent({ userId }) { const [user, setUser] = useState(null); useEffect(() => { let isCancelled = false; fetch(`/api/users/${userId}`) .then(response => response.json()) .then(userData => { if (!isCancelled) { setUser(userData); } }); return () => { isCancelled = true; }; }, [userId]); return <div>{user?.name}</div>; }","title":"Race conditions \u0432 useEffect"},{"location":"questions/javascript/execution-model/#timing-react-updates","text":"function TimingComponent() { const [count, setCount] = useState(0); const handleClick = () => { console.log('1 - Click handler start'); setCount(c => c + 1); // Scheduled update console.log('2 - After setState'); Promise.resolve().then(() => { console.log('3 - Promise.then'); // Microtask }); setTimeout(() => { console.log('4 - setTimeout'); // Macrotask }, 0); console.log('5 - Click handler end'); }; console.log('6 - Render with count:', count); return <button onClick={handleClick}>Count: {count}</button>; } /* \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043a\u043b\u0438\u043a\u0435: 6 - Render with count: 0 1 - Click handler start 2 - After setState 5 - Click handler end 3 - Promise.then 6 - Render with count: 1 (React update) 4 - setTimeout */","title":"Timing \u0432 React updates"},{"location":"questions/javascript/execution-model/#_9","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438"},{"location":"questions/javascript/execution-model/#performance-api","text":"function measureTiming() { performance.mark('start'); setTimeout(() => { performance.mark('timeout'); performance.measure('timeout-duration', 'start', 'timeout'); const measure = performance.getEntriesByName('timeout-duration')[0]; console.log(`Timeout took: ${measure.duration}ms`); }, 100); Promise.resolve().then(() => { performance.mark('promise'); performance.measure('promise-duration', 'start', 'promise'); const measure = performance.getEntriesByName('promise-duration')[0]; console.log(`Promise took: ${measure.duration}ms`); }); }","title":"Performance API"},{"location":"questions/javascript/execution-model/#chrome-devtools","text":"// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 console.time \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f console.time('total-operation'); console.time('sync-part'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f console.timeEnd('sync-part'); console.time('async-part'); Promise.resolve().then(() => { console.timeEnd('async-part'); console.timeEnd('total-operation'); });","title":"Chrome DevTools"},{"location":"questions/javascript/execution-model/#_10","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438"},{"location":"questions/javascript/execution-model/#1-ui","text":"// \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f function heavySync() { for (let i = 0; i < 10000000; i++) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } } // \u2705 \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 async function heavyAsync() { const chunkSize = 100000; const total = 10000000; for (let i = 0; i < total; i += chunkSize) { // \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0447\u0430\u043d\u043a for (let j = i; j < Math.min(i + chunkSize, total); j++) { // \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f } // \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u043c event loop \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 await new Promise(resolve => setTimeout(resolve, 0)); } }","title":"1. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 UI"},{"location":"questions/javascript/execution-model/#2","text":"// \u2705 \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f function optimizedUserInteraction() { // 1. \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 UI feedback (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e) showLoadingState(); // 2. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 microtasks Promise.resolve().then(() => { updateCriticalUI(); }); // 3. \u041d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 macrotasks setTimeout(() => { performAnalytics(); prefetchData(); }, 0); }","title":"2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439"},{"location":"questions/javascript/execution-model/#senior-","text":"\u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b : Microtasks > Animation frames > Macrotasks \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 microtasks - \u043e\u043d\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 async \u043a\u043e\u0434 \u0441 Performance API \u0412 React \u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 race conditions \u0432 useEffect \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0439\u0442\u0435 \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0447\u0430\u043d\u043a\u0438 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 timing-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u043a\u043e\u0434 \u0441 mock timers","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/execution-model/#debugging","text":"// Wrapper \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function trackExecution(name, fn) { console.log(`${name} scheduled`); return (...args) => { console.log(`${name} executing`); const result = fn(...args); console.log(`${name} completed`); return result; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 setTimeout(trackExecution('timeout', () => { console.log('Timeout work'); }), 0); Promise.resolve().then(trackExecution('promise', () => { console.log('Promise work'); })); queueMicrotask(trackExecution('microtask', () => { console.log('Microtask work'); }));","title":"Debugging \u0442\u0435\u0445\u043d\u0438\u043a\u0438"},{"location":"questions/javascript/execution-model/#_11","text":"Event Loop, Microtasks \u0438 Macrotasks Promises, Async/Await \u0438 Generators \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 useEffect \u0438 Side Effects","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/execution-model_small/","text":"JavaScript Execution Model - Senior Cheat Sheet (small) \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Call Stack \u2192 Event Loop \u2192 Task Queues \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 Call Stack (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434) Microtasks (Promise.then, queueMicrotask) Animation Frames (requestAnimationFrame) Macrotasks (setTimeout, events, I/O) \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask queueMicrotask(() => console.log('4')); // Microtask console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 5, 3, 4, 2 Node.js \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430 process.nextTick(() => console.log('1')); // \u0412\u044b\u0441\u0448\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 Promise.resolve().then(() => console.log('2')); queueMicrotask(() => console.log('3')); // Node.js \u043f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 2, 3 Event Loop \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c while (eventLoop.running) { // 1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u0443 macrotask executeMacrotask(); // 2. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0412\u0421\u0415 microtasks while (microtaskQueue.length) { executeMicrotask(); } // 3. \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e) if (shouldRender()) { runAnimationCallbacks(); render(); } } \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438 1. Microtasks \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 macrotasks // \u274c \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 function infiniteMicrotasks() { Promise.resolve().then(infiniteMicrotasks); } // \u2705 \u0421 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c function safeMicrotasks(count = 0) { if (count < 100) { Promise.resolve().then(() => safeMicrotasks(count + 1)); } } 2. Async/await \u043f\u043e\u0440\u044f\u0434\u043e\u043a async function test() { console.log('1'); await Promise.resolve(); // Microtask boundary console.log('2'); await Promise.resolve(); // \u0415\u0449\u0435 \u043e\u0434\u043d\u0430 microtask console.log('3'); } console.log('start'); test(); console.log('end'); // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: start, 1, end, 2, 3 3. \u0426\u0438\u043a\u043b\u044b \u0441 async // \u274c forEach \u0441 async \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f [1,2,3].forEach(async (x) => { await delay(100); console.log(x); // \u0412\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e }); // \u2705 for...of \u0436\u0434\u0435\u0442 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e for (const x of [1,2,3]) { await delay(100); console.log(x); // \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 await Promise.all([1,2,3].map(async (x) => { await delay(100); console.log(x); })); React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Race conditions \u0432 useEffect // \u274c Race condition useEffect(() => { fetch(`/api/users/${userId}`) .then(r => r.json()) .then(setUser); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u043c }, [userId]); // \u2705 \u0421 \u043e\u0442\u043c\u0435\u043d\u043e\u0439 useEffect(() => { let cancelled = false; fetch(`/api/users/${userId}`) .then(r => r.json()) .then(user => !cancelled && setUser(user)); return () => { cancelled = true; }; }, [userId]); Timing React updates const handleClick = () => { console.log('1 - Handler start'); setCount(c => c + 1); // Scheduled update console.log('2 - After setState'); Promise.resolve().then(() => { console.log('3 - Microtask'); }); setTimeout(() => { console.log('4 - Macrotask'); }, 0); }; // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 2, 3, React update, 4 Performance \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 // \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f for (let i = 0; i < 10000000; i++) { heavyWork(i); } // \u2705 \u0421 yield \u0434\u043b\u044f event loop async function processInChunks(items, chunkSize = 1000) { for (let i = 0; i < items.length; i += chunkSize) { const chunk = items.slice(i, i + chunkSize); chunk.forEach(heavyWork); // Yield control to event loop await new Promise(r => setTimeout(r, 0)); } } \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 function optimizedFlow() { // 1. \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 UI feedback showLoading(); // 2. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 microtasks Promise.resolve().then(updateCriticalUI); // 3. \u041d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 macrotasks setTimeout(() => { analytics(); prefetch(); }, 0); } Debugging \u0442\u0435\u0445\u043d\u0438\u043a\u0438 Timing measurement console.time('operation'); performance.mark('start'); setTimeout(() => { performance.mark('end'); performance.measure('duration', 'start', 'end'); console.timeEnd('operation'); }, 100); Execution tracking function track(name, fn) { console.log(`${name} scheduled`); return (...args) => { console.log(`${name} executing`); return fn(...args); }; } setTimeout(track('timeout', work), 0); Promise.resolve().then(track('promise', work)); Senior Rules Microtasks > Animation > Macrotasks - \u0437\u0430\u043f\u043e\u043c\u043d\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0418\u0437\u0431\u0435\u0433\u0430\u0439 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 microtasks - \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Race conditions - \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup \u0432 React Chunking \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Mock timers \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043b\u044f timing-dependent \u043a\u043e\u0434\u0430 Performance API \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Anti-patterns // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b useEffect(async () => { ... }); // async useEffect setInterval(() => {}, 0); // \u0411\u0435\u0437 cleanup Promise.resolve().then(recursiveMicrotask); // Infinite microtasks [].forEach(async () => {}); // async \u0432 forEach // \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 event loop while (heavyCondition()) { doWork(); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0442\u044f\u0436\u0435\u043b\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Event Loop - \u044d\u0442\u043e \u0441\u0435\u0440\u0434\u0446\u0435 JS. \u041f\u043e\u043d\u0438\u043c\u0430\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a, \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup!","title":"JavaScript Execution Model - Senior Cheat Sheet (small)"},{"location":"questions/javascript/execution-model_small/#javascript-execution-model-senior-cheat-sheet-small","text":"","title":"JavaScript Execution Model - Senior Cheat Sheet (small)"},{"location":"questions/javascript/execution-model_small/#_1","text":"Call Stack \u2192 Event Loop \u2192 Task Queues","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/execution-model_small/#_2","text":"Call Stack (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434) Microtasks (Promise.then, queueMicrotask) Animation Frames (requestAnimationFrame) Macrotasks (setTimeout, events, I/O)","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439"},{"location":"questions/javascript/execution-model_small/#_3","text":"console.log('1'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e setTimeout(() => console.log('2'), 0); // Macrotask Promise.resolve().then(() => console.log('3')); // Microtask queueMicrotask(() => console.log('4')); // Microtask console.log('5'); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 5, 3, 4, 2","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447"},{"location":"questions/javascript/execution-model_small/#nodejs","text":"process.nextTick(() => console.log('1')); // \u0412\u044b\u0441\u0448\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 Promise.resolve().then(() => console.log('2')); queueMicrotask(() => console.log('3')); // Node.js \u043f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 2, 3","title":"Node.js \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430"},{"location":"questions/javascript/execution-model_small/#event-loop","text":"while (eventLoop.running) { // 1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u0443 macrotask executeMacrotask(); // 2. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0412\u0421\u0415 microtasks while (microtaskQueue.length) { executeMicrotask(); } // 3. \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e) if (shouldRender()) { runAnimationCallbacks(); render(); } }","title":"Event Loop \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c"},{"location":"questions/javascript/execution-model_small/#_4","text":"","title":"\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043b\u043e\u0432\u0443\u0448\u043a\u0438"},{"location":"questions/javascript/execution-model_small/#1-microtasks-macrotasks","text":"// \u274c \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 function infiniteMicrotasks() { Promise.resolve().then(infiniteMicrotasks); } // \u2705 \u0421 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c function safeMicrotasks(count = 0) { if (count < 100) { Promise.resolve().then(() => safeMicrotasks(count + 1)); } }","title":"1. Microtasks \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 macrotasks"},{"location":"questions/javascript/execution-model_small/#2-asyncawait","text":"async function test() { console.log('1'); await Promise.resolve(); // Microtask boundary console.log('2'); await Promise.resolve(); // \u0415\u0449\u0435 \u043e\u0434\u043d\u0430 microtask console.log('3'); } console.log('start'); test(); console.log('end'); // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: start, 1, end, 2, 3","title":"2. Async/await \u043f\u043e\u0440\u044f\u0434\u043e\u043a"},{"location":"questions/javascript/execution-model_small/#3-async","text":"// \u274c forEach \u0441 async \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f [1,2,3].forEach(async (x) => { await delay(100); console.log(x); // \u0412\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e }); // \u2705 for...of \u0436\u0434\u0435\u0442 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e for (const x of [1,2,3]) { await delay(100); console.log(x); // \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 await Promise.all([1,2,3].map(async (x) => { await delay(100); console.log(x); }));","title":"3. \u0426\u0438\u043a\u043b\u044b \u0441 async"},{"location":"questions/javascript/execution-model_small/#react","text":"","title":"React \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/execution-model_small/#race-conditions-useeffect","text":"// \u274c Race condition useEffect(() => { fetch(`/api/users/${userId}`) .then(r => r.json()) .then(setUser); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u043c }, [userId]); // \u2705 \u0421 \u043e\u0442\u043c\u0435\u043d\u043e\u0439 useEffect(() => { let cancelled = false; fetch(`/api/users/${userId}`) .then(r => r.json()) .then(user => !cancelled && setUser(user)); return () => { cancelled = true; }; }, [userId]);","title":"Race conditions \u0432 useEffect"},{"location":"questions/javascript/execution-model_small/#timing-react-updates","text":"const handleClick = () => { console.log('1 - Handler start'); setCount(c => c + 1); // Scheduled update console.log('2 - After setState'); Promise.resolve().then(() => { console.log('3 - Microtask'); }); setTimeout(() => { console.log('4 - Macrotask'); }, 0); }; // \u041f\u043e\u0440\u044f\u0434\u043e\u043a: 1, 2, 3, React update, 4","title":"Timing React updates"},{"location":"questions/javascript/execution-model_small/#performance","text":"","title":"Performance \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/javascript/execution-model_small/#_5","text":"// \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f for (let i = 0; i < 10000000; i++) { heavyWork(i); } // \u2705 \u0421 yield \u0434\u043b\u044f event loop async function processInChunks(items, chunkSize = 1000) { for (let i = 0; i < items.length; i += chunkSize) { const chunk = items.slice(i, i + chunkSize); chunk.forEach(heavyWork); // Yield control to event loop await new Promise(r => setTimeout(r, 0)); } }","title":"\u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439"},{"location":"questions/javascript/execution-model_small/#_6","text":"function optimizedFlow() { // 1. \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 UI feedback showLoading(); // 2. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 microtasks Promise.resolve().then(updateCriticalUI); // 3. \u041d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 macrotasks setTimeout(() => { analytics(); prefetch(); }, 0); }","title":"\u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439"},{"location":"questions/javascript/execution-model_small/#debugging","text":"","title":"Debugging \u0442\u0435\u0445\u043d\u0438\u043a\u0438"},{"location":"questions/javascript/execution-model_small/#timing-measurement","text":"console.time('operation'); performance.mark('start'); setTimeout(() => { performance.mark('end'); performance.measure('duration', 'start', 'end'); console.timeEnd('operation'); }, 100);","title":"Timing measurement"},{"location":"questions/javascript/execution-model_small/#execution-tracking","text":"function track(name, fn) { console.log(`${name} scheduled`); return (...args) => { console.log(`${name} executing`); return fn(...args); }; } setTimeout(track('timeout', work), 0); Promise.resolve().then(track('promise', work));","title":"Execution tracking"},{"location":"questions/javascript/execution-model_small/#senior-rules","text":"Microtasks > Animation > Macrotasks - \u0437\u0430\u043f\u043e\u043c\u043d\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0418\u0437\u0431\u0435\u0433\u0430\u0439 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 microtasks - \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Race conditions - \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup \u0432 React Chunking \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 Mock timers \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043b\u044f timing-dependent \u043a\u043e\u0434\u0430 Performance API \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"Senior Rules"},{"location":"questions/javascript/execution-model_small/#anti-patterns","text":"// \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b useEffect(async () => { ... }); // async useEffect setInterval(() => {}, 0); // \u0411\u0435\u0437 cleanup Promise.resolve().then(recursiveMicrotask); // Infinite microtasks [].forEach(async () => {}); // async \u0432 forEach // \u274c \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 event loop while (heavyCondition()) { doWork(); // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0442\u044f\u0436\u0435\u043b\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Event Loop - \u044d\u0442\u043e \u0441\u0435\u0440\u0434\u0446\u0435 JS. \u041f\u043e\u043d\u0438\u043c\u0430\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a, \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u0439 \u043e cleanup!","title":"Anti-patterns"},{"location":"questions/javascript/garbage-collection/","text":"Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 garbage collection \u0432 JavaScript, \u0438 \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 React-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Garbage Collection (GC) \u0432 JavaScript \u2014 \u044d\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u043e\u0442 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 JavaScript \u0434\u0432\u0438\u0436\u043a\u0438 (V8, SpiderMonkey) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u044c\u044e. \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 Garbage Collection \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c: Mark-and-Sweep // \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b Mark-and-Sweep function demonstrateGC() { let obj1 = { name: 'Object 1' }; // \u041e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0437\u0434\u0430\u043d let obj2 = { name: 'Object 2', ref: obj1 }; // obj2 \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 obj1 obj1 = null; // obj1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // \u041d\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a obj2.ref \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0435\u0433\u043e obj2 = null; // \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b \u0438 \u0431\u0443\u0434\u0443\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u044b GC } Phases GC \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 Mark Phase : \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0442 roots (global object, call stack) Sweep Phase : \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b Compaction Phase : (\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u0434\u0435\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 Generational Garbage Collection // V8 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u0432\u0430 \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 // Young Generation (Minor GC) - \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0447\u0430\u0441\u0442\u044b\u0439 function createShortLivedObjects() { for (let i = 0; i < 1000; i++) { let temp = { id: i, data: new Array(100) }; // \u0411\u044b\u0441\u0442\u0440\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u043c\u0443\u0441\u043e\u0440\u043e\u043c // \u042d\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f Minor GC } } // Old Generation (Major GC) - \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439, \u0440\u0435\u0434\u043a\u0438\u0439 const longLivedCache = new Map(); // \u0416\u0438\u0432\u0435\u0442 \u0434\u043e\u043b\u0433\u043e, \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 Old Gen function addToCache(key, value) { longLivedCache.set(key, value); // Major GC \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b } Memory Leaks \u0432 JavaScript 1. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e function createLeak() { leakedGlobal = 'This creates a global variable'; // \u0411\u0435\u0437 var/let/const } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 function noLeak() { const localVariable = 'This stays local'; } 2. \u0417\u0430\u0431\u044b\u0442\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c listener function addListenerBad() { const button = document.getElementById('button'); button.addEventListener('click', function() { console.log('Clicked'); }); // Listener \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f button \u0438\u0437 DOM } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0443\u0434\u0430\u043b\u044f\u0435\u043c listener function addListenerGood() { const button = document.getElementById('button'); const handleClick = () => console.log('Clicked'); button.addEventListener('click', handleClick); // Cleanup return () => { button.removeEventListener('click', handleClick); }; } 3. \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 function createClosure() { const hugeArray = new Array(1000000).fill('data'); const smallData = 'small'; return function() { return smallData; // \u041d\u043e \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0435\u0441\u044c hugeArray }; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 function createClosureOptimized() { const hugeArray = new Array(1000000).fill('data'); const smallData = 'small'; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 processHugeArray(hugeArray); return function() { return smallData; // \u0422\u0435\u043f\u0435\u0440\u044c hugeArray \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d }; } 4. \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 function createCircularReference() { const obj1 = {}; const obj2 = {}; obj1.ref = obj2; obj2.ref = obj1; // \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return obj1; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c WeakMap/WeakSet const relationships = new WeakMap(); function createWeakReference(obj1, obj2) { relationships.set(obj1, obj2); // \u0421\u043b\u0430\u0431\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return obj1; } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 React 1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useEffect import React, { useState, useEffect } from 'react'; // \u274c \u041f\u043b\u043e\u0445\u043e: memory leak function BadComponent() { const [data, setData] = useState(null); useEffect(() => { const interval = setInterval(() => { fetchData().then(setData); }, 1000); // \u0417\u0430\u0431\u044b\u043b\u0438 \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c interval }, []); return <div>{data}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 function GoodComponent() { const [data, setData] = useState(null); useEffect(() => { let isCancelled = false; const interval = setInterval(async () => { try { const result = await fetchData(); if (!isCancelled) { setData(result); } } catch (error) { if (!isCancelled) { console.error(error); } } }, 1000); return () => { isCancelled = true; clearInterval(interval); }; }, []); return <div>{data}</div>; } 2. \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e import React, { useMemo, useCallback } from 'react'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OverMemoizedComponent({ users, filters }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u0430 const count = useMemo(() => users.length, [users]); // \u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 const expensiveValue = useMemo(() => { return users.filter(/* complex logic */); }, [users, filters, /* many other deps */]); return <div>{expensiveValue.length}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0443\u043c\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OptimizedComponent({ users, filters }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filteredUsers = useMemo(() => { return users.filter(user => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 return filters.every(filter => filter.test(user)); }); }, [users, filters]); const handleUserClick = useCallback((userId) => { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u043a\u0430 }, []); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return ( <div> {filteredUsers.map(user => ( <UserCard key={user.id} user={user} onClick={handleUserClick} /> ))} </div> ); } 3. \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a function HugeListBad({ items }) { return ( <div> {items.map((item, index) => ( <div key={index} style={{ height: 50 }}> {item.name} </div> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function HugeListGood({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].name} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); } 4. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043c\u0435\u0434\u0438\u0430 import React, { useState, useRef, useEffect } from 'react'; // Lazy loading \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function LazyImage({ src, alt, ...props }) { const [isLoaded, setIsLoaded] = useState(false); const [isInView, setIsInView] = useState(false); const imgRef = useRef(); useEffect(() => { const observer = new IntersectionObserver( ([entry]) => { if (entry.isIntersecting) { setIsInView(true); observer.disconnect(); } }, { threshold: 0.1 } ); if (imgRef.current) { observer.observe(imgRef.current); } return () => observer.disconnect(); }, []); return ( <div ref={imgRef} {...props}> {isInView && ( <img src={src} alt={alt} onLoad={() => setIsLoaded(true)} style={{ opacity: isLoaded ? 1 : 0, transition: 'opacity 0.3s' }} /> )} </div> ); } \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 1. Chrome DevTools // \u041c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f function markPerformance(name, fn) { performance.mark(`${name}-start`); const result = fn(); performance.mark(`${name}-end`); performance.measure(name, `${name}-start`, `${name}-end`); return result; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const result = markPerformance('heavy-computation', () => { return heavyComputation(data); }); 2. Memory API // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 function monitorMemory() { if ('memory' in performance) { const memory = performance.memory; console.log({ usedJSHeapSize: memory.usedJSHeapSize, totalJSHeapSize: memory.totalJSHeapSize, jsHeapSizeLimit: memory.jsHeapSizeLimit }); } } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0436\u0434\u044b\u0435 5 \u0441\u0435\u043a\u0443\u043d\u0434 setInterval(monitorMemory, 5000); \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 1. Code Splitting \u0438 Lazy Loading import React, { Suspense, lazy } from 'react'; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const HeavyComponent = lazy(() => import('./HeavyComponent')); const AnotherComponent = lazy(() => import('./AnotherComponent').then(module => ({ default: module.AnotherComponent })) ); function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> </div> ); } 2. \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0435 \u043f\u0443\u043b\u044b // Pool \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class ObjectPool { constructor(createFn, resetFn, initialSize = 10) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; // \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b for (let i = 0; i < initialSize; i++) { this.pool.push(this.createFn()); } } acquire() { return this.pool.pop() || this.createFn(); } release(obj) { this.resetFn(obj); this.pool.push(obj); } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const vectorPool = new ObjectPool( () => ({ x: 0, y: 0 }), (obj) => { obj.x = 0; obj.y = 0; } ); function useVector() { const vector = vectorPool.acquire(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c vector vectorPool.release(vector); } 3. WeakMap \u0438 WeakSet \u0434\u043b\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f // Weak \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 DOM \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 const elementCache = new WeakMap(); function cacheElementData(element, data) { elementCache.set(element, data); } function getElementData(element) { return elementCache.get(element); } // \u041a\u043e\u0433\u0434\u0430 element \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 DOM, \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0447\u0438\u0449\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u043a\u044d\u0448\u0430 4. Debounce \u0438 Throttle // Debounce \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; } // Throttle \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0432\u044b\u0437\u043e\u0432\u043e\u0432 function useThrottle(callback, delay) { const lastCall = useRef(0); return useCallback((...args) => { const now = Date.now(); if (now - lastCall.current >= delay) { lastCall.current = now; callback(...args); } }, [callback, delay]); } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Chrome DevTools \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u044c\u0442\u0435 memory leaks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 heap snapshots \u0432 production \u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e \u0441 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u0435\u0439 : \u041d\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u043f\u043e\u0434\u0440\u044f\u0434 - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 weak references : WeakMap \u0438 WeakSet \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439 Clean up subscriptions : \u0412\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u0442 event listeners, intervals, subscriptions \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 WebP, lazy loading, responsive images \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f : \u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 react-window \u0438\u043b\u0438 react-virtualized \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 // \u2705 Comprehensive cleanup pattern function useDataFetching(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let isCancelled = false; const controller = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: controller.signal }); if (!response.ok) { throw new Error('Network response was not ok'); } const result = await response.json(); if (!isCancelled) { setData(result); } } catch (err) { if (!isCancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchData(); return () => { isCancelled = true; controller.abort(); }; }, [url]); return { data, loading, error }; } \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Event Loop, Microtasks \u0438 Macrotasks Let, Const, Var: Scope \u0438 Hoisting \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0412\u0435\u0431-\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 Core Web Vitals","title":"Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438"},{"location":"questions/javascript/garbage-collection/#garbage-collection","text":"","title":"Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438"},{"location":"questions/javascript/garbage-collection/#_1","text":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 garbage collection \u0432 JavaScript, \u0438 \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 React-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/garbage-collection/#_2","text":"Garbage Collection (GC) \u0432 JavaScript \u2014 \u044d\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u043e\u0442 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 JavaScript \u0434\u0432\u0438\u0436\u043a\u0438 (V8, SpiderMonkey) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u044c\u044e.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/garbage-collection/#garbage-collection_1","text":"","title":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 Garbage Collection"},{"location":"questions/javascript/garbage-collection/#mark-and-sweep","text":"// \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b Mark-and-Sweep function demonstrateGC() { let obj1 = { name: 'Object 1' }; // \u041e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0437\u0434\u0430\u043d let obj2 = { name: 'Object 2', ref: obj1 }; // obj2 \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 obj1 obj1 = null; // obj1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // \u041d\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a obj2.ref \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0435\u0433\u043e obj2 = null; // \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b \u0438 \u0431\u0443\u0434\u0443\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u044b GC }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c: Mark-and-Sweep"},{"location":"questions/javascript/garbage-collection/#phases-gc","text":"Mark Phase : \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0442 roots (global object, call stack) Sweep Phase : \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b Compaction Phase : (\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u0434\u0435\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438","title":"Phases GC \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"},{"location":"questions/javascript/garbage-collection/#generational-garbage-collection","text":"// V8 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u0432\u0430 \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 // Young Generation (Minor GC) - \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0447\u0430\u0441\u0442\u044b\u0439 function createShortLivedObjects() { for (let i = 0; i < 1000; i++) { let temp = { id: i, data: new Array(100) }; // \u0411\u044b\u0441\u0442\u0440\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u043c\u0443\u0441\u043e\u0440\u043e\u043c // \u042d\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f Minor GC } } // Old Generation (Major GC) - \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439, \u0440\u0435\u0434\u043a\u0438\u0439 const longLivedCache = new Map(); // \u0416\u0438\u0432\u0435\u0442 \u0434\u043e\u043b\u0433\u043e, \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 Old Gen function addToCache(key, value) { longLivedCache.set(key, value); // Major GC \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b }","title":"Generational Garbage Collection"},{"location":"questions/javascript/garbage-collection/#memory-leaks-javascript","text":"","title":"Memory Leaks \u0432 JavaScript"},{"location":"questions/javascript/garbage-collection/#1","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e function createLeak() { leakedGlobal = 'This creates a global variable'; // \u0411\u0435\u0437 var/let/const } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 function noLeak() { const localVariable = 'This stays local'; }","title":"1. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"questions/javascript/garbage-collection/#2","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c listener function addListenerBad() { const button = document.getElementById('button'); button.addEventListener('click', function() { console.log('Clicked'); }); // Listener \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f button \u0438\u0437 DOM } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0443\u0434\u0430\u043b\u044f\u0435\u043c listener function addListenerGood() { const button = document.getElementById('button'); const handleClick = () => console.log('Clicked'); button.addEventListener('click', handleClick); // Cleanup return () => { button.removeEventListener('click', handleClick); }; }","title":"2. \u0417\u0430\u0431\u044b\u0442\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439"},{"location":"questions/javascript/garbage-collection/#3","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 function createClosure() { const hugeArray = new Array(1000000).fill('data'); const smallData = 'small'; return function() { return smallData; // \u041d\u043e \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0435\u0441\u044c hugeArray }; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 function createClosureOptimized() { const hugeArray = new Array(1000000).fill('data'); const smallData = 'small'; // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 processHugeArray(hugeArray); return function() { return smallData; // \u0422\u0435\u043f\u0435\u0440\u044c hugeArray \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d }; }","title":"3. \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438"},{"location":"questions/javascript/garbage-collection/#4","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 function createCircularReference() { const obj1 = {}; const obj2 = {}; obj1.ref = obj2; obj2.ref = obj1; // \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return obj1; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c WeakMap/WeakSet const relationships = new WeakMap(); function createWeakReference(obj1, obj2) { relationships.set(obj1, obj2); // \u0421\u043b\u0430\u0431\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return obj1; }","title":"4. \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438"},{"location":"questions/javascript/garbage-collection/#react","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 React"},{"location":"questions/javascript/garbage-collection/#1-useeffect","text":"import React, { useState, useEffect } from 'react'; // \u274c \u041f\u043b\u043e\u0445\u043e: memory leak function BadComponent() { const [data, setData] = useState(null); useEffect(() => { const interval = setInterval(() => { fetchData().then(setData); }, 1000); // \u0417\u0430\u0431\u044b\u043b\u0438 \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c interval }, []); return <div>{data}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 function GoodComponent() { const [data, setData] = useState(null); useEffect(() => { let isCancelled = false; const interval = setInterval(async () => { try { const result = await fetchData(); if (!isCancelled) { setData(result); } } catch (error) { if (!isCancelled) { console.error(error); } } }, 1000); return () => { isCancelled = true; clearInterval(interval); }; }, []); return <div>{data}</div>; }","title":"1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useEffect"},{"location":"questions/javascript/garbage-collection/#2_1","text":"import React, { useMemo, useCallback } from 'react'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OverMemoizedComponent({ users, filters }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u0430 const count = useMemo(() => users.length, [users]); // \u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 const expensiveValue = useMemo(() => { return users.filter(/* complex logic */); }, [users, filters, /* many other deps */]); return <div>{expensiveValue.length}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0443\u043c\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OptimizedComponent({ users, filters }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filteredUsers = useMemo(() => { return users.filter(user => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 return filters.every(filter => filter.test(user)); }); }, [users, filters]); const handleUserClick = useCallback((userId) => { // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u043a\u0430 }, []); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return ( <div> {filteredUsers.map(user => ( <UserCard key={user.id} user={user} onClick={handleUserClick} /> ))} </div> ); }","title":"2. \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e"},{"location":"questions/javascript/garbage-collection/#3_1","text":"import { FixedSizeList as List } from 'react-window'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a function HugeListBad({ items }) { return ( <div> {items.map((item, index) => ( <div key={index} style={{ height: 50 }}> {item.name} </div> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function HugeListGood({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].name} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); }","title":"3. \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/javascript/garbage-collection/#4_1","text":"import React, { useState, useRef, useEffect } from 'react'; // Lazy loading \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function LazyImage({ src, alt, ...props }) { const [isLoaded, setIsLoaded] = useState(false); const [isInView, setIsInView] = useState(false); const imgRef = useRef(); useEffect(() => { const observer = new IntersectionObserver( ([entry]) => { if (entry.isIntersecting) { setIsInView(true); observer.disconnect(); } }, { threshold: 0.1 } ); if (imgRef.current) { observer.observe(imgRef.current); } return () => observer.disconnect(); }, []); return ( <div ref={imgRef} {...props}> {isInView && ( <img src={src} alt={alt} onLoad={() => setIsLoaded(true)} style={{ opacity: isLoaded ? 1 : 0, transition: 'opacity 0.3s' }} /> )} </div> ); }","title":"4. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043c\u0435\u0434\u0438\u0430"},{"location":"questions/javascript/garbage-collection/#_3","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0430\u043c\u044f\u0442\u0438"},{"location":"questions/javascript/garbage-collection/#1-chrome-devtools","text":"// \u041c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f function markPerformance(name, fn) { performance.mark(`${name}-start`); const result = fn(); performance.mark(`${name}-end`); performance.measure(name, `${name}-start`, `${name}-end`); return result; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const result = markPerformance('heavy-computation', () => { return heavyComputation(data); });","title":"1. Chrome DevTools"},{"location":"questions/javascript/garbage-collection/#2-memory-api","text":"// \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 function monitorMemory() { if ('memory' in performance) { const memory = performance.memory; console.log({ usedJSHeapSize: memory.usedJSHeapSize, totalJSHeapSize: memory.totalJSHeapSize, jsHeapSizeLimit: memory.jsHeapSizeLimit }); } } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0436\u0434\u044b\u0435 5 \u0441\u0435\u043a\u0443\u043d\u0434 setInterval(monitorMemory, 5000);","title":"2. Memory API"},{"location":"questions/javascript/garbage-collection/#_4","text":"","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/javascript/garbage-collection/#1-code-splitting-lazy-loading","text":"import React, { Suspense, lazy } from 'react'; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const HeavyComponent = lazy(() => import('./HeavyComponent')); const AnotherComponent = lazy(() => import('./AnotherComponent').then(module => ({ default: module.AnotherComponent })) ); function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> </div> ); }","title":"1. Code Splitting \u0438 Lazy Loading"},{"location":"questions/javascript/garbage-collection/#2_2","text":"// Pool \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class ObjectPool { constructor(createFn, resetFn, initialSize = 10) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; // \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b for (let i = 0; i < initialSize; i++) { this.pool.push(this.createFn()); } } acquire() { return this.pool.pop() || this.createFn(); } release(obj) { this.resetFn(obj); this.pool.push(obj); } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const vectorPool = new ObjectPool( () => ({ x: 0, y: 0 }), (obj) => { obj.x = 0; obj.y = 0; } ); function useVector() { const vector = vectorPool.acquire(); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c vector vectorPool.release(vector); }","title":"2. \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0435 \u043f\u0443\u043b\u044b"},{"location":"questions/javascript/garbage-collection/#3-weakmap-weakset","text":"// Weak \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 DOM \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 const elementCache = new WeakMap(); function cacheElementData(element, data) { elementCache.set(element, data); } function getElementData(element) { return elementCache.get(element); } // \u041a\u043e\u0433\u0434\u0430 element \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 DOM, \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0447\u0438\u0449\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u043a\u044d\u0448\u0430","title":"3. WeakMap \u0438 WeakSet \u0434\u043b\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/javascript/garbage-collection/#4-debounce-throttle","text":"// Debounce \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; } // Throttle \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0432\u044b\u0437\u043e\u0432\u043e\u0432 function useThrottle(callback, delay) { const lastCall = useRef(0); return useCallback((...args) => { const now = Date.now(); if (now - lastCall.current >= delay) { lastCall.current = now; callback(...args); } }, [callback, delay]); }","title":"4. Debounce \u0438 Throttle"},{"location":"questions/javascript/garbage-collection/#senior-","text":"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Chrome DevTools \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u044c\u0442\u0435 memory leaks : \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 heap snapshots \u0432 production \u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e \u0441 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u0435\u0439 : \u041d\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u043f\u043e\u0434\u0440\u044f\u0434 - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 weak references : WeakMap \u0438 WeakSet \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439 Clean up subscriptions : \u0412\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u0442 event listeners, intervals, subscriptions \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 WebP, lazy loading, responsive images \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f : \u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 react-window \u0438\u043b\u0438 react-virtualized","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/garbage-collection/#_5","text":"// \u2705 Comprehensive cleanup pattern function useDataFetching(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let isCancelled = false; const controller = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: controller.signal }); if (!response.ok) { throw new Error('Network response was not ok'); } const result = await response.json(); if (!isCancelled) { setData(result); } } catch (err) { if (!isCancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchData(); return () => { isCancelled = true; controller.abort(); }; }, [url]); return { data, loading, error }; }","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/javascript/garbage-collection/#_6","text":"Event Loop, Microtasks \u0438 Macrotasks Let, Const, Var: Scope \u0438 Hoisting \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0412\u0435\u0431-\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 Core Web Vitals","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/garbage-collection_small/","text":"Garbage Collection - Senior Cheat Sheet (small) GC \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b Mark-and-Sweep : \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u2192 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043d\u0435\u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 Generational : Young Gen (Minor GC, \u0447\u0430\u0441\u0442\u044b\u0439) + Old Gen (Major GC, \u0440\u0435\u0434\u043a\u0438\u0439) // V8: \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0432 Young, \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u0432 Old const cache = new Map(); // \u0414\u043e\u043b\u0433\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u0439 \u2192 Old Gen const temp = { data: [] }; // \u041a\u043e\u0440\u043e\u0442\u043a\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u0439 \u2192 Young Gen Memory Leaks - \u0422\u043e\u043f \u043f\u0440\u043e\u0431\u043b\u0435\u043c 1. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 // \u274c \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e leaked = 'data'; // \u0411\u0435\u0437 var/let/const // \u2705 \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f const local = 'data'; 2. Event Listeners // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 useEffect(() => { const handler = () => {}; element.addEventListener('click', handler); return () => element.removeEventListener('click', handler); }, []); 3. \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 // \u274c \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0435\u0441\u044c \u043c\u0430\u0441\u0441\u0438\u0432 function bad() { const huge = new Array(1e6); return () => 'small'; // \u0414\u0435\u0440\u0436\u0438\u0442 huge } // \u2705 \u041e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 function good() { let huge = new Array(1e6); process(huge); huge = null; // \u041e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c return () => 'small'; } 4. \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c WeakMap/WeakSet const relations = new WeakMap(); relations.set(obj1, obj2); // \u0421\u043b\u0430\u0431\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 React \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 useEffect Cleanup useEffect(() => { let cancelled = false; const interval = setInterval(() => { if (!cancelled) updateData(); }, 1000); return () => { cancelled = true; clearInterval(interval); }; }, []); \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f // \u2705 \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filtered = useMemo(() => items.filter(expensive), [items] ); // \u274c \u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b const count = useMemo(() => items.length, [items]); // \u0411\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList } from 'react-window'; // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0438\u0434\u0438\u043c\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 Chrome DevTools Memory tab \u2192 Heap snapshots Performance \u2192 Memory timeline performance.memory API \u041c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 performance.mark('start'); heavyOperation(); performance.mark('end'); performance.measure('operation', 'start', 'end'); \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 1. \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0435 \u043f\u0443\u043b\u044b class Pool { constructor(create, reset) { this.create = create; this.reset = reset; this.pool = []; } acquire() { return this.pool.pop() || this.create(); } release(obj) { this.reset(obj); this.pool.push(obj); } } 2. Debounce/Throttle const debounced = useDebounce(value, 300); const throttled = useThrottle(callback, 100); 3. WeakMap \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 const cache = new WeakMap(); cache.set(element, data); // \u0410\u0432\u0442\u043e\u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 element Senior Rules \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 - DevTools Memory tab Weak references \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439 Cleanup subscriptions - \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0439\u0441\u044f Lazy loading \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439/\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 Object pools \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u044b\u0445 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0439 Virtualization \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 (1000+ items) Monitor production - \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 heap snapshots \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b // \u2705 Comprehensive cleanup function useResource() { useEffect(() => { const controller = new AbortController(); let mounted = true; fetchData({ signal: controller.signal }) .then(data => mounted && setData(data)); return () => { mounted = false; controller.abort(); }; }, []); } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Memory leaks \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f, \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 heap size \u0432 production!","title":"Garbage Collection - Senior Cheat Sheet (small)"},{"location":"questions/javascript/garbage-collection_small/#garbage-collection-senior-cheat-sheet-small","text":"","title":"Garbage Collection - Senior Cheat Sheet (small)"},{"location":"questions/javascript/garbage-collection_small/#gc","text":"Mark-and-Sweep : \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u2192 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043d\u0435\u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 Generational : Young Gen (Minor GC, \u0447\u0430\u0441\u0442\u044b\u0439) + Old Gen (Major GC, \u0440\u0435\u0434\u043a\u0438\u0439) // V8: \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0432 Young, \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u0432 Old const cache = new Map(); // \u0414\u043e\u043b\u0433\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u0439 \u2192 Old Gen const temp = { data: [] }; // \u041a\u043e\u0440\u043e\u0442\u043a\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u0439 \u2192 Young Gen","title":"GC \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"questions/javascript/garbage-collection_small/#memory-leaks-","text":"","title":"Memory Leaks - \u0422\u043e\u043f \u043f\u0440\u043e\u0431\u043b\u0435\u043c"},{"location":"questions/javascript/garbage-collection_small/#1","text":"// \u274c \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e leaked = 'data'; // \u0411\u0435\u0437 var/let/const // \u2705 \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f const local = 'data';","title":"1. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"questions/javascript/garbage-collection_small/#2-event-listeners","text":"// \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 useEffect(() => { const handler = () => {}; element.addEventListener('click', handler); return () => element.removeEventListener('click', handler); }, []);","title":"2. Event Listeners"},{"location":"questions/javascript/garbage-collection_small/#3","text":"// \u274c \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0435\u0441\u044c \u043c\u0430\u0441\u0441\u0438\u0432 function bad() { const huge = new Array(1e6); return () => 'small'; // \u0414\u0435\u0440\u0436\u0438\u0442 huge } // \u2705 \u041e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 function good() { let huge = new Array(1e6); process(huge); huge = null; // \u041e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c return () => 'small'; }","title":"3. \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438"},{"location":"questions/javascript/garbage-collection_small/#4","text":"// \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c WeakMap/WeakSet const relations = new WeakMap(); relations.set(obj1, obj2); // \u0421\u043b\u0430\u0431\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430","title":"4. \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438"},{"location":"questions/javascript/garbage-collection_small/#react","text":"","title":"React \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/javascript/garbage-collection_small/#useeffect-cleanup","text":"useEffect(() => { let cancelled = false; const interval = setInterval(() => { if (!cancelled) updateData(); }, 1000); return () => { cancelled = true; clearInterval(interval); }; }, []);","title":"useEffect Cleanup"},{"location":"questions/javascript/garbage-collection_small/#-","text":"// \u2705 \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filtered = useMemo(() => items.filter(expensive), [items] ); // \u274c \u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b const count = useMemo(() => items.length, [items]); // \u0411\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"},{"location":"questions/javascript/garbage-collection_small/#_1","text":"import { FixedSizeList } from 'react-window'; // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0438\u0434\u0438\u043c\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/javascript/garbage-collection_small/#_2","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430"},{"location":"questions/javascript/garbage-collection_small/#chrome-devtools","text":"Memory tab \u2192 Heap snapshots Performance \u2192 Memory timeline performance.memory API","title":"Chrome DevTools"},{"location":"questions/javascript/garbage-collection_small/#_3","text":"performance.mark('start'); heavyOperation(); performance.mark('end'); performance.measure('operation', 'start', 'end');","title":"\u041c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/garbage-collection_small/#_4","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"questions/javascript/garbage-collection_small/#1_1","text":"class Pool { constructor(create, reset) { this.create = create; this.reset = reset; this.pool = []; } acquire() { return this.pool.pop() || this.create(); } release(obj) { this.reset(obj); this.pool.push(obj); } }","title":"1. \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0435 \u043f\u0443\u043b\u044b"},{"location":"questions/javascript/garbage-collection_small/#2-debouncethrottle","text":"const debounced = useDebounce(value, 300); const throttled = useThrottle(callback, 100);","title":"2. Debounce/Throttle"},{"location":"questions/javascript/garbage-collection_small/#3-weakmap","text":"const cache = new WeakMap(); cache.set(element, data); // \u0410\u0432\u0442\u043e\u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 element","title":"3. WeakMap \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/javascript/garbage-collection_small/#senior-rules","text":"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 - DevTools Memory tab Weak references \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439 Cleanup subscriptions - \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0439\u0441\u044f Lazy loading \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439/\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 Object pools \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u044b\u0445 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0439 Virtualization \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 (1000+ items) Monitor production - \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 heap snapshots","title":"Senior Rules"},{"location":"questions/javascript/garbage-collection_small/#_5","text":"// \u2705 Comprehensive cleanup function useResource() { useEffect(() => { const controller = new AbortController(); let mounted = true; fetchData({ signal: controller.signal }) .then(data => mounted && setData(data)); return () => { mounted = false; controller.abort(); }; }, []); } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Memory leaks \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f, \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 heap size \u0432 production!","title":"\u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/javascript/scope-hoisting/","text":"Let, Const, Var: Scope \u0438 Hoisting \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 let, const \u0438 var \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 scope \u0438 hoisting? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 \u0412 JavaScript \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445: var , let \u0438 const . \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 (scope) \u0438 \u043f\u043e\u0434\u043d\u044f\u0442\u0438\u044f (hoisting). \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 var let const Scope Function/Global Block Block Hoisting \u0414\u0430 (\u0441 undefined) \u0414\u0430 (\u0432 TDZ) \u0414\u0430 (\u0432 TDZ) \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u041f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e Temporal Dead Zone \u041d\u0435\u0442 \u0414\u0430 \u0414\u0430 var - Function Scoped function varExample() { console.log(x); // undefined (\u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0430!) if (true) { var x = 1; console.log(x); // 1 } console.log(x); // 1 (\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \"\u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442\" \u0438\u0437 \u0431\u043b\u043e\u043a\u0430) } // Hoisting \u0441 var console.log(hoistedVar); // undefined var hoistedVar = 'Hello'; // \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e: // var hoistedVar; // console.log(hoistedVar); // undefined // hoistedVar = 'Hello'; let - Block Scoped function letExample() { // console.log(y); // ReferenceError: Cannot access 'y' before initialization if (true) { let y = 1; console.log(y); // 1 } // console.log(y); // ReferenceError: y is not defined } // Temporal Dead Zone (TDZ) function tdgExample() { console.log(typeof z); // ReferenceError (\u0432 TDZ) let z = 'Hello'; } // \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e let name = 'John'; // let name = 'Jane'; // SyntaxError: Identifier 'name' has already been declared const - Block Scoped \u0438 Immutable Binding function constExample() { const PI = 3.14159; // PI = 3.14; // TypeError: Assignment to constant variable if (true) { const LOCAL_CONST = 'local'; console.log(LOCAL_CONST); // 'local' } // console.log(LOCAL_CONST); // ReferenceError: LOCAL_CONST is not defined } // \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c const user = { name: 'John', age: 30 }; user.age = 31; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e user.city = 'New York'; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e const numbers = [1, 2, 3]; numbers.push(4); // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e numbers[0] = 10; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // \u041d\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c // user = {}; // \u274c TypeError // numbers = []; // \u274c TypeError Hoisting \u0432 \u0434\u0435\u0442\u0430\u043b\u044f\u0445 // var hoisting console.log(a); // undefined var a = 1; console.log(a); // 1 // let/const hoisting \u0441 TDZ console.log(typeof b); // ReferenceError console.log(typeof c); // ReferenceError let b = 2; const c = 3; // Function hoisting console.log(myFunc()); // 'Hello from function' function myFunc() { return 'Hello from function'; } // Function expression \u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f console.log(myVar); // undefined console.log(myVar()); // TypeError: myVar is not a function var myVar = function() { return 'Hello from expression'; }; \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 var \u0432 \u0446\u0438\u043a\u043b\u0430\u0445 // \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 var for (var i = 0; i < 3; i++) { setTimeout(() => { console.log(i); // 3, 3, 3 (\u043d\u0435 0, 1, 2!) }, 100); } // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 let for (let i = 0; i < 3; i++) { setTimeout(() => { console.log(i); // 0, 1, 2 }, 100); } // \u041f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441 var var funcs = []; for (var i = 0; i < 3; i++) { funcs[i] = function() { return i; // \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e i }; } console.log(funcs[0]()); // 3 console.log(funcs[1]()); // 3 console.log(funcs[2]()); // 3 // \u0421 let \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 var funcs2 = []; for (let i = 0; i < 3; i++) { funcs2[i] = function() { return i; // \u041a\u0430\u0436\u0434\u043e\u0435 \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u043a\u043e\u043f\u0438\u044e i }; } console.log(funcs2[0]()); // 0 console.log(funcs2[1]()); // 1 console.log(funcs2[2]()); // 2 Temporal Dead Zone (TDZ) function demonstrateTDZ() { console.log('Start of function'); // TDZ \u0434\u043b\u044f 'letVar' \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c console.log(typeof letVar); // ReferenceError let letVar = 'Hello'; // TDZ \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c console.log(letVar); // 'Hello' } // TDZ \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e function defaultParamTDZ(a = b, b = 2) { // ReferenceError: Cannot access 'b' before initialization } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a function defaultParamOK(a = 1, b = a) { return [a, b]; // [1, 1] } \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React import React, { useState, useEffect } from 'react'; function ReactExample() { // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f hooks const [count, setCount] = useState(0); const [user, setUser] = useState(null); // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 const API_URL = 'https://api.example.com'; useEffect(() => { // \u2705 let \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f let isCancelled = false; async function fetchUser() { try { const response = await fetch(`${API_URL}/user`); const userData = await response.json(); if (!isCancelled) { setUser(userData); } } catch (error) { if (!isCancelled) { console.error('Failed to fetch user:', error); } } } fetchUser(); return () => { isCancelled = true; // Cleanup }; }, []); // \u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 var \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c React // var handleClick = function() { ... }; // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = () => { setCount(prevCount => prevCount + 1); }; return ( <div> <p>Count: {count}</p> <button onClick={handleClick}>Increment</button> {user && <p>User: {user.name}</p>} </div> ); } Block Scope \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 function conditionalScope() { if (true) { var varInIf = 'var value'; let letInIf = 'let value'; const constInIf = 'const value'; } console.log(varInIf); // 'var value' \u2705 // console.log(letInIf); // ReferenceError \u274c // console.log(constInIf); // ReferenceError \u274c } // Switch statements function switchScope(value) { switch (value) { case 1: let x = 'case 1'; break; case 2: // let x = 'case 2'; // SyntaxError: Identifier 'x' has already been declared break; default: // \u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 } } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 function switchScopeCorrect(value) { switch (value) { case 1: { let x = 'case 1'; console.log(x); break; } case 2: { let x = 'case 2'; // \u2705 \u0422\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 console.log(x); break; } } } \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 // \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 var globalVar = 'I am global'; let globalLet = 'I am also global, but...'; const globalConst = 'I am global too, but...'; console.log(window.globalVar); // 'I am global' console.log(window.globalLet); // undefined console.log(window.globalConst); // undefined // var \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 // let \u0438 const - \u043d\u0435\u0442 \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 // \u2705 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0439 // 1. const - \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e const API_ENDPOINT = '/api/users'; const users = []; // 2. let - \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 let currentUser = null; let isLoading = false; // 3. var - \u0438\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 // var legacyVariable; // \u274c // \u2705 \u0412 \u0446\u0438\u043a\u043b\u0430\u0445 for (const user of users) { console.log(user); // const, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u043c } for (let i = 0; i < users.length; i++) { // let, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0441\u0447\u0435\u0442\u0447\u0438\u043a } // \u2705 \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 function processData(data) { const result = []; // const \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432/\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 let processed = 0; // let \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432 for (const item of data) { if (item.isValid) { result.push(process(item)); processed++; } } return { result, processed }; } ESLint \u043f\u0440\u0430\u0432\u0438\u043b\u0430 // .eslintrc.js module.exports = { rules: { 'no-var': 'error', // \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 var 'prefer-const': 'error', // \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442 const 'no-undef': 'error', // \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 'block-scoped-var': 'error', // \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043b\u043e\u0447\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f var } }; \u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c // var \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f function createFunctions() { var functions = []; // \u274c \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e - \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043e\u0434\u043d\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e for (var i = 0; i < 1000; i++) { functions.push(function() { return i; }); } return functions; } // \u2705 \u0411\u044b\u0441\u0442\u0440\u0435\u0435 - \u043a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c function createFunctionsOptimized() { const functions = []; for (let i = 0; i < 1000; i++) { functions.push(() => i); } return functions; } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0412\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e , \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043a let \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 var \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ESLint \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 TDZ - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043e\u0442\u043b\u0430\u0434\u043a\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0412 React \u043e\u0442\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0435 const \u0434\u043b\u044f hooks \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 block scope \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u043e\u043c\u043d\u0438\u0442\u0435 \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - let/const \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0432 \u0446\u0438\u043a\u043b\u0430\u0445 \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Event Loop, Microtasks \u0438 Macrotasks Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445","title":"Let, Const, Var: Scope \u0438 Hoisting"},{"location":"questions/javascript/scope-hoisting/#let-const-var-scope-hoisting","text":"","title":"Let, Const, Var: Scope \u0438 Hoisting"},{"location":"questions/javascript/scope-hoisting/#_1","text":"\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 let, const \u0438 var \u0432 JavaScript, \u0438 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 scope \u0438 hoisting?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/scope-hoisting/#_2","text":"\u0412 JavaScript \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445: var , let \u0438 const . \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 (scope) \u0438 \u043f\u043e\u0434\u043d\u044f\u0442\u0438\u044f (hoisting).","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/scope-hoisting/#_3","text":"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 var let const Scope Function/Global Block Block Hoisting \u0414\u0430 (\u0441 undefined) \u0414\u0430 (\u0432 TDZ) \u0414\u0430 (\u0432 TDZ) \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u041f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e Temporal Dead Zone \u041d\u0435\u0442 \u0414\u0430 \u0414\u0430","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f"},{"location":"questions/javascript/scope-hoisting/#var-function-scoped","text":"function varExample() { console.log(x); // undefined (\u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0430!) if (true) { var x = 1; console.log(x); // 1 } console.log(x); // 1 (\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \"\u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442\" \u0438\u0437 \u0431\u043b\u043e\u043a\u0430) } // Hoisting \u0441 var console.log(hoistedVar); // undefined var hoistedVar = 'Hello'; // \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e: // var hoistedVar; // console.log(hoistedVar); // undefined // hoistedVar = 'Hello';","title":"var - Function Scoped"},{"location":"questions/javascript/scope-hoisting/#let-block-scoped","text":"function letExample() { // console.log(y); // ReferenceError: Cannot access 'y' before initialization if (true) { let y = 1; console.log(y); // 1 } // console.log(y); // ReferenceError: y is not defined } // Temporal Dead Zone (TDZ) function tdgExample() { console.log(typeof z); // ReferenceError (\u0432 TDZ) let z = 'Hello'; } // \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e let name = 'John'; // let name = 'Jane'; // SyntaxError: Identifier 'name' has already been declared","title":"let - Block Scoped"},{"location":"questions/javascript/scope-hoisting/#const-block-scoped-immutable-binding","text":"function constExample() { const PI = 3.14159; // PI = 3.14; // TypeError: Assignment to constant variable if (true) { const LOCAL_CONST = 'local'; console.log(LOCAL_CONST); // 'local' } // console.log(LOCAL_CONST); // ReferenceError: LOCAL_CONST is not defined } // \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c const user = { name: 'John', age: 30 }; user.age = 31; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e user.city = 'New York'; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e const numbers = [1, 2, 3]; numbers.push(4); // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e numbers[0] = 10; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // \u041d\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c // user = {}; // \u274c TypeError // numbers = []; // \u274c TypeError","title":"const - Block Scoped \u0438 Immutable Binding"},{"location":"questions/javascript/scope-hoisting/#hoisting","text":"// var hoisting console.log(a); // undefined var a = 1; console.log(a); // 1 // let/const hoisting \u0441 TDZ console.log(typeof b); // ReferenceError console.log(typeof c); // ReferenceError let b = 2; const c = 3; // Function hoisting console.log(myFunc()); // 'Hello from function' function myFunc() { return 'Hello from function'; } // Function expression \u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f console.log(myVar); // undefined console.log(myVar()); // TypeError: myVar is not a function var myVar = function() { return 'Hello from expression'; };","title":"Hoisting \u0432 \u0434\u0435\u0442\u0430\u043b\u044f\u0445"},{"location":"questions/javascript/scope-hoisting/#var","text":"// \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 var for (var i = 0; i < 3; i++) { setTimeout(() => { console.log(i); // 3, 3, 3 (\u043d\u0435 0, 1, 2!) }, 100); } // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 let for (let i = 0; i < 3; i++) { setTimeout(() => { console.log(i); // 0, 1, 2 }, 100); } // \u041f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441 var var funcs = []; for (var i = 0; i < 3; i++) { funcs[i] = function() { return i; // \u0417\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e i }; } console.log(funcs[0]()); // 3 console.log(funcs[1]()); // 3 console.log(funcs[2]()); // 3 // \u0421 let \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 var funcs2 = []; for (let i = 0; i < 3; i++) { funcs2[i] = function() { return i; // \u041a\u0430\u0436\u0434\u043e\u0435 \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u0435 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u043a\u043e\u043f\u0438\u044e i }; } console.log(funcs2[0]()); // 0 console.log(funcs2[1]()); // 1 console.log(funcs2[2]()); // 2","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 var \u0432 \u0446\u0438\u043a\u043b\u0430\u0445"},{"location":"questions/javascript/scope-hoisting/#temporal-dead-zone-tdz","text":"function demonstrateTDZ() { console.log('Start of function'); // TDZ \u0434\u043b\u044f 'letVar' \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c console.log(typeof letVar); // ReferenceError let letVar = 'Hello'; // TDZ \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c console.log(letVar); // 'Hello' } // TDZ \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e function defaultParamTDZ(a = b, b = 2) { // ReferenceError: Cannot access 'b' before initialization } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a function defaultParamOK(a = 1, b = a) { return [a, b]; // [1, 1] }","title":"Temporal Dead Zone (TDZ)"},{"location":"questions/javascript/scope-hoisting/#react","text":"import React, { useState, useEffect } from 'react'; function ReactExample() { // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f hooks const [count, setCount] = useState(0); const [user, setUser] = useState(null); // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 const API_URL = 'https://api.example.com'; useEffect(() => { // \u2705 let \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f let isCancelled = false; async function fetchUser() { try { const response = await fetch(`${API_URL}/user`); const userData = await response.json(); if (!isCancelled) { setUser(userData); } } catch (error) { if (!isCancelled) { console.error('Failed to fetch user:', error); } } } fetchUser(); return () => { isCancelled = true; // Cleanup }; }, []); // \u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 var \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c React // var handleClick = function() { ... }; // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = () => { setCount(prevCount => prevCount + 1); }; return ( <div> <p>Count: {count}</p> <button onClick={handleClick}>Increment</button> {user && <p>User: {user.name}</p>} </div> ); }","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 React"},{"location":"questions/javascript/scope-hoisting/#block-scope","text":"function conditionalScope() { if (true) { var varInIf = 'var value'; let letInIf = 'let value'; const constInIf = 'const value'; } console.log(varInIf); // 'var value' \u2705 // console.log(letInIf); // ReferenceError \u274c // console.log(constInIf); // ReferenceError \u274c } // Switch statements function switchScope(value) { switch (value) { case 1: let x = 'case 1'; break; case 2: // let x = 'case 2'; // SyntaxError: Identifier 'x' has already been declared break; default: // \u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 } } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 function switchScopeCorrect(value) { switch (value) { case 1: { let x = 'case 1'; console.log(x); break; } case 2: { let x = 'case 2'; // \u2705 \u0422\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 console.log(x); break; } } }","title":"Block Scope \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445"},{"location":"questions/javascript/scope-hoisting/#_4","text":"// \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 var globalVar = 'I am global'; let globalLet = 'I am also global, but...'; const globalConst = 'I am global too, but...'; console.log(window.globalVar); // 'I am global' console.log(window.globalLet); // undefined console.log(window.globalConst); // undefined // var \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 // let \u0438 const - \u043d\u0435\u0442","title":"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"questions/javascript/scope-hoisting/#_5","text":"// \u2705 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0439 // 1. const - \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e const API_ENDPOINT = '/api/users'; const users = []; // 2. let - \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 let currentUser = null; let isLoading = false; // 3. var - \u0438\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 // var legacyVariable; // \u274c // \u2705 \u0412 \u0446\u0438\u043a\u043b\u0430\u0445 for (const user of users) { console.log(user); // const, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u043c } for (let i = 0; i < users.length; i++) { // let, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0441\u0447\u0435\u0442\u0447\u0438\u043a } // \u2705 \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 function processData(data) { const result = []; // const \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432/\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 let processed = 0; // let \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432 for (const item of data) { if (item.isValid) { result.push(process(item)); processed++; } } return { result, processed }; }","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/javascript/scope-hoisting/#eslint","text":"// .eslintrc.js module.exports = { rules: { 'no-var': 'error', // \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 var 'prefer-const': 'error', // \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442 const 'no-undef': 'error', // \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 'block-scoped-var': 'error', // \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043b\u043e\u0447\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f var } };","title":"ESLint \u043f\u0440\u0430\u0432\u0438\u043b\u0430"},{"location":"questions/javascript/scope-hoisting/#_6","text":"// var \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f function createFunctions() { var functions = []; // \u274c \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e - \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043e\u0434\u043d\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e for (var i = 0; i < 1000; i++) { functions.push(function() { return i; }); } return functions; } // \u2705 \u0411\u044b\u0441\u0442\u0440\u0435\u0435 - \u043a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c function createFunctionsOptimized() { const functions = []; for (let i = 0; i < 1000; i++) { functions.push(() => i); } return functions; }","title":"\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"questions/javascript/scope-hoisting/#senior-","text":"\u0412\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e , \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043a let \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 var \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ESLint \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 TDZ - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043e\u0442\u043b\u0430\u0434\u043a\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0412 React \u043e\u0442\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0435 const \u0434\u043b\u044f hooks \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 block scope \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u043e\u043c\u043d\u0438\u0442\u0435 \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - let/const \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0432 \u0446\u0438\u043a\u043b\u0430\u0445","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/scope-hoisting/#_7","text":"Event Loop, Microtasks \u0438 Macrotasks Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/scope-hoisting_small/","text":"Let, Const, Var - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small) \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 var let const Scope Function/Global Block Block Hoisting \u0414\u0430 (undefined) \u0414\u0430 (TDZ) \u0414\u0430 (TDZ) \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u2705 \u274c \u274c \u041f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 \u2705 \u2705 \u274c TDZ \u041d\u0435\u0442 \u0414\u0430 \u0414\u0430 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 Temporal Dead Zone (TDZ) console.log(x); // undefined (var) console.log(y); // ReferenceError (let \u0432 TDZ) var x = 1; let y = 2; Block Scope if (true) { var a = 1; // function scoped let b = 2; // block scoped const c = 3; // block scoped } console.log(a); // 1 console.log(b); // ReferenceError \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438 // \u274c var - \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 3 for (var i = 0; i < 3; i++) { setTimeout(() => console.log(i), 100); // 3, 3, 3 } // \u2705 let - \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 for (let i = 0; i < 3; i++) { setTimeout(() => console.log(i), 100); // 0, 1, 2 } React best practices function Component() { // \u2705 const \u0434\u043b\u044f hooks \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 const [state, setState] = useState(0); const API_URL = '/api'; // \u2705 let \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 useEffect useEffect(() => { let isCancelled = false; fetchData().then(data => { if (!isCancelled) setState(data); }); return () => { isCancelled = true; }; }, []); // \u2705 const \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = () => setState(prev => prev + 1); } Switch scope switch (value) { case 1: { // \u2705 \u0411\u043b\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 let x = 'case 1'; break; } case 2: { let x = 'case 2'; // \u2705 \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 break; } } \u041c\u0443\u0442\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 const obj = { a: 1 }; obj.a = 2; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e obj.b = 3; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // obj = {}; // \u274c TypeError const arr = [1, 2]; arr.push(3); // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // arr = []; // \u274c TypeError Senior \u043f\u0440\u0430\u0432\u0438\u043b\u0430 const \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2192 let \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u2192 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 var TDZ \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 - \u043b\u043e\u0432\u0438\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 Block scope - \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 { } React : const \u0434\u043b\u044f hooks/handlers, let \u0434\u043b\u044f cleanup flags \u0426\u0438\u043a\u043b\u044b : const \u0434\u043b\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c, let \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432","title":"Let, Const, Var - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/scope-hoisting_small/#let-const-var-small","text":"","title":"Let, Const, Var - \u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 (small)"},{"location":"questions/javascript/scope-hoisting_small/#_1","text":"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 var let const Scope Function/Global Block Block Hoisting \u0414\u0430 (undefined) \u0414\u0430 (TDZ) \u0414\u0430 (TDZ) \u041f\u0435\u0440\u0435\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u2705 \u274c \u274c \u041f\u0435\u0440\u0435\u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 \u2705 \u2705 \u274c TDZ \u041d\u0435\u0442 \u0414\u0430 \u0414\u0430","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f"},{"location":"questions/javascript/scope-hoisting_small/#_2","text":"","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438"},{"location":"questions/javascript/scope-hoisting_small/#temporal-dead-zone-tdz","text":"console.log(x); // undefined (var) console.log(y); // ReferenceError (let \u0432 TDZ) var x = 1; let y = 2;","title":"Temporal Dead Zone (TDZ)"},{"location":"questions/javascript/scope-hoisting_small/#block-scope","text":"if (true) { var a = 1; // function scoped let b = 2; // block scoped const c = 3; // block scoped } console.log(a); // 1 console.log(b); // ReferenceError","title":"Block Scope"},{"location":"questions/javascript/scope-hoisting_small/#_3","text":"// \u274c var - \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 3 for (var i = 0; i < 3; i++) { setTimeout(() => console.log(i), 100); // 3, 3, 3 } // \u2705 let - \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 for (let i = 0; i < 3; i++) { setTimeout(() => console.log(i), 100); // 0, 1, 2 }","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438"},{"location":"questions/javascript/scope-hoisting_small/#react-best-practices","text":"function Component() { // \u2705 const \u0434\u043b\u044f hooks \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 const [state, setState] = useState(0); const API_URL = '/api'; // \u2705 let \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 useEffect useEffect(() => { let isCancelled = false; fetchData().then(data => { if (!isCancelled) setState(data); }); return () => { isCancelled = true; }; }, []); // \u2705 const \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = () => setState(prev => prev + 1); }","title":"React best practices"},{"location":"questions/javascript/scope-hoisting_small/#switch-scope","text":"switch (value) { case 1: { // \u2705 \u0411\u043b\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 let x = 'case 1'; break; } case 2: { let x = 'case 2'; // \u2705 \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 break; } }","title":"Switch scope"},{"location":"questions/javascript/scope-hoisting_small/#_4","text":"const obj = { a: 1 }; obj.a = 2; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e obj.b = 3; // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // obj = {}; // \u274c TypeError const arr = [1, 2]; arr.push(3); // \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e // arr = []; // \u274c TypeError","title":"\u041c\u0443\u0442\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"questions/javascript/scope-hoisting_small/#senior","text":"const \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2192 let \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u2192 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 var TDZ \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 - \u043b\u043e\u0432\u0438\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 Block scope - \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 { } React : const \u0434\u043b\u044f hooks/handlers, let \u0434\u043b\u044f cleanup flags \u0426\u0438\u043a\u043b\u044b : const \u0434\u043b\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c, let \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432","title":"Senior \u043f\u0440\u0430\u0432\u0438\u043b\u0430"},{"location":"questions/javascript/typing-comparison/","text":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0432 JavaScript \u0438 Java: \u043a\u0430\u043a \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f JS \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432 Java, \u0438 \u043a\u0430\u043a TypeScript \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432 React-\u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u2014 \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. JavaScript \u0438 Java \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 JavaScript Java TypeScript \u0422\u0438\u043f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u043e\u0432 Runtime Compile-time Compile-time \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e Type safety \u0421\u043b\u0430\u0431\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0411\u044b\u0441\u0442\u0440\u0435\u0435 \u041a\u0430\u043a JS + \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 JavaScript - \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 // \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0438\u043f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f let value = 42; // number value = \"hello\"; // string value = true; // boolean value = { id: 1 }; // object value = [1, 2, 3]; // array (object) // Type coercion - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 console.log(\"5\" + 3); // \"53\" (string) console.log(\"5\" - 3); // 2 (number) console.log(true + 1); // 2 (number) console.log(null == undefined); // true console.log(null === undefined); // false // \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0442\u0438\u043f\u044b function flexibleFunction(param) { if (typeof param === 'string') { return param.toUpperCase(); } else if (typeof param === 'number') { return param * 2; } else if (Array.isArray(param)) { return param.length; } return param; } flexibleFunction(\"hello\"); // \"HELLO\" flexibleFunction(5); // 10 flexibleFunction([1,2,3]); // 3 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // 1. \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 function processData(data) { // \u041c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043b\u044e\u0431\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 return data.map ? data.map(x => x * 2) : data * 2; } // 2. \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 API function apiWrapper(endpoint, options = {}) { // options \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 const config = typeof options === 'function' ? { callback: options } : options; return fetch(endpoint, config); } // 3. Duck typing function processCollection(collection) { // \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c, \u0438\u043c\u0435\u044e\u0449\u0438\u043c \u043c\u0435\u0442\u043e\u0434 forEach if (collection.forEach) { collection.forEach(item => console.log(item)); } } processCollection([1, 2, 3]); // Array processCollection(new Set([1, 2, 3])); // Set processCollection(\"hello\"); // String (has forEach? No, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c) \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // 1. Runtime \u043e\u0448\u0438\u0431\u043a\u0438 function calculateArea(width, height) { return width * height; // \u0427\u0442\u043e \u0435\u0441\u043b\u0438 width - \u0441\u0442\u0440\u043e\u043a\u0430? } calculateArea(\"10\", 5); // 50 (\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e) calculateArea(\"hello\", 5); // NaN // 2. \u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 const user = { name: \"John\", age: 30 }; console.log(user.name.toUpperCase()); // \"JOHN\" // \u0415\u0441\u043b\u0438 name \u0441\u0442\u0430\u043d\u0435\u0442 null/undefined user.name = null; // console.log(user.name.toUpperCase()); // TypeError: Cannot read property 'toUpperCase' of null // 3. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function processUser(user) { // IDE \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0443 user return user. // \u041d\u0435\u0442 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f } Java - \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 // \u0422\u0438\u043f\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044f\u0432\u043d\u043e \u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f int number = 42; String text = \"hello\"; boolean flag = true; // number = \"hello\"; // \u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438! // \u041c\u0435\u0442\u043e\u0434\u044b \u0441 \u0447\u0435\u0442\u043a\u0438\u043c\u0438 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430\u043c\u0438 public class Calculator { public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } // \u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 } // Generics \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 List<String> names = new ArrayList<>(); names.add(\"John\"); names.add(\"Jane\"); // names.add(123); // \u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438! // Interface \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 interface UserService { User findById(Long id); List<User> findAll(); void save(User user); } \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // 1. \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u043e\u0432 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 public class BankAccount { private BigDecimal balance; public void withdraw(BigDecimal amount) { if (amount.compareTo(BigDecimal.ZERO) <= 0) { throw new IllegalArgumentException(\"Amount must be positive\"); } if (balance.compareTo(amount) < 0) { throw new InsufficientFundsException(); } balance = balance.subtract(amount); } } // 2. \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // - \u0410\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 // - \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 // - \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u043e\u0434\u0443 // - \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 // 3. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b public interface PaymentProcessor { PaymentResult processPayment( PaymentRequest request, PaymentMethod method ) throws PaymentException; } TypeScript - \u041b\u0443\u0447\u0448\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043c\u0438\u0440\u043e\u0432 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 // 1. \u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f let id: number = 123; let name: string = \"John\"; let isActive: boolean = true; // \u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0431\u0435\u0437 \u0442\u0438\u043f\u043e\u0432 let dynamicValue; // any by default (\u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0439 \u0440\u0435\u0436\u0438\u043c) // 2. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u0442\u0438\u043f\u044b interface User { id: number; name: string; email?: string; // \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e readonly createdAt: Date; // \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f } type UserRole = 'admin' | 'user' | 'moderator'; // union types // 3. Generics interface ApiResponse<T> { data: T; status: number; message: string; } function fetchData<T>(url: string): Promise<ApiResponse<T>> { return fetch(url).then(response => response.json()); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const users = await fetchData<User[]>('/api/users'); // users.data \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f User[] \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 TypeScript // 1. Conditional types type NonNullable<T> = T extends null | undefined ? never : T; // 2. Mapped types type Partial<T> = { [P in keyof T]?: T[P]; }; type ReadOnly<T> = { readonly [P in keyof T]: T[P]; }; // 3. Template literal types type EventName<T extends string> = `on${Capitalize<T>}`; type ClickEvent = EventName<'click'>; // 'onClick' // 4. Utility types interface DatabaseUser { id: number; name: string; email: string; password: string; createdAt: Date; } type PublicUser = Omit<DatabaseUser, 'password'>; // \u0411\u0435\u0437 password type UserUpdate = Partial<Pick<DatabaseUser, 'name' | 'email'>>; // \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 name \u0438 email type UserKeys = keyof DatabaseUser; // 'id' | 'name' | 'email' | 'password' | 'createdAt' TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 // 1. Functional Component interface ButtonProps { children: React.ReactNode; variant?: 'primary' | 'secondary' | 'danger'; disabled?: boolean; onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void; } const Button: React.FC<ButtonProps> = ({ children, variant = 'primary', disabled = false, onClick }) => { return ( <button className={`btn btn-${variant}`} disabled={disabled} onClick={onClick} > {children} </button> ); }; // 2. Generic Component interface ListProps<T> { items: T[]; renderItem: (item: T, index: number) => React.ReactNode; keyExtractor: (item: T) => string | number; } function List<T>({ items, renderItem, keyExtractor }: ListProps<T>) { return ( <ul> {items.map((item, index) => ( <li key={keyExtractor(item)}> {renderItem(item, index)} </li> ))} </ul> ); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <List items={users} renderItem={(user) => <span>{user.name}</span>} keyExtractor={(user) => user.id} /> \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0443\u043a\u043e\u0432 // 1. useState \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 const [user, setUser] = useState<User | null>(null); const [loading, setLoading] = useState<boolean>(false); const [errors, setErrors] = useState<string[]>([]); // 2. useReducer interface State { count: number; error: string | null; } type Action = | { type: 'increment' } | { type: 'decrement' } | { type: 'reset' } | { type: 'error'; payload: string }; const reducer = (state: State, action: Action): State => { switch (action.type) { case 'increment': return { ...state, count: state.count + 1, error: null }; case 'decrement': return { ...state, count: state.count - 1, error: null }; case 'reset': return { count: 0, error: null }; case 'error': return { ...state, error: action.payload }; default: return state; } }; // 3. Custom hooks function useApi<T>(url: string) { const [data, setData] = useState<T | null>(null); const [loading, setLoading] = useState<boolean>(false); const [error, setError] = useState<Error | null>(null); const fetchData = useCallback(async () => { try { setLoading(true); setError(null); const response = await fetch(url); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result: T = await response.json(); setData(result); } catch (err) { setError(err as Error); } finally { setLoading(false); } }, [url]); return { data, loading, error, refetch: fetchData }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const { data: users, loading, error } = useApi<User[]>('/api/users'); \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 // Event handlers interface FormProps { onSubmit: (data: FormData) => void; } const ContactForm: React.FC<FormProps> = ({ onSubmit }) => { const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); const formData = new FormData(event.currentTarget); const data = { name: formData.get('name') as string, email: formData.get('email') as string, }; onSubmit(data); }; const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => { const { name, value } = event.target; // \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 }; return ( <form onSubmit={handleSubmit}> <input name=\"name\" onChange={handleInputChange} /> <input name=\"email\" type=\"email\" onChange={handleInputChange} /> <button type=\"submit\">Submit</button> </form> ); }; \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 // Context \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 interface AuthContextType { user: User | null; login: (email: string, password: string) => Promise<void>; logout: () => void; loading: boolean; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => { const [user, setUser] = useState<User | null>(null); const [loading, setLoading] = useState<boolean>(false); const login = async (email: string, password: string): Promise<void> => { setLoading(true); try { const response = await fetch('/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }), }); if (!response.ok) { throw new Error('Login failed'); } const userData: User = await response.json(); setUser(userData); } finally { setLoading(false); } }; const logout = (): void => { setUser(null); }; return ( <AuthContext.Provider value={{ user, login, logout, loading }}> {children} </AuthContext.Provider> ); }; // Custom hook \u0441 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0435\u0439 export const useAuth = (): AuthContextType => { const context = useContext(AuthContext); if (context === undefined) { throw new Error('useAuth must be used within an AuthProvider'); } return context; }; \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 JavaScript - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430: // + \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 // + \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c // + \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f // + \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f MVP \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 function createApp() { const state = {}; return { getData: (key) => state[key], setData: (key, value) => state[key] = value, render: () => JSON.stringify(state) }; } // \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438: // - Runtime \u043e\u0448\u0438\u0431\u043a\u0438 // - \u0421\u043b\u0430\u0431\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 // - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 Java - Enterprise \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 // \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430: // + \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c // + \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // + \u041b\u0435\u0433\u043a\u0438\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 // + \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c @Service public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @Override @Transactional public User createUser(CreateUserRequest request) { validateUserRequest(request); User user = User.builder() .name(request.getName()) .email(request.getEmail()) .build(); return userRepository.save(user); } } // \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438: // - Verbose \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 // - \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 // - \u0411\u043e\u043b\u044c\u0448\u0435 boilerplate \u043a\u043e\u0434\u0430 TypeScript - \u0411\u0430\u043b\u0430\u043d\u0441 // \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 TypeScript \u0432 React: // + \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 // + \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // + \u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441 JS // + \u0421\u0430\u043c\u043e\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043e\u0434 interface Props { user: User; onEdit: (user: User) => void; } const UserCard: React.FC<Props> = ({ user, onEdit }) => { // IDE \u0437\u043d\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 user // \u0410\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e // \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u0435\u043d return ( <div> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onEdit(user)}> Edit </button> </div> ); }; \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0434\u043b\u044f TypeScript \u0432 React 1. Strict \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f // tsconfig.json { \"compilerOptions\": { \"strict\": true, \"noImplicitAny\": true, \"strictNullChecks\": true, \"strictFunctionTypes\": true, \"noImplicitReturns\": true, \"noFallthroughCasesInSwitch\": true, \"noUncheckedIndexedAccess\": true } } 2. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 any // \u274c \u041f\u043b\u043e\u0445\u043e const processData = (data: any) => { return data.someProperty; }; // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e interface DataType { someProperty: string; // \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 } const processData = (data: DataType) => { return data.someProperty; }; // \u2705 \u0418\u043b\u0438 \u0441 generic const processData = <T extends { someProperty: string }>(data: T) => { return data.someProperty; }; 3. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => { console.log(event.target.value); }; const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => { console.log('Button clicked'); }; const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); }; \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441 JavaScript \u043d\u0430 TypeScript \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 // 1. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u043b\u044e\u0431\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 let userData: any = fetchUserData(); // 2. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b let userId: number = 123; let userName: string = \"John\"; // 3. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b interface User { id: number; name: string; email: string; } // 4. \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(id: number): Promise<User> { return fetch(`/api/users/${id}`).then(r => r.json()); } // 5. \u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 TypeScript \u0432 \u043d\u043e\u0432\u044b\u0445 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 strict \u0440\u0435\u0436\u0438\u043c \u0434\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f API \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 any - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 unknown \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 utility types \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 ESLint \u0441 TypeScript \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442: - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 Java - \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JavaScript - \u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 IDE \u0441 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c - \u041b\u0443\u0447\u0448\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043a\u043e\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b - \u041c\u0435\u043d\u044c\u0448\u0435 runtime \u043e\u0448\u0438\u0431\u043e\u043a \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f compile-time \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Let, Const, Var: Scope \u0438 Hoisting Currying \u0432 JavaScript \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f Higher-Order Components (HOC)","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java"},{"location":"questions/javascript/typing-comparison/#js-java","text":"","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java"},{"location":"questions/javascript/typing-comparison/#_1","text":"\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0432 JavaScript \u0438 Java: \u043a\u0430\u043a \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f JS \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432 Java, \u0438 \u043a\u0430\u043a TypeScript \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432 React-\u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/javascript/typing-comparison/#_2","text":"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u2014 \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. JavaScript \u0438 Java \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/javascript/typing-comparison/#_3","text":"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 JavaScript Java TypeScript \u0422\u0438\u043f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u043e\u0432 Runtime Compile-time Compile-time \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e Type safety \u0421\u043b\u0430\u0431\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0411\u044b\u0441\u0442\u0440\u0435\u0435 \u041a\u0430\u043a JS + \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f"},{"location":"questions/javascript/typing-comparison/#javascript-","text":"","title":"JavaScript - \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/typing-comparison/#_4","text":"// \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0438\u043f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f let value = 42; // number value = \"hello\"; // string value = true; // boolean value = { id: 1 }; // object value = [1, 2, 3]; // array (object) // Type coercion - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 console.log(\"5\" + 3); // \"53\" (string) console.log(\"5\" - 3); // 2 (number) console.log(true + 1); // 2 (number) console.log(null == undefined); // true console.log(null === undefined); // false // \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0442\u0438\u043f\u044b function flexibleFunction(param) { if (typeof param === 'string') { return param.toUpperCase(); } else if (typeof param === 'number') { return param * 2; } else if (Array.isArray(param)) { return param.length; } return param; } flexibleFunction(\"hello\"); // \"HELLO\" flexibleFunction(5); // 10 flexibleFunction([1,2,3]); // 3","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/typing-comparison/#_5","text":"// 1. \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 function processData(data) { // \u041c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043b\u044e\u0431\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 return data.map ? data.map(x => x * 2) : data * 2; } // 2. \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 API function apiWrapper(endpoint, options = {}) { // options \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 const config = typeof options === 'function' ? { callback: options } : options; return fetch(endpoint, config); } // 3. Duck typing function processCollection(collection) { // \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c, \u0438\u043c\u0435\u044e\u0449\u0438\u043c \u043c\u0435\u0442\u043e\u0434 forEach if (collection.forEach) { collection.forEach(item => console.log(item)); } } processCollection([1, 2, 3]); // Array processCollection(new Set([1, 2, 3])); // Set processCollection(\"hello\"); // String (has forEach? No, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c)","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/javascript/typing-comparison/#_6","text":"// 1. Runtime \u043e\u0448\u0438\u0431\u043a\u0438 function calculateArea(width, height) { return width * height; // \u0427\u0442\u043e \u0435\u0441\u043b\u0438 width - \u0441\u0442\u0440\u043e\u043a\u0430? } calculateArea(\"10\", 5); // 50 (\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e) calculateArea(\"hello\", 5); // NaN // 2. \u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 const user = { name: \"John\", age: 30 }; console.log(user.name.toUpperCase()); // \"JOHN\" // \u0415\u0441\u043b\u0438 name \u0441\u0442\u0430\u043d\u0435\u0442 null/undefined user.name = null; // console.log(user.name.toUpperCase()); // TypeError: Cannot read property 'toUpperCase' of null // 3. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function processUser(user) { // IDE \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0443 user return user. // \u041d\u0435\u0442 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/javascript/typing-comparison/#java-","text":"","title":"Java - \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/typing-comparison/#_7","text":"// \u0422\u0438\u043f\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044f\u0432\u043d\u043e \u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f int number = 42; String text = \"hello\"; boolean flag = true; // number = \"hello\"; // \u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438! // \u041c\u0435\u0442\u043e\u0434\u044b \u0441 \u0447\u0435\u0442\u043a\u0438\u043c\u0438 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430\u043c\u0438 public class Calculator { public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } // \u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 } // Generics \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 List<String> names = new ArrayList<>(); names.add(\"John\"); names.add(\"Jane\"); // names.add(123); // \u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438! // Interface \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 interface UserService { User findById(Long id); List<User> findAll(); void save(User user); }","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/typing-comparison/#_8","text":"// 1. \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u043e\u0432 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 public class BankAccount { private BigDecimal balance; public void withdraw(BigDecimal amount) { if (amount.compareTo(BigDecimal.ZERO) <= 0) { throw new IllegalArgumentException(\"Amount must be positive\"); } if (balance.compareTo(amount) < 0) { throw new InsufficientFundsException(); } balance = balance.subtract(amount); } } // 2. \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // - \u0410\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 // - \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 // - \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u043e\u0434\u0443 // - \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 // 3. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b public interface PaymentProcessor { PaymentResult processPayment( PaymentRequest request, PaymentMethod method ) throws PaymentException; }","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/javascript/typing-comparison/#typescript-","text":"","title":"TypeScript - \u041b\u0443\u0447\u0448\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043c\u0438\u0440\u043e\u0432"},{"location":"questions/javascript/typing-comparison/#_9","text":"// 1. \u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f let id: number = 123; let name: string = \"John\"; let isActive: boolean = true; // \u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0431\u0435\u0437 \u0442\u0438\u043f\u043e\u0432 let dynamicValue; // any by default (\u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0439 \u0440\u0435\u0436\u0438\u043c) // 2. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u0442\u0438\u043f\u044b interface User { id: number; name: string; email?: string; // \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e readonly createdAt: Date; // \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f } type UserRole = 'admin' | 'user' | 'moderator'; // union types // 3. Generics interface ApiResponse<T> { data: T; status: number; message: string; } function fetchData<T>(url: string): Promise<ApiResponse<T>> { return fetch(url).then(response => response.json()); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const users = await fetchData<User[]>('/api/users'); // users.data \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f User[]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/javascript/typing-comparison/#typescript","text":"// 1. Conditional types type NonNullable<T> = T extends null | undefined ? never : T; // 2. Mapped types type Partial<T> = { [P in keyof T]?: T[P]; }; type ReadOnly<T> = { readonly [P in keyof T]: T[P]; }; // 3. Template literal types type EventName<T extends string> = `on${Capitalize<T>}`; type ClickEvent = EventName<'click'>; // 'onClick' // 4. Utility types interface DatabaseUser { id: number; name: string; email: string; password: string; createdAt: Date; } type PublicUser = Omit<DatabaseUser, 'password'>; // \u0411\u0435\u0437 password type UserUpdate = Partial<Pick<DatabaseUser, 'name' | 'email'>>; // \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 name \u0438 email type UserKeys = keyof DatabaseUser; // 'id' | 'name' | 'email' | 'password' | 'createdAt'","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 TypeScript"},{"location":"questions/javascript/typing-comparison/#typescript-react","text":"","title":"TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445"},{"location":"questions/javascript/typing-comparison/#_10","text":"// 1. Functional Component interface ButtonProps { children: React.ReactNode; variant?: 'primary' | 'secondary' | 'danger'; disabled?: boolean; onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void; } const Button: React.FC<ButtonProps> = ({ children, variant = 'primary', disabled = false, onClick }) => { return ( <button className={`btn btn-${variant}`} disabled={disabled} onClick={onClick} > {children} </button> ); }; // 2. Generic Component interface ListProps<T> { items: T[]; renderItem: (item: T, index: number) => React.ReactNode; keyExtractor: (item: T) => string | number; } function List<T>({ items, renderItem, keyExtractor }: ListProps<T>) { return ( <ul> {items.map((item, index) => ( <li key={keyExtractor(item)}> {renderItem(item, index)} </li> ))} </ul> ); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <List items={users} renderItem={(user) => <span>{user.name}</span>} keyExtractor={(user) => user.id} />","title":"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/javascript/typing-comparison/#_11","text":"// 1. useState \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 const [user, setUser] = useState<User | null>(null); const [loading, setLoading] = useState<boolean>(false); const [errors, setErrors] = useState<string[]>([]); // 2. useReducer interface State { count: number; error: string | null; } type Action = | { type: 'increment' } | { type: 'decrement' } | { type: 'reset' } | { type: 'error'; payload: string }; const reducer = (state: State, action: Action): State => { switch (action.type) { case 'increment': return { ...state, count: state.count + 1, error: null }; case 'decrement': return { ...state, count: state.count - 1, error: null }; case 'reset': return { count: 0, error: null }; case 'error': return { ...state, error: action.payload }; default: return state; } }; // 3. Custom hooks function useApi<T>(url: string) { const [data, setData] = useState<T | null>(null); const [loading, setLoading] = useState<boolean>(false); const [error, setError] = useState<Error | null>(null); const fetchData = useCallback(async () => { try { setLoading(true); setError(null); const response = await fetch(url); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result: T = await response.json(); setData(result); } catch (err) { setError(err as Error); } finally { setLoading(false); } }, [url]); return { data, loading, error, refetch: fetchData }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const { data: users, loading, error } = useApi<User[]>('/api/users');","title":"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0443\u043a\u043e\u0432"},{"location":"questions/javascript/typing-comparison/#_12","text":"// Event handlers interface FormProps { onSubmit: (data: FormData) => void; } const ContactForm: React.FC<FormProps> = ({ onSubmit }) => { const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); const formData = new FormData(event.currentTarget); const data = { name: formData.get('name') as string, email: formData.get('email') as string, }; onSubmit(data); }; const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => { const { name, value } = event.target; // \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 }; return ( <form onSubmit={handleSubmit}> <input name=\"name\" onChange={handleInputChange} /> <input name=\"email\" type=\"email\" onChange={handleInputChange} /> <button type=\"submit\">Submit</button> </form> ); };","title":"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439"},{"location":"questions/javascript/typing-comparison/#_13","text":"// Context \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 interface AuthContextType { user: User | null; login: (email: string, password: string) => Promise<void>; logout: () => void; loading: boolean; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => { const [user, setUser] = useState<User | null>(null); const [loading, setLoading] = useState<boolean>(false); const login = async (email: string, password: string): Promise<void> => { setLoading(true); try { const response = await fetch('/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }), }); if (!response.ok) { throw new Error('Login failed'); } const userData: User = await response.json(); setUser(userData); } finally { setLoading(false); } }; const logout = (): void => { setUser(null); }; return ( <AuthContext.Provider value={{ user, login, logout, loading }}> {children} </AuthContext.Provider> ); }; // Custom hook \u0441 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0435\u0439 export const useAuth = (): AuthContextType => { const context = useContext(AuthContext); if (context === undefined) { throw new Error('useAuth must be used within an AuthProvider'); } return context; };","title":"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430"},{"location":"questions/javascript/typing-comparison/#_14","text":"","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443"},{"location":"questions/javascript/typing-comparison/#javascript-_1","text":"// \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430: // + \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 // + \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c // + \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f // + \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f MVP \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 function createApp() { const state = {}; return { getData: (key) => state[key], setData: (key, value) => state[key] = value, render: () => JSON.stringify(state) }; } // \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438: // - Runtime \u043e\u0448\u0438\u0431\u043a\u0438 // - \u0421\u043b\u0430\u0431\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 // - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445","title":"JavaScript - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/javascript/typing-comparison/#java-enterprise","text":"// \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430: // + \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c // + \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // + \u041b\u0435\u0433\u043a\u0438\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 // + \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c @Service public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @Override @Transactional public User createUser(CreateUserRequest request) { validateUserRequest(request); User user = User.builder() .name(request.getName()) .email(request.getEmail()) .build(); return userRepository.save(user); } } // \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438: // - Verbose \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 // - \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 // - \u0411\u043e\u043b\u044c\u0448\u0435 boilerplate \u043a\u043e\u0434\u0430","title":"Java - Enterprise \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"questions/javascript/typing-comparison/#typescript-_1","text":"// \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 TypeScript \u0432 React: // + \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 // + \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE // + \u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441 JS // + \u0421\u0430\u043c\u043e\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043e\u0434 interface Props { user: User; onEdit: (user: User) => void; } const UserCard: React.FC<Props> = ({ user, onEdit }) => { // IDE \u0437\u043d\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 user // \u0410\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e // \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u0435\u043d return ( <div> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onEdit(user)}> Edit </button> </div> ); };","title":"TypeScript - \u0411\u0430\u043b\u0430\u043d\u0441"},{"location":"questions/javascript/typing-comparison/#typescript-react_1","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0434\u043b\u044f TypeScript \u0432 React"},{"location":"questions/javascript/typing-comparison/#1-strict","text":"// tsconfig.json { \"compilerOptions\": { \"strict\": true, \"noImplicitAny\": true, \"strictNullChecks\": true, \"strictFunctionTypes\": true, \"noImplicitReturns\": true, \"noFallthroughCasesInSwitch\": true, \"noUncheckedIndexedAccess\": true } }","title":"1. Strict \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/typing-comparison/#2-any","text":"// \u274c \u041f\u043b\u043e\u0445\u043e const processData = (data: any) => { return data.someProperty; }; // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e interface DataType { someProperty: string; // \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 } const processData = (data: DataType) => { return data.someProperty; }; // \u2705 \u0418\u043b\u0438 \u0441 generic const processData = <T extends { someProperty: string }>(data: T) => { return data.someProperty; };","title":"2. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 any"},{"location":"questions/javascript/typing-comparison/#3","text":"// \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => { console.log(event.target.value); }; const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => { console.log('Button clicked'); }; const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); };","title":"3. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439"},{"location":"questions/javascript/typing-comparison/#javascript-typescript","text":"","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441 JavaScript \u043d\u0430 TypeScript"},{"location":"questions/javascript/typing-comparison/#_15","text":"// 1. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u043b\u044e\u0431\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 let userData: any = fetchUserData(); // 2. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b let userId: number = 123; let userName: string = \"John\"; // 3. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b interface User { id: number; name: string; email: string; } // 4. \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(id: number): Promise<User> { return fetch(`/api/users/${id}`).then(r => r.json()); } // 5. \u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e","title":"\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/javascript/typing-comparison/#senior-","text":"\u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 TypeScript \u0432 \u043d\u043e\u0432\u044b\u0445 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 strict \u0440\u0435\u0436\u0438\u043c \u0434\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f API \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 any - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 unknown \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 utility types \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 ESLint \u0441 TypeScript \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/javascript/typing-comparison/#_16","text":"TypeScript \u0432 React \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442: - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 Java - \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JavaScript - \u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 IDE \u0441 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c - \u041b\u0443\u0447\u0448\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043a\u043e\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b - \u041c\u0435\u043d\u044c\u0448\u0435 runtime \u043e\u0448\u0438\u0431\u043e\u043a \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f compile-time \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"questions/javascript/typing-comparison/#_17","text":"Let, Const, Var: Scope \u0438 Hoisting Currying \u0432 JavaScript \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f Higher-Order Components (HOC)","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/javascript/typing-comparison_small/","text":"JS vs Java Typing + TypeScript - Senior Cheat Sheet (small) \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c \u0442\u0438\u043f\u043e\u0432 JavaScript Java TypeScript \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Runtime Compile-time Compile-time Type Safety \u0421\u043b\u0430\u0431\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0421\u0440\u0435\u0434\u043d\u0438\u0439 JavaScript - \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b // Type coercion \u043b\u043e\u0432\u0443\u0448\u043a\u0438 \"5\" + 3; // \"53\" \"5\" - 3; // 2 true + 1; // 2 null == undefined; // true // Runtime \u043e\u0448\u0438\u0431\u043a\u0438 user.name.toUpperCase(); // TypeError \u0435\u0441\u043b\u0438 name = null // \u041d\u0435\u0442 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function process(data) { return data. // IDE \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0447\u0442\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e } TypeScript \u0434\u043b\u044f React - \u043e\u0441\u043d\u043e\u0432\u044b \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b interface ButtonProps { children: React.ReactNode; variant?: 'primary' | 'secondary'; onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void; } const Button: React.FC<ButtonProps> = ({ children, variant = 'primary', onClick }) => ( <button className={`btn-${variant}`} onClick={onClick}> {children} </button> ); \u0425\u0443\u043a\u0438 // useState \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 const [user, setUser] = useState<User | null>(null); const [errors, setErrors] = useState<string[]>([]); // useReducer type Action = | { type: 'increment' } | { type: 'setError'; payload: string }; // Custom hook function useApi<T>(url: string) { const [data, setData] = useState<T | null>(null); const [loading, setLoading] = useState(false); // ... implementation return { data, loading, refetch }; } \u0421\u043e\u0431\u044b\u0442\u0438\u044f const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => { e.preventDefault(); }; const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => { setValue(e.target.value); }; const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => { console.log('clicked'); }; \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b Utility Types interface User { id: number; name: string; email: string; password: string; } type PublicUser = Omit<User, 'password'>; type UserUpdate = Partial<Pick<User, 'name' | 'email'>>; type UserKeys = keyof User; Generics interface ApiResponse<T> { data: T; status: number; } function fetchData<T>(url: string): Promise<ApiResponse<T>> { return fetch(url).then(r => r.json()); } // Generic component interface ListProps<T> { items: T[]; renderItem: (item: T) => React.ReactNode; keyExtractor: (item: T) => string | number; } function List<T>({ items, renderItem, keyExtractor }: ListProps<T>) { return ( <ul> {items.map((item, index) => ( <li key={keyExtractor(item)}> {renderItem(item)} </li> ))} </ul> ); } Context \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f interface AuthContextType { user: User | null; login: (email: string, password: string) => Promise<void>; logout: () => void; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const useAuth = (): AuthContextType => { const context = useContext(AuthContext); if (!context) { throw new Error('useAuth must be used within AuthProvider'); } return context; }; TypeScript \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0421\u0442\u0440\u043e\u0433\u0438\u0439 \u0440\u0435\u0436\u0438\u043c // tsconfig.json { \"compilerOptions\": { \"strict\": true, \"noImplicitAny\": true, \"strictNullChecks\": true, \"noImplicitReturns\": true, \"noUncheckedIndexedAccess\": true } } \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f // 1. \u041d\u0430\u0447\u043d\u0438 \u0441 .ts \u0444\u0430\u0439\u043b\u043e\u0432 (\u0431\u0435\u0437 \u0442\u0438\u043f\u043e\u0432) // 2. \u0414\u043e\u0431\u0430\u0432\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b let id: number; let name: string; // 3. \u0421\u043e\u0437\u0434\u0430\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 interface User { id: number; name: string; } // 4. \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(id: number): Promise<User> { return fetch(`/users/${id}`).then(r => r.json()); } // 5. \u0412\u043a\u043b\u044e\u0447\u0438 strict \u0440\u0435\u0436\u0438\u043c Senior Patterns Conditional Types type NonNullable<T> = T extends null | undefined ? never : T; type ApiResult<T> = T extends string ? { message: T } : { data: T }; Template Literals type EventName<T extends string> = `on${Capitalize<T>}`; type ClickHandler = EventName<'click'>; // 'onClick' Mapped Types type Optional<T> = { [K in keyof T]?: T[K]; }; type ReadOnly<T> = { readonly [K in keyof T]: T[K]; }; Anti-patterns // \u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439 any const data: any = response; // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 unknown \u0438\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0442\u0438\u043f const data: unknown = response; const user = data as User; // \u0421 type assertion // \u274c \u041d\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0439 \u043e\u0448\u0438\u0431\u043a\u0438 // @ts-ignore const value = obj.undefinedProp; // \u2705 \u0418\u0441\u043f\u0440\u0430\u0432\u044c \u0442\u0438\u043f\u044b \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 optional chaining const value = obj.undefinedProp; // \u274c \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0431\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 type ComplexType<T, U, V> = ... // \u2705 \u0421 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 /** * Utility type that extracts only the methods from T */ type Methods<T> = ... Senior Rules Strict mode always - \u0432\u043a\u043b\u044e\u0447\u0430\u0439 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 No any - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 unknown \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 Interface > Type \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, type \u0434\u043b\u044f unions Generic constraints - \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0439 generic \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b Utility types \u0432\u043c\u0435\u0441\u0442\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 Event types - \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 React \u0441\u043e\u0431\u044b\u0442\u0438\u044f API types - \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u0438\u0437 OpenAPI \u0441\u0445\u0435\u043c Incremental adoption - \u043c\u0438\u0433\u0440\u0438\u0440\u0443\u0439 \u0444\u0430\u0439\u043b \u0437\u0430 \u0444\u0430\u0439\u043b\u043e\u043c React + TypeScript Benefits Compile-time errors \u0432\u043c\u0435\u0441\u0442\u043e runtime IntelliSense \u0438 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 Safe refactoring \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e Self-documenting code \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b Better team collaboration \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u043c\u0438 Fewer bugs \u0432 production \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : TypeScript = JavaScript + \u0442\u0438\u043f\u044b. \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u043d\u0435\u0433\u043e \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445!","title":"JS vs Java Typing + TypeScript - Senior Cheat Sheet (small)"},{"location":"questions/javascript/typing-comparison_small/#js-vs-java-typing-typescript-senior-cheat-sheet-small","text":"","title":"JS vs Java Typing + TypeScript - Senior Cheat Sheet (small)"},{"location":"questions/javascript/typing-comparison_small/#_1","text":"JavaScript Java TypeScript \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Runtime Compile-time Compile-time Type Safety \u0421\u043b\u0430\u0431\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0421\u0440\u0435\u0434\u043d\u0438\u0439","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c \u0442\u0438\u043f\u043e\u0432"},{"location":"questions/javascript/typing-comparison_small/#javascript-","text":"// Type coercion \u043b\u043e\u0432\u0443\u0448\u043a\u0438 \"5\" + 3; // \"53\" \"5\" - 3; // 2 true + 1; // 2 null == undefined; // true // Runtime \u043e\u0448\u0438\u0431\u043a\u0438 user.name.toUpperCase(); // TypeError \u0435\u0441\u043b\u0438 name = null // \u041d\u0435\u0442 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function process(data) { return data. // IDE \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0447\u0442\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e }","title":"JavaScript - \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b"},{"location":"questions/javascript/typing-comparison_small/#typescript-react-","text":"","title":"TypeScript \u0434\u043b\u044f React - \u043e\u0441\u043d\u043e\u0432\u044b"},{"location":"questions/javascript/typing-comparison_small/#_2","text":"interface ButtonProps { children: React.ReactNode; variant?: 'primary' | 'secondary'; onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void; } const Button: React.FC<ButtonProps> = ({ children, variant = 'primary', onClick }) => ( <button className={`btn-${variant}`} onClick={onClick}> {children} </button> );","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"questions/javascript/typing-comparison_small/#_3","text":"// useState \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 const [user, setUser] = useState<User | null>(null); const [errors, setErrors] = useState<string[]>([]); // useReducer type Action = | { type: 'increment' } | { type: 'setError'; payload: string }; // Custom hook function useApi<T>(url: string) { const [data, setData] = useState<T | null>(null); const [loading, setLoading] = useState(false); // ... implementation return { data, loading, refetch }; }","title":"\u0425\u0443\u043a\u0438"},{"location":"questions/javascript/typing-comparison_small/#_4","text":"const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => { e.preventDefault(); }; const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => { setValue(e.target.value); }; const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => { console.log('clicked'); };","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f"},{"location":"questions/javascript/typing-comparison_small/#_5","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b"},{"location":"questions/javascript/typing-comparison_small/#utility-types","text":"interface User { id: number; name: string; email: string; password: string; } type PublicUser = Omit<User, 'password'>; type UserUpdate = Partial<Pick<User, 'name' | 'email'>>; type UserKeys = keyof User;","title":"Utility Types"},{"location":"questions/javascript/typing-comparison_small/#generics","text":"interface ApiResponse<T> { data: T; status: number; } function fetchData<T>(url: string): Promise<ApiResponse<T>> { return fetch(url).then(r => r.json()); } // Generic component interface ListProps<T> { items: T[]; renderItem: (item: T) => React.ReactNode; keyExtractor: (item: T) => string | number; } function List<T>({ items, renderItem, keyExtractor }: ListProps<T>) { return ( <ul> {items.map((item, index) => ( <li key={keyExtractor(item)}> {renderItem(item)} </li> ))} </ul> ); }","title":"Generics"},{"location":"questions/javascript/typing-comparison_small/#context","text":"interface AuthContextType { user: User | null; login: (email: string, password: string) => Promise<void>; logout: () => void; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const useAuth = (): AuthContextType => { const context = useContext(AuthContext); if (!context) { throw new Error('useAuth must be used within AuthProvider'); } return context; };","title":"Context \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/typing-comparison_small/#typescript","text":"","title":"TypeScript \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/javascript/typing-comparison_small/#_6","text":"// tsconfig.json { \"compilerOptions\": { \"strict\": true, \"noImplicitAny\": true, \"strictNullChecks\": true, \"noImplicitReturns\": true, \"noUncheckedIndexedAccess\": true } }","title":"\u0421\u0442\u0440\u043e\u0433\u0438\u0439 \u0440\u0435\u0436\u0438\u043c"},{"location":"questions/javascript/typing-comparison_small/#_7","text":"// 1. \u041d\u0430\u0447\u043d\u0438 \u0441 .ts \u0444\u0430\u0439\u043b\u043e\u0432 (\u0431\u0435\u0437 \u0442\u0438\u043f\u043e\u0432) // 2. \u0414\u043e\u0431\u0430\u0432\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b let id: number; let name: string; // 3. \u0421\u043e\u0437\u0434\u0430\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 interface User { id: number; name: string; } // 4. \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(id: number): Promise<User> { return fetch(`/users/${id}`).then(r => r.json()); } // 5. \u0412\u043a\u043b\u044e\u0447\u0438 strict \u0440\u0435\u0436\u0438\u043c","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f"},{"location":"questions/javascript/typing-comparison_small/#senior-patterns","text":"","title":"Senior Patterns"},{"location":"questions/javascript/typing-comparison_small/#conditional-types","text":"type NonNullable<T> = T extends null | undefined ? never : T; type ApiResult<T> = T extends string ? { message: T } : { data: T };","title":"Conditional Types"},{"location":"questions/javascript/typing-comparison_small/#template-literals","text":"type EventName<T extends string> = `on${Capitalize<T>}`; type ClickHandler = EventName<'click'>; // 'onClick'","title":"Template Literals"},{"location":"questions/javascript/typing-comparison_small/#mapped-types","text":"type Optional<T> = { [K in keyof T]?: T[K]; }; type ReadOnly<T> = { readonly [K in keyof T]: T[K]; };","title":"Mapped Types"},{"location":"questions/javascript/typing-comparison_small/#anti-patterns","text":"// \u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439 any const data: any = response; // \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 unknown \u0438\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0442\u0438\u043f const data: unknown = response; const user = data as User; // \u0421 type assertion // \u274c \u041d\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0439 \u043e\u0448\u0438\u0431\u043a\u0438 // @ts-ignore const value = obj.undefinedProp; // \u2705 \u0418\u0441\u043f\u0440\u0430\u0432\u044c \u0442\u0438\u043f\u044b \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 optional chaining const value = obj.undefinedProp; // \u274c \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0431\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 type ComplexType<T, U, V> = ... // \u2705 \u0421 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 /** * Utility type that extracts only the methods from T */ type Methods<T> = ...","title":"Anti-patterns"},{"location":"questions/javascript/typing-comparison_small/#senior-rules","text":"Strict mode always - \u0432\u043a\u043b\u044e\u0447\u0430\u0439 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 No any - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 unknown \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 Interface > Type \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, type \u0434\u043b\u044f unions Generic constraints - \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0439 generic \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b Utility types \u0432\u043c\u0435\u0441\u0442\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 Event types - \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u0443\u0439 React \u0441\u043e\u0431\u044b\u0442\u0438\u044f API types - \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u0438\u0437 OpenAPI \u0441\u0445\u0435\u043c Incremental adoption - \u043c\u0438\u0433\u0440\u0438\u0440\u0443\u0439 \u0444\u0430\u0439\u043b \u0437\u0430 \u0444\u0430\u0439\u043b\u043e\u043c","title":"Senior Rules"},{"location":"questions/javascript/typing-comparison_small/#react-typescript-benefits","text":"Compile-time errors \u0432\u043c\u0435\u0441\u0442\u043e runtime IntelliSense \u0438 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 Safe refactoring \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e Self-documenting code \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u044b Better team collaboration \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u043c\u0438 Fewer bugs \u0432 production \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : TypeScript = JavaScript + \u0442\u0438\u043f\u044b. \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u043d\u0435\u0433\u043e \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445!","title":"React + TypeScript Benefits"},{"location":"questions/performance/optimization/","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u0438\u043a \u0438 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Core Web Vitals, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 runtime \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 Core Web Vitals 1. Largest Contentful Paint (LCP) \u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u0440\u0443\u043f\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 LCP const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.entryType === 'largest-contentful-paint') { console.log('LCP:', entry.startTime); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 gtag('event', 'web_vitals', { name: 'LCP', value: Math.round(entry.startTime), event_category: 'Web Vitals' }); } } }); observer.observe({ type: 'largest-contentful-paint', buffered: true }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f LCP // 1. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function OptimizedImage({ src, alt, width, height, priority = false }) { return ( <img src={src} alt={alt} width={width} height={height} loading={priority ? 'eager' : 'lazy'} decoding=\"async\" style={{ width: '100%', height: 'auto', aspectRatio: `${width} / ${height}` }} /> ); } // 2. Preload \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 function CriticalResourcePreloader() { useEffect(() => { // Preload hero image const link = document.createElement('link'); link.rel = 'preload'; link.as = 'image'; link.href = '/hero-image.webp'; document.head.appendChild(link); return () => { document.head.removeChild(link); }; }, []); return null; } // 3. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 CSS inline const criticalCSS = ` .hero { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); height: 100vh; display: flex; align-items: center; justify-content: center; } `; function CriticalCSS() { return <style dangerouslySetInnerHTML={{ __html: criticalCSS }} />; } 2. First Input Delay (FID) / Interaction to Next Paint (INP) \u0412\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u0438\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 FID const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.entryType === 'first-input') { const fid = entry.processingStart - entry.startTime; console.log('FID:', fid); gtag('event', 'web_vitals', { name: 'FID', value: Math.round(fid), event_category: 'Web Vitals' }); } } }); observer.observe({ type: 'first-input', buffered: true }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f FID/INP // 1. Debouncing \u0438 throttling function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; } function SearchInput() { const [query, setQuery] = useState(''); const debouncedQuery = useDebounce(query, 300); useEffect(() => { if (debouncedQuery) { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0438\u0441\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 performSearch(debouncedQuery); } }, [debouncedQuery]); return ( <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Search...\" /> ); } // 2. Web Workers \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 // worker.js self.onmessage = function(e) { const { data, operation } = e.data; switch (operation) { case 'processLargeDataset': const result = processData(data); self.postMessage({ result }); break; case 'generateReport': const report = generateComplexReport(data); self.postMessage({ report }); break; } }; function processData(data) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f return data.map(item => ({ ...item, processed: true, score: calculateComplexScore(item) })); } // React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 Web Worker function DataProcessor() { const [result, setResult] = useState(null); const [loading, setLoading] = useState(false); const workerRef = useRef(); useEffect(() => { workerRef.current = new Worker('/worker.js'); workerRef.current.onmessage = (e) => { setResult(e.data.result); setLoading(false); }; return () => { workerRef.current?.terminate(); }; }, []); const processData = (data) => { setLoading(true); workerRef.current.postMessage({ data, operation: 'processLargeDataset' }); }; return ( <div> {loading ? <div>Processing...</div> : <DataView data={result} />} </div> ); } 3. Cumulative Layout Shift (CLS) \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 CLS let clsValue = 0; const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (!entry.hadRecentInput) { clsValue += entry.value; } } }); observer.observe({ type: 'layout-shift', buffered: true }); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c CLS \u043f\u0440\u0438 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b window.addEventListener('beforeunload', () => { gtag('event', 'web_vitals', { name: 'CLS', value: Math.round(clsValue * 1000), event_category: 'Web Vitals' }); }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f CLS // 1. \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function StableImage({ src, alt, width, height }) { const [loaded, setLoaded] = useState(false); return ( <div style={{ width: '100%', maxWidth: width, aspectRatio: `${width} / ${height}`, backgroundColor: '#f0f0f0', position: 'relative' }} > <img src={src} alt={alt} onLoad={() => setLoaded(true)} style={{ width: '100%', height: '100%', objectFit: 'cover', opacity: loaded ? 1 : 0, transition: 'opacity 0.3s' }} /> {!loaded && ( <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: '#999' }} > Loading... </div> )} </div> ); } // 2. \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 function DynamicContent() { const [content, setContent] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { fetchContent().then(data => { setContent(data); setLoading(false); }); }, []); return ( <div style={{ minHeight: '200px', // \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u0443\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0441\u043e\u0442\u0443 display: 'flex', alignItems: loading ? 'center' : 'flex-start', justifyContent: loading ? 'center' : 'flex-start' }} > {loading ? ( <div>Loading content...</div> ) : ( <div>{content}</div> )} </div> ); } // 3. Skeleton screens function UserCardSkeleton() { return ( <div className=\"user-card-skeleton\"> <div className=\"skeleton-avatar\" /> <div className=\"skeleton-content\"> <div className=\"skeleton-line skeleton-title\" /> <div className=\"skeleton-line skeleton-subtitle\" /> </div> <style jsx>{` .user-card-skeleton { display: flex; align-items: center; padding: 16px; border: 1px solid #e0e0e0; border-radius: 8px; } .skeleton-avatar { width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: loading 1.5s infinite; } .skeleton-content { margin-left: 12px; flex: 1; } .skeleton-line { height: 16px; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: loading 1.5s infinite; border-radius: 4px; } .skeleton-title { width: 60%; margin-bottom: 8px; } .skeleton-subtitle { width: 40%; } @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } } `}</style> </div> ); } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 1. React.memo \u0438 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const UserCard = React.memo(({ user, onEdit, onDelete }) => { return ( <div className=\"user-card\"> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onEdit(user.id)}>Edit</button> <button onClick={() => onDelete(user.id)}>Delete</button> </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f return ( prevProps.user.id === nextProps.user.id && prevProps.user.name === nextProps.user.name && prevProps.user.email === nextProps.user.email ); }); // useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 function ExpensiveComponent({ items, filters }) { const filteredItems = useMemo(() => { return items.filter(item => { return filters.every(filter => { switch (filter.type) { case 'category': return item.category === filter.value; case 'price': return item.price >= filter.min && item.price <= filter.max; case 'rating': return item.rating >= filter.value; default: return true; } }); }).sort((a, b) => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 return a.relevance - b.relevance; }); }, [items, filters]); const statistics = useMemo(() => { return { totalItems: filteredItems.length, averagePrice: filteredItems.reduce((sum, item) => sum + item.price, 0) / filteredItems.length, topCategory: getTopCategory(filteredItems) }; }, [filteredItems]); return ( <div> <div>Found {statistics.totalItems} items</div> <div>Average price: ${statistics.averagePrice.toFixed(2)}</div> <ItemList items={filteredItems} /> </div> ); } // useCallback \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 function UserList({ users }) { const [selectedUsers, setSelectedUsers] = useState([]); const handleUserSelect = useCallback((userId, selected) => { setSelectedUsers(prev => { if (selected) { return [...prev, userId]; } else { return prev.filter(id => id !== userId); } }); }, []); const handleBulkAction = useCallback((action) => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 console.log(`Performing ${action} on users:`, selectedUsers); }, [selectedUsers]); return ( <div> {users.map(user => ( <UserRow key={user.id} user={user} onSelect={handleUserSelect} selected={selectedUsers.includes(user.id)} /> ))} <BulkActions onAction={handleBulkAction} /> </div> ); } 2. \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 // react-window \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; function VirtualizedUserList({ users }) { const Row = ({ index, style }) => { const user = users[index]; return ( <div style={style}> <UserCard user={user} /> </div> ); }; return ( <List height={600} itemCount={users.length} itemSize={80} width=\"100%\" > {Row} </List> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 Intersection Observer function useVirtualization(items, itemHeight = 80, containerHeight = 600) { const [visibleRange, setVisibleRange] = useState({ start: 0, end: 10 }); const scrollElementRef = useRef(); useEffect(() => { const element = scrollElementRef.current; if (!element) return; const handleScroll = () => { const scrollTop = element.scrollTop; const start = Math.floor(scrollTop / itemHeight); const visibleCount = Math.ceil(containerHeight / itemHeight); const end = Math.min(start + visibleCount + 5, items.length); // +5 \u0434\u043b\u044f \u0431\u0443\u0444\u0435\u0440\u0430 setVisibleRange({ start: Math.max(0, start - 5), end }); }; element.addEventListener('scroll', handleScroll); handleScroll(); // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0435\u0442 return () => element.removeEventListener('scroll', handleScroll); }, [items.length, itemHeight, containerHeight]); const visibleItems = items.slice(visibleRange.start, visibleRange.end); return { scrollElementRef, visibleItems, totalHeight: items.length * itemHeight, offsetY: visibleRange.start * itemHeight }; } function CustomVirtualizedList({ items }) { const { scrollElementRef, visibleItems, totalHeight, offsetY } = useVirtualization(items); return ( <div ref={scrollElementRef} style={{ height: '600px', overflow: 'auto' }} > <div style={{ height: totalHeight, position: 'relative' }}> <div style={{ transform: `translateY(${offsetY}px)` }} > {visibleItems.map((item, index) => ( <div key={item.id} style={{ height: '80px' }}> <ItemComponent item={item} /> </div> ))} </div> </div> </div> ); } 3. Code Splitting \u0438 Lazy Loading // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b const LazyDashboard = React.lazy(() => import('./Dashboard')); const LazyUserProfile = React.lazy(() => import('./UserProfile')); const LazySettings = React.lazy(() => import('./Settings')); function App() { return ( <Router> <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\"/dashboard\" element={<LazyDashboard />} /> <Route path=\"/profile\" element={<LazyUserProfile />} /> <Route path=\"/settings\" element={<LazySettings />} /> </Routes> </Suspense> </Router> ); } // Preloading \u043d\u0430 hover function NavigationLink({ to, children }) { const handleMouseEnter = () => { // \u041f\u0440\u0435\u0434\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438 hover switch (to) { case '/dashboard': import('./Dashboard'); break; case '/profile': import('./UserProfile'); break; case '/settings': import('./Settings'); break; } }; return ( <Link to={to} onMouseEnter={handleMouseEnter} > {children} </Link> ); } // \u0423\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a function ChartComponent({ data }) { const [ChartLibrary, setChartLibrary] = useState(null); useEffect(() => { // \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u044f\u0436\u0435\u043b\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e if (data && data.length > 0) { import('recharts').then(lib => { setChartLibrary(lib); }); } }, [data]); if (!data || data.length === 0) { return <div>No data to display</div>; } if (!ChartLibrary) { return <div>Loading chart...</div>; } const { LineChart, Line, XAxis, YAxis } = ChartLibrary; return ( <LineChart width={400} height={200} data={data}> <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" /> <XAxis dataKey=\"name\" /> <YAxis /> </LineChart> ); } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 1. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 // \u0410\u0434\u0430\u043f\u0442\u0438\u0432\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f function ResponsiveImage({ src, alt, sizes }) { const generateSrcSet = (baseSrc) => { const formats = ['webp', 'avif']; const sizes = [320, 640, 1024, 1920]; return formats.map(format => sizes.map(size => `${baseSrc}?w=${size}&f=${format} ${size}w` ).join(', ') ); }; return ( <picture> <source srcSet={generateSrcSet(src)[1]} // AVIF type=\"image/avif\" sizes={sizes} /> <source srcSet={generateSrcSet(src)[0]} // WebP type=\"image/webp\" sizes={sizes} /> <img src={`${src}?w=640`} // Fallback alt={alt} loading=\"lazy\" decoding=\"async\" /> </picture> ); } // \u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0432\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function ProgressiveImage({ lowQualitySrc, highQualitySrc, alt }) { const [loaded, setLoaded] = useState(false); const [error, setError] = useState(false); useEffect(() => { const img = new Image(); img.onload = () => setLoaded(true); img.onerror = () => setError(true); img.src = highQualitySrc; }, [highQualitySrc]); return ( <div className=\"progressive-image\"> <img src={lowQualitySrc} alt={alt} className={`low-quality ${loaded ? 'fade-out' : ''}`} /> {loaded && ( <img src={highQualitySrc} alt={alt} className=\"high-quality fade-in\" /> )} {error && ( <div className=\"error-placeholder\"> Failed to load image </div> )} <style jsx>{` .progressive-image { position: relative; overflow: hidden; } .low-quality { filter: blur(5px); transition: opacity 0.3s; } .low-quality.fade-out { opacity: 0; } .high-quality { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; } .fade-in { animation: fadeIn 0.3s ease-in; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } `}</style> </div> ); } 2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0440\u0438\u0444\u0442\u043e\u0432 // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0448\u0440\u0438\u0444\u0442\u043e\u0432 function FontOptimizer() { useEffect(() => { // Preload \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0448\u0440\u0438\u0444\u0442\u043e\u0432 const criticalFonts = [ '/fonts/inter-400.woff2', '/fonts/inter-600.woff2' ]; criticalFonts.forEach(font => { const link = document.createElement('link'); link.rel = 'preload'; link.as = 'font'; link.type = 'font/woff2'; link.crossOrigin = 'anonymous'; link.href = font; document.head.appendChild(link); }); // Font loading API if ('fonts' in document) { Promise.all([ document.fonts.load('400 16px Inter'), document.fonts.load('600 16px Inter') ]).then(() => { document.body.classList.add('fonts-loaded'); }); } }, []); return null; } // CSS \u0434\u043b\u044f font-display const fontCSS = ` @font-face { font-family: 'Inter'; src: url('/fonts/inter-400.woff2') format('woff2'); font-weight: 400; font-style: normal; font-display: swap; /* \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c fallback \u0448\u0440\u0438\u0444\u0442 \u0441\u0440\u0430\u0437\u0443 */ } @font-face { font-family: 'Inter'; src: url('/fonts/inter-600.woff2') format('woff2'); font-weight: 600; font-style: normal; font-display: swap; } body { font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; } /* \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u043c layout shift */ .fonts-loaded .heading { font-weight: 600; } `; 3. Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f // sw.js - Service Worker \u0441 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u043c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c const CACHE_NAME = 'app-v1'; const PRECACHE_URLS = [ '/', '/static/js/bundle.js', '/static/css/main.css' ]; // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const strategies = { // \u041a\u0435\u0448 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 cacheFirst: async (request) => { const cache = await caches.open(CACHE_NAME); const cached = await cache.match(request); if (cached) { return cached; } const response = await fetch(request); cache.put(request, response.clone()); return response; }, // \u0421\u0435\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f API networkFirst: async (request) => { const cache = await caches.open(CACHE_NAME); try { const response = await fetch(request); cache.put(request, response.clone()); return response; } catch (error) { const cached = await cache.match(request); if (cached) { return cached; } throw error; } }, // Stale-while-revalidate \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 staleWhileRevalidate: async (request) => { const cache = await caches.open(CACHE_NAME); const cached = await cache.match(request); const fetchPromise = fetch(request).then(response => { cache.put(request, response.clone()); return response; }); return cached || fetchPromise; } }; self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); // \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f if (url.pathname.startsWith('/api/')) { event.respondWith(strategies.networkFirst(request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(strategies.cacheFirst(request)); } else { event.respondWith(strategies.staleWhileRevalidate(request)); } }); Bundle Optimization 1. Tree Shaking \u0438 Dead Code Elimination // webpack.config.js module.exports = { mode: 'production', optimization: { usedExports: true, sideEffects: false, // \u0418\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u043c\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430\u043c\u0438 }, module: { rules: [ { test: /\\.js$/, use: { loader: 'babel-loader', options: { presets: [ ['@babel/preset-env', { modules: false, // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c ES modules \u0434\u043b\u044f tree shaking useBuiltIns: 'usage', corejs: 3 }] ] } } } ] } }; // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0438\u043c\u043f\u043e\u0440\u0442 \u0434\u043b\u044f tree shaking // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0432\u0441\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 import _ from 'lodash'; import * as dateFns from 'date-fns'; // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 import { debounce, throttle } from 'lodash'; import { format, addDays } from 'date-fns'; // \u0418\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e babel-plugin-import // \u274c \u0422\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 import { Button } from 'antd/lib/button'; // \u2705 \u041f\u043b\u0430\u0433\u0438\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u044d\u0442\u043e import { Button } from 'antd'; 2. Code Splitting \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 // 1. Route-based splitting const routes = [ { path: '/dashboard', component: () => import('./pages/Dashboard') }, { path: '/users', component: () => import('./pages/Users') } ]; // 2. Feature-based splitting const FeatureToggle = ({ feature, children, fallback }) => { const [Component, setComponent] = useState(null); useEffect(() => { if (feature === 'advanced-analytics') { import('./features/AdvancedAnalytics').then(module => { setComponent(() => module.default); }); } else if (feature === 'admin-panel') { import('./features/AdminPanel').then(module => { setComponent(() => module.default); }); } }, [feature]); if (!Component) { return fallback || <div>Loading feature...</div>; } return <Component>{children}</Component>; }; // 3. Library splitting // webpack.config.js module.exports = { optimization: { splitChunks: { chunks: 'all', cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, name: 'vendors', chunks: 'all' }, common: { name: 'common', minChunks: 2, chunks: 'all', enforce: true } } } } }; Monitoring \u0438 Measurement 1. Performance API class PerformanceMonitor { constructor() { this.metrics = new Map(); this.setupObservers(); } setupObservers() { // Navigation timing window.addEventListener('load', () => { const navigation = performance.getEntriesByType('navigation')[0]; this.recordMetric('page_load_time', navigation.loadEventEnd - navigation.loadEventStart); this.recordMetric('dom_content_loaded', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart); }); // Resource timing const resourceObserver = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.duration > 1000) { // \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b this.recordMetric('slow_resource', { name: entry.name, duration: entry.duration, size: entry.transferSize }); } } }); resourceObserver.observe({ entryTypes: ['resource'] }); // Long tasks const longTaskObserver = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric('long_task', { duration: entry.duration, startTime: entry.startTime }); } }); longTaskObserver.observe({ entryTypes: ['longtask'] }); } recordMetric(name, value) { this.metrics.set(name, value); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 if (typeof gtag !== 'undefined') { gtag('event', 'performance_metric', { metric_name: name, metric_value: typeof value === 'object' ? JSON.stringify(value) : value }); } } getMetrics() { return Object.fromEntries(this.metrics); } } // React hook \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 function usePerformanceMonitor() { const [metrics, setMetrics] = useState({}); const monitorRef = useRef(); useEffect(() => { monitorRef.current = new PerformanceMonitor(); const interval = setInterval(() => { setMetrics(monitorRef.current.getMetrics()); }, 5000); return () => clearInterval(interval); }, []); return metrics; } 2. React DevTools Profiler // \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441 Profiler API function ProfiledComponent({ children, id }) { const onRenderCallback = (id, phase, actualDuration, baseDuration, startTime, commitTime) => { // \u041b\u043e\u0433\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b if (actualDuration > 16) { // 16ms = 60fps console.warn(`Slow render detected in ${id}:`, { phase, actualDuration, baseDuration, startTime, commitTime }); } // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 gtag('event', 'react_render', { component_id: id, phase, duration: Math.round(actualDuration), event_category: 'Performance' }); }; return ( <Profiler id={id} onRender={onRenderCallback}> {children} </Profiler> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 hook \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function useExecutionTime(label) { const start = useRef(); useEffect(() => { start.current = performance.now(); return () => { const duration = performance.now() - start.current; console.log(`${label} took ${duration.toFixed(2)}ms`); }; }); } function ExpensiveComponent() { useExecutionTime('ExpensiveComponent render'); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 return <div>Complex content</div>; } Memory Management 1. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0443\u0442\u0435\u0447\u0435\u043a \u043f\u0430\u043c\u044f\u0442\u0438 // Event listeners cleanup function WindowResizeHandler() { useEffect(() => { const handleResize = () => { console.log('Window resized'); }; window.addEventListener('resize', handleResize); // \u2705 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0447\u0438\u0449\u0430\u0435\u043c event listener return () => { window.removeEventListener('resize', handleResize); }; }, []); return null; } // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 timers function TimerComponent() { useEffect(() => { const interval = setInterval(() => { console.log('Timer tick'); }, 1000); const timeout = setTimeout(() => { console.log('Delayed action'); }, 5000); // \u2705 \u041e\u0447\u0438\u0449\u0430\u0435\u043c timers return () => { clearInterval(interval); clearTimeout(timeout); }; }, []); return <div>Timer component</div>; } // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 subscriptions function SubscriptionComponent() { useEffect(() => { const subscription = eventEmitter.subscribe('data', handleData); // \u2705 \u041e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0438 unmount return () => { subscription.unsubscribe(); }; }, []); return <div>Subscription component</div>; } // Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a class ComponentRegistry { constructor() { this.components = new WeakMap(); } register(component, metadata) { this.components.set(component, metadata); } getMetadata(component) { return this.components.get(component); } } 2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 // Immutable updates \u0441 immer import produce from 'immer'; function useOptimizedState(initialState) { const [state, setState] = useState(initialState); const updateState = useCallback((updater) => { setState(produce(updater)); }, []); return [state, updateState]; } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f function LargeDataComponent() { const [data, updateData] = useOptimizedState({ users: [], posts: [], comments: [] }); const addUser = useCallback((user) => { updateData(draft => { draft.users.push(user); }); }, [updateData]); return <div>Large data component</div>; } // Object pooling \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class ObjectPool { constructor(createFn, resetFn, maxSize = 100) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; this.maxSize = maxSize; } acquire() { if (this.pool.length > 0) { return this.pool.pop(); } return this.createFn(); } release(obj) { if (this.pool.length < this.maxSize) { this.resetFn(obj); this.pool.push(obj); } } } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f object pool const rectanglePool = new ObjectPool( () => ({ x: 0, y: 0, width: 0, height: 0 }), (rect) => { rect.x = 0; rect.y = 0; rect.width = 0; rect.height = 0; } ); Network Optimization 1. HTTP/2 \u0438 HTTP/3 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 // Resource hints function ResourceHints() { useEffect(() => { // DNS prefetch \u0434\u043b\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u043e\u043c\u0435\u043d\u043e\u0432 const dnsPrefetchDomains = [ 'https://api.example.com', 'https://cdn.example.com' ]; dnsPrefetchDomains.forEach(domain => { const link = document.createElement('link'); link.rel = 'dns-prefetch'; link.href = domain; document.head.appendChild(link); }); // Preconnect \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 const preconnectUrls = [ 'https://fonts.googleapis.com', 'https://api.example.com' ]; preconnectUrls.forEach(url => { const link = document.createElement('link'); link.rel = 'preconnect'; link.href = url; link.crossOrigin = 'anonymous'; document.head.appendChild(link); }); }, []); return null; } // HTTP/2 Server Push simulation function CriticalResourceLoader() { useEffect(() => { // \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c server push \u0441 prefetch const criticalResources = [ '/api/user/current', '/api/notifications/unread' ]; criticalResources.forEach(url => { const link = document.createElement('link'); link.rel = 'prefetch'; link.href = url; document.head.appendChild(link); }); }, []); return null; } 2. Request optimization // Request batching class RequestBatcher { constructor(batchSize = 10, flushInterval = 100) { this.batchSize = batchSize; this.flushInterval = flushInterval; this.queue = []; this.timeoutId = null; } add(request) { return new Promise((resolve, reject) => { this.queue.push({ request, resolve, reject }); if (this.queue.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } }); } async flush() { if (this.queue.length === 0) return; const batch = this.queue.splice(0); if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } try { const requests = batch.map(item => item.request); const responses = await this.executeBatch(requests); batch.forEach((item, index) => { item.resolve(responses[index]); }); } catch (error) { batch.forEach(item => { item.reject(error); }); } } async executeBatch(requests) { const response = await fetch('/api/batch', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ requests }) }); return response.json(); } } // GraphQL-style request combining class RequestCombiner { constructor() { this.pendingRequests = new Map(); } async request(query, variables = {}) { const key = this.generateKey(query, variables); if (this.pendingRequests.has(key)) { return this.pendingRequests.get(key); } const promise = this.executeRequest(query, variables); this.pendingRequests.set(key, promise); // \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u043a\u0435\u0448 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f promise.finally(() => { this.pendingRequests.delete(key); }); return promise; } generateKey(query, variables) { return `${query}:${JSON.stringify(variables)}`; } async executeRequest(query, variables) { const response = await fetch('/graphql', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ query, variables }) }); return response.json(); } } Best Practices Summary Core Web Vitals : LCP < 2.5s (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b) FID < 100ms (debouncing, Web Workers) CLS < 0.1 (\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, skeleton screens) Rendering Optimization : React.memo \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useMemo/useCallback \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 Code Splitting : Route-based splitting Component-based splitting Library splitting Resource Optimization : \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (WebP, AVIF, lazy loading) Font optimization (preload, font-display: swap) Service Worker \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Bundle Optimization : Tree shaking Dead code elimination Proper imports Memory Management : Cleanup event listeners, timers, subscriptions Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0443\u0442\u0435\u0447\u0435\u043a Object pooling \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 Tools for Performance Monitoring Lighthouse - \u0410\u0443\u0434\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Chrome DevTools - Profiling \u0438 debugging React DevTools - React-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0444\u0430\u0439\u043b\u0438\u043d\u0433 Web Vitals - \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 Core Web Vitals Bundle Analyzer - \u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0431\u0430\u043d\u0434\u043b\u0430 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b React Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 Architecture - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Testing Performance - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 Core Web Vitals \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 (\u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f, \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f) - \u041e\u043f\u044b\u0442 \u0441 bundle optimization \u0438 code splitting - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 memory management \u0438 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0443\u0442\u0435\u0447\u0435\u043a - \u0417\u043d\u0430\u043d\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Core Web Vitals \u0438 \u043a\u0430\u043a \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c? - \u041a\u0430\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 tree shaking \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c? - \u041a\u0430\u043a \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0443\u0442\u0435\u0447\u043a\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 JavaScript? - \u041a\u0430\u043a\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438?","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/performance/optimization/#frontend-","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/performance/optimization/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u0438\u043a \u0438 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Core Web Vitals, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 runtime \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/performance/optimization/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/performance/optimization/#core-web-vitals","text":"","title":"Core Web Vitals"},{"location":"questions/performance/optimization/#1-largest-contentful-paint-lcp","text":"\u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u0440\u0443\u043f\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 LCP const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.entryType === 'largest-contentful-paint') { console.log('LCP:', entry.startTime); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 gtag('event', 'web_vitals', { name: 'LCP', value: Math.round(entry.startTime), event_category: 'Web Vitals' }); } } }); observer.observe({ type: 'largest-contentful-paint', buffered: true }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f LCP // 1. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function OptimizedImage({ src, alt, width, height, priority = false }) { return ( <img src={src} alt={alt} width={width} height={height} loading={priority ? 'eager' : 'lazy'} decoding=\"async\" style={{ width: '100%', height: 'auto', aspectRatio: `${width} / ${height}` }} /> ); } // 2. Preload \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 function CriticalResourcePreloader() { useEffect(() => { // Preload hero image const link = document.createElement('link'); link.rel = 'preload'; link.as = 'image'; link.href = '/hero-image.webp'; document.head.appendChild(link); return () => { document.head.removeChild(link); }; }, []); return null; } // 3. \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 CSS inline const criticalCSS = ` .hero { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); height: 100vh; display: flex; align-items: center; justify-content: center; } `; function CriticalCSS() { return <style dangerouslySetInnerHTML={{ __html: criticalCSS }} />; }","title":"1. Largest Contentful Paint (LCP)"},{"location":"questions/performance/optimization/#2-first-input-delay-fid-interaction-to-next-paint-inp","text":"\u0412\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u0438\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 FID const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.entryType === 'first-input') { const fid = entry.processingStart - entry.startTime; console.log('FID:', fid); gtag('event', 'web_vitals', { name: 'FID', value: Math.round(fid), event_category: 'Web Vitals' }); } } }); observer.observe({ type: 'first-input', buffered: true }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f FID/INP // 1. Debouncing \u0438 throttling function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; } function SearchInput() { const [query, setQuery] = useState(''); const debouncedQuery = useDebounce(query, 300); useEffect(() => { if (debouncedQuery) { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0438\u0441\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 performSearch(debouncedQuery); } }, [debouncedQuery]); return ( <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Search...\" /> ); } // 2. Web Workers \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 // worker.js self.onmessage = function(e) { const { data, operation } = e.data; switch (operation) { case 'processLargeDataset': const result = processData(data); self.postMessage({ result }); break; case 'generateReport': const report = generateComplexReport(data); self.postMessage({ report }); break; } }; function processData(data) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f return data.map(item => ({ ...item, processed: true, score: calculateComplexScore(item) })); } // React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 Web Worker function DataProcessor() { const [result, setResult] = useState(null); const [loading, setLoading] = useState(false); const workerRef = useRef(); useEffect(() => { workerRef.current = new Worker('/worker.js'); workerRef.current.onmessage = (e) => { setResult(e.data.result); setLoading(false); }; return () => { workerRef.current?.terminate(); }; }, []); const processData = (data) => { setLoading(true); workerRef.current.postMessage({ data, operation: 'processLargeDataset' }); }; return ( <div> {loading ? <div>Processing...</div> : <DataView data={result} />} </div> ); }","title":"2. First Input Delay (FID) / Interaction to Next Paint (INP)"},{"location":"questions/performance/optimization/#3-cumulative-layout-shift-cls","text":"\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 CLS let clsValue = 0; const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (!entry.hadRecentInput) { clsValue += entry.value; } } }); observer.observe({ type: 'layout-shift', buffered: true }); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c CLS \u043f\u0440\u0438 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b window.addEventListener('beforeunload', () => { gtag('event', 'web_vitals', { name: 'CLS', value: Math.round(clsValue * 1000), event_category: 'Web Vitals' }); }); // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f CLS // 1. \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function StableImage({ src, alt, width, height }) { const [loaded, setLoaded] = useState(false); return ( <div style={{ width: '100%', maxWidth: width, aspectRatio: `${width} / ${height}`, backgroundColor: '#f0f0f0', position: 'relative' }} > <img src={src} alt={alt} onLoad={() => setLoaded(true)} style={{ width: '100%', height: '100%', objectFit: 'cover', opacity: loaded ? 1 : 0, transition: 'opacity 0.3s' }} /> {!loaded && ( <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: '#999' }} > Loading... </div> )} </div> ); } // 2. \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 function DynamicContent() { const [content, setContent] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { fetchContent().then(data => { setContent(data); setLoading(false); }); }, []); return ( <div style={{ minHeight: '200px', // \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u0443\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0441\u043e\u0442\u0443 display: 'flex', alignItems: loading ? 'center' : 'flex-start', justifyContent: loading ? 'center' : 'flex-start' }} > {loading ? ( <div>Loading content...</div> ) : ( <div>{content}</div> )} </div> ); } // 3. Skeleton screens function UserCardSkeleton() { return ( <div className=\"user-card-skeleton\"> <div className=\"skeleton-avatar\" /> <div className=\"skeleton-content\"> <div className=\"skeleton-line skeleton-title\" /> <div className=\"skeleton-line skeleton-subtitle\" /> </div> <style jsx>{` .user-card-skeleton { display: flex; align-items: center; padding: 16px; border: 1px solid #e0e0e0; border-radius: 8px; } .skeleton-avatar { width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: loading 1.5s infinite; } .skeleton-content { margin-left: 12px; flex: 1; } .skeleton-line { height: 16px; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: loading 1.5s infinite; border-radius: 4px; } .skeleton-title { width: 60%; margin-bottom: 8px; } .skeleton-subtitle { width: 40%; } @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } } `}</style> </div> ); }","title":"3. Cumulative Layout Shift (CLS)"},{"location":"questions/performance/optimization/#_3","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430"},{"location":"questions/performance/optimization/#1-reactmemo","text":"// \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const UserCard = React.memo(({ user, onEdit, onDelete }) => { return ( <div className=\"user-card\"> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onEdit(user.id)}>Edit</button> <button onClick={() => onDelete(user.id)}>Delete</button> </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f return ( prevProps.user.id === nextProps.user.id && prevProps.user.name === nextProps.user.name && prevProps.user.email === nextProps.user.email ); }); // useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 function ExpensiveComponent({ items, filters }) { const filteredItems = useMemo(() => { return items.filter(item => { return filters.every(filter => { switch (filter.type) { case 'category': return item.category === filter.value; case 'price': return item.price >= filter.min && item.price <= filter.max; case 'rating': return item.rating >= filter.value; default: return true; } }); }).sort((a, b) => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 return a.relevance - b.relevance; }); }, [items, filters]); const statistics = useMemo(() => { return { totalItems: filteredItems.length, averagePrice: filteredItems.reduce((sum, item) => sum + item.price, 0) / filteredItems.length, topCategory: getTopCategory(filteredItems) }; }, [filteredItems]); return ( <div> <div>Found {statistics.totalItems} items</div> <div>Average price: ${statistics.averagePrice.toFixed(2)}</div> <ItemList items={filteredItems} /> </div> ); } // useCallback \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 function UserList({ users }) { const [selectedUsers, setSelectedUsers] = useState([]); const handleUserSelect = useCallback((userId, selected) => { setSelectedUsers(prev => { if (selected) { return [...prev, userId]; } else { return prev.filter(id => id !== userId); } }); }, []); const handleBulkAction = useCallback((action) => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 console.log(`Performing ${action} on users:`, selectedUsers); }, [selectedUsers]); return ( <div> {users.map(user => ( <UserRow key={user.id} user={user} onSelect={handleUserSelect} selected={selectedUsers.includes(user.id)} /> ))} <BulkActions onAction={handleBulkAction} /> </div> ); }","title":"1. React.memo \u0438 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/performance/optimization/#2","text":"// react-window \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; function VirtualizedUserList({ users }) { const Row = ({ index, style }) => { const user = users[index]; return ( <div style={style}> <UserCard user={user} /> </div> ); }; return ( <List height={600} itemCount={users.length} itemSize={80} width=\"100%\" > {Row} </List> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 Intersection Observer function useVirtualization(items, itemHeight = 80, containerHeight = 600) { const [visibleRange, setVisibleRange] = useState({ start: 0, end: 10 }); const scrollElementRef = useRef(); useEffect(() => { const element = scrollElementRef.current; if (!element) return; const handleScroll = () => { const scrollTop = element.scrollTop; const start = Math.floor(scrollTop / itemHeight); const visibleCount = Math.ceil(containerHeight / itemHeight); const end = Math.min(start + visibleCount + 5, items.length); // +5 \u0434\u043b\u044f \u0431\u0443\u0444\u0435\u0440\u0430 setVisibleRange({ start: Math.max(0, start - 5), end }); }; element.addEventListener('scroll', handleScroll); handleScroll(); // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0435\u0442 return () => element.removeEventListener('scroll', handleScroll); }, [items.length, itemHeight, containerHeight]); const visibleItems = items.slice(visibleRange.start, visibleRange.end); return { scrollElementRef, visibleItems, totalHeight: items.length * itemHeight, offsetY: visibleRange.start * itemHeight }; } function CustomVirtualizedList({ items }) { const { scrollElementRef, visibleItems, totalHeight, offsetY } = useVirtualization(items); return ( <div ref={scrollElementRef} style={{ height: '600px', overflow: 'auto' }} > <div style={{ height: totalHeight, position: 'relative' }}> <div style={{ transform: `translateY(${offsetY}px)` }} > {visibleItems.map((item, index) => ( <div key={item.id} style={{ height: '80px' }}> <ItemComponent item={item} /> </div> ))} </div> </div> </div> ); }","title":"2. \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/performance/optimization/#3-code-splitting-lazy-loading","text":"// \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b const LazyDashboard = React.lazy(() => import('./Dashboard')); const LazyUserProfile = React.lazy(() => import('./UserProfile')); const LazySettings = React.lazy(() => import('./Settings')); function App() { return ( <Router> <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\"/dashboard\" element={<LazyDashboard />} /> <Route path=\"/profile\" element={<LazyUserProfile />} /> <Route path=\"/settings\" element={<LazySettings />} /> </Routes> </Suspense> </Router> ); } // Preloading \u043d\u0430 hover function NavigationLink({ to, children }) { const handleMouseEnter = () => { // \u041f\u0440\u0435\u0434\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438 hover switch (to) { case '/dashboard': import('./Dashboard'); break; case '/profile': import('./UserProfile'); break; case '/settings': import('./Settings'); break; } }; return ( <Link to={to} onMouseEnter={handleMouseEnter} > {children} </Link> ); } // \u0423\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a function ChartComponent({ data }) { const [ChartLibrary, setChartLibrary] = useState(null); useEffect(() => { // \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u044f\u0436\u0435\u043b\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e if (data && data.length > 0) { import('recharts').then(lib => { setChartLibrary(lib); }); } }, [data]); if (!data || data.length === 0) { return <div>No data to display</div>; } if (!ChartLibrary) { return <div>Loading chart...</div>; } const { LineChart, Line, XAxis, YAxis } = ChartLibrary; return ( <LineChart width={400} height={200} data={data}> <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" /> <XAxis dataKey=\"name\" /> <YAxis /> </LineChart> ); }","title":"3. Code Splitting \u0438 Lazy Loading"},{"location":"questions/performance/optimization/#_4","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432"},{"location":"questions/performance/optimization/#1","text":"// \u0410\u0434\u0430\u043f\u0442\u0438\u0432\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f function ResponsiveImage({ src, alt, sizes }) { const generateSrcSet = (baseSrc) => { const formats = ['webp', 'avif']; const sizes = [320, 640, 1024, 1920]; return formats.map(format => sizes.map(size => `${baseSrc}?w=${size}&f=${format} ${size}w` ).join(', ') ); }; return ( <picture> <source srcSet={generateSrcSet(src)[1]} // AVIF type=\"image/avif\" sizes={sizes} /> <source srcSet={generateSrcSet(src)[0]} // WebP type=\"image/webp\" sizes={sizes} /> <img src={`${src}?w=640`} // Fallback alt={alt} loading=\"lazy\" decoding=\"async\" /> </picture> ); } // \u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0432\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function ProgressiveImage({ lowQualitySrc, highQualitySrc, alt }) { const [loaded, setLoaded] = useState(false); const [error, setError] = useState(false); useEffect(() => { const img = new Image(); img.onload = () => setLoaded(true); img.onerror = () => setError(true); img.src = highQualitySrc; }, [highQualitySrc]); return ( <div className=\"progressive-image\"> <img src={lowQualitySrc} alt={alt} className={`low-quality ${loaded ? 'fade-out' : ''}`} /> {loaded && ( <img src={highQualitySrc} alt={alt} className=\"high-quality fade-in\" /> )} {error && ( <div className=\"error-placeholder\"> Failed to load image </div> )} <style jsx>{` .progressive-image { position: relative; overflow: hidden; } .low-quality { filter: blur(5px); transition: opacity 0.3s; } .low-quality.fade-out { opacity: 0; } .high-quality { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; } .fade-in { animation: fadeIn 0.3s ease-in; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } `}</style> </div> ); }","title":"1. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/performance/optimization/#2_1","text":"// \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0448\u0440\u0438\u0444\u0442\u043e\u0432 function FontOptimizer() { useEffect(() => { // Preload \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0448\u0440\u0438\u0444\u0442\u043e\u0432 const criticalFonts = [ '/fonts/inter-400.woff2', '/fonts/inter-600.woff2' ]; criticalFonts.forEach(font => { const link = document.createElement('link'); link.rel = 'preload'; link.as = 'font'; link.type = 'font/woff2'; link.crossOrigin = 'anonymous'; link.href = font; document.head.appendChild(link); }); // Font loading API if ('fonts' in document) { Promise.all([ document.fonts.load('400 16px Inter'), document.fonts.load('600 16px Inter') ]).then(() => { document.body.classList.add('fonts-loaded'); }); } }, []); return null; } // CSS \u0434\u043b\u044f font-display const fontCSS = ` @font-face { font-family: 'Inter'; src: url('/fonts/inter-400.woff2') format('woff2'); font-weight: 400; font-style: normal; font-display: swap; /* \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c fallback \u0448\u0440\u0438\u0444\u0442 \u0441\u0440\u0430\u0437\u0443 */ } @font-face { font-family: 'Inter'; src: url('/fonts/inter-600.woff2') format('woff2'); font-weight: 600; font-style: normal; font-display: swap; } body { font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; } /* \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u043c layout shift */ .fonts-loaded .heading { font-weight: 600; } `;","title":"2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0440\u0438\u0444\u0442\u043e\u0432"},{"location":"questions/performance/optimization/#3-service-worker","text":"// sw.js - Service Worker \u0441 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u043c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c const CACHE_NAME = 'app-v1'; const PRECACHE_URLS = [ '/', '/static/js/bundle.js', '/static/css/main.css' ]; // \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f const strategies = { // \u041a\u0435\u0448 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 cacheFirst: async (request) => { const cache = await caches.open(CACHE_NAME); const cached = await cache.match(request); if (cached) { return cached; } const response = await fetch(request); cache.put(request, response.clone()); return response; }, // \u0421\u0435\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f API networkFirst: async (request) => { const cache = await caches.open(CACHE_NAME); try { const response = await fetch(request); cache.put(request, response.clone()); return response; } catch (error) { const cached = await cache.match(request); if (cached) { return cached; } throw error; } }, // Stale-while-revalidate \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 staleWhileRevalidate: async (request) => { const cache = await caches.open(CACHE_NAME); const cached = await cache.match(request); const fetchPromise = fetch(request).then(response => { cache.put(request, response.clone()); return response; }); return cached || fetchPromise; } }; self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); // \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f if (url.pathname.startsWith('/api/')) { event.respondWith(strategies.networkFirst(request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(strategies.cacheFirst(request)); } else { event.respondWith(strategies.staleWhileRevalidate(request)); } });","title":"3. Service Worker \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/performance/optimization/#bundle-optimization","text":"","title":"Bundle Optimization"},{"location":"questions/performance/optimization/#1-tree-shaking-dead-code-elimination","text":"// webpack.config.js module.exports = { mode: 'production', optimization: { usedExports: true, sideEffects: false, // \u0418\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u043c\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430\u043c\u0438 }, module: { rules: [ { test: /\\.js$/, use: { loader: 'babel-loader', options: { presets: [ ['@babel/preset-env', { modules: false, // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c ES modules \u0434\u043b\u044f tree shaking useBuiltIns: 'usage', corejs: 3 }] ] } } } ] } }; // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0438\u043c\u043f\u043e\u0440\u0442 \u0434\u043b\u044f tree shaking // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0432\u0441\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 import _ from 'lodash'; import * as dateFns from 'date-fns'; // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 import { debounce, throttle } from 'lodash'; import { format, addDays } from 'date-fns'; // \u0418\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e babel-plugin-import // \u274c \u0422\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 import { Button } from 'antd/lib/button'; // \u2705 \u041f\u043b\u0430\u0433\u0438\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u044d\u0442\u043e import { Button } from 'antd';","title":"1. Tree Shaking \u0438 Dead Code Elimination"},{"location":"questions/performance/optimization/#2-code-splitting","text":"// 1. Route-based splitting const routes = [ { path: '/dashboard', component: () => import('./pages/Dashboard') }, { path: '/users', component: () => import('./pages/Users') } ]; // 2. Feature-based splitting const FeatureToggle = ({ feature, children, fallback }) => { const [Component, setComponent] = useState(null); useEffect(() => { if (feature === 'advanced-analytics') { import('./features/AdvancedAnalytics').then(module => { setComponent(() => module.default); }); } else if (feature === 'admin-panel') { import('./features/AdminPanel').then(module => { setComponent(() => module.default); }); } }, [feature]); if (!Component) { return fallback || <div>Loading feature...</div>; } return <Component>{children}</Component>; }; // 3. Library splitting // webpack.config.js module.exports = { optimization: { splitChunks: { chunks: 'all', cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, name: 'vendors', chunks: 'all' }, common: { name: 'common', minChunks: 2, chunks: 'all', enforce: true } } } } };","title":"2. Code Splitting \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"questions/performance/optimization/#monitoring-measurement","text":"","title":"Monitoring \u0438 Measurement"},{"location":"questions/performance/optimization/#1-performance-api","text":"class PerformanceMonitor { constructor() { this.metrics = new Map(); this.setupObservers(); } setupObservers() { // Navigation timing window.addEventListener('load', () => { const navigation = performance.getEntriesByType('navigation')[0]; this.recordMetric('page_load_time', navigation.loadEventEnd - navigation.loadEventStart); this.recordMetric('dom_content_loaded', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart); }); // Resource timing const resourceObserver = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.duration > 1000) { // \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b this.recordMetric('slow_resource', { name: entry.name, duration: entry.duration, size: entry.transferSize }); } } }); resourceObserver.observe({ entryTypes: ['resource'] }); // Long tasks const longTaskObserver = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { this.recordMetric('long_task', { duration: entry.duration, startTime: entry.startTime }); } }); longTaskObserver.observe({ entryTypes: ['longtask'] }); } recordMetric(name, value) { this.metrics.set(name, value); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 if (typeof gtag !== 'undefined') { gtag('event', 'performance_metric', { metric_name: name, metric_value: typeof value === 'object' ? JSON.stringify(value) : value }); } } getMetrics() { return Object.fromEntries(this.metrics); } } // React hook \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 function usePerformanceMonitor() { const [metrics, setMetrics] = useState({}); const monitorRef = useRef(); useEffect(() => { monitorRef.current = new PerformanceMonitor(); const interval = setInterval(() => { setMetrics(monitorRef.current.getMetrics()); }, 5000); return () => clearInterval(interval); }, []); return metrics; }","title":"1. Performance API"},{"location":"questions/performance/optimization/#2-react-devtools-profiler","text":"// \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441 Profiler API function ProfiledComponent({ children, id }) { const onRenderCallback = (id, phase, actualDuration, baseDuration, startTime, commitTime) => { // \u041b\u043e\u0433\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b if (actualDuration > 16) { // 16ms = 60fps console.warn(`Slow render detected in ${id}:`, { phase, actualDuration, baseDuration, startTime, commitTime }); } // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 gtag('event', 'react_render', { component_id: id, phase, duration: Math.round(actualDuration), event_category: 'Performance' }); }; return ( <Profiler id={id} onRender={onRenderCallback}> {children} </Profiler> ); } // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 hook \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f function useExecutionTime(label) { const start = useRef(); useEffect(() => { start.current = performance.now(); return () => { const duration = performance.now() - start.current; console.log(`${label} took ${duration.toFixed(2)}ms`); }; }); } function ExpensiveComponent() { useExecutionTime('ExpensiveComponent render'); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 return <div>Complex content</div>; }","title":"2. React DevTools Profiler"},{"location":"questions/performance/optimization/#memory-management","text":"","title":"Memory Management"},{"location":"questions/performance/optimization/#1_1","text":"// Event listeners cleanup function WindowResizeHandler() { useEffect(() => { const handleResize = () => { console.log('Window resized'); }; window.addEventListener('resize', handleResize); // \u2705 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0447\u0438\u0449\u0430\u0435\u043c event listener return () => { window.removeEventListener('resize', handleResize); }; }, []); return null; } // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 timers function TimerComponent() { useEffect(() => { const interval = setInterval(() => { console.log('Timer tick'); }, 1000); const timeout = setTimeout(() => { console.log('Delayed action'); }, 5000); // \u2705 \u041e\u0447\u0438\u0449\u0430\u0435\u043c timers return () => { clearInterval(interval); clearTimeout(timeout); }; }, []); return <div>Timer component</div>; } // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 subscriptions function SubscriptionComponent() { useEffect(() => { const subscription = eventEmitter.subscribe('data', handleData); // \u2705 \u041e\u0442\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0438 unmount return () => { subscription.unsubscribe(); }; }, []); return <div>Subscription component</div>; } // Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a class ComponentRegistry { constructor() { this.components = new WeakMap(); } register(component, metadata) { this.components.set(component, metadata); } getMetadata(component) { return this.components.get(component); } }","title":"1. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0443\u0442\u0435\u0447\u0435\u043a \u043f\u0430\u043c\u044f\u0442\u0438"},{"location":"questions/performance/optimization/#2_2","text":"// Immutable updates \u0441 immer import produce from 'immer'; function useOptimizedState(initialState) { const [state, setState] = useState(initialState); const updateState = useCallback((updater) => { setState(produce(updater)); }, []); return [state, updateState]; } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f function LargeDataComponent() { const [data, updateData] = useOptimizedState({ users: [], posts: [], comments: [] }); const addUser = useCallback((user) => { updateData(draft => { draft.users.push(user); }); }, [updateData]); return <div>Large data component</div>; } // Object pooling \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 class ObjectPool { constructor(createFn, resetFn, maxSize = 100) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; this.maxSize = maxSize; } acquire() { if (this.pool.length > 0) { return this.pool.pop(); } return this.createFn(); } release(obj) { if (this.pool.length < this.maxSize) { this.resetFn(obj); this.pool.push(obj); } } } // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f object pool const rectanglePool = new ObjectPool( () => ({ x: 0, y: 0, width: 0, height: 0 }), (rect) => { rect.x = 0; rect.y = 0; rect.width = 0; rect.height = 0; } );","title":"2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"questions/performance/optimization/#network-optimization","text":"","title":"Network Optimization"},{"location":"questions/performance/optimization/#1-http2-http3","text":"// Resource hints function ResourceHints() { useEffect(() => { // DNS prefetch \u0434\u043b\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u043e\u043c\u0435\u043d\u043e\u0432 const dnsPrefetchDomains = [ 'https://api.example.com', 'https://cdn.example.com' ]; dnsPrefetchDomains.forEach(domain => { const link = document.createElement('link'); link.rel = 'dns-prefetch'; link.href = domain; document.head.appendChild(link); }); // Preconnect \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 const preconnectUrls = [ 'https://fonts.googleapis.com', 'https://api.example.com' ]; preconnectUrls.forEach(url => { const link = document.createElement('link'); link.rel = 'preconnect'; link.href = url; link.crossOrigin = 'anonymous'; document.head.appendChild(link); }); }, []); return null; } // HTTP/2 Server Push simulation function CriticalResourceLoader() { useEffect(() => { // \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c server push \u0441 prefetch const criticalResources = [ '/api/user/current', '/api/notifications/unread' ]; criticalResources.forEach(url => { const link = document.createElement('link'); link.rel = 'prefetch'; link.href = url; document.head.appendChild(link); }); }, []); return null; }","title":"1. HTTP/2 \u0438 HTTP/3 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/performance/optimization/#2-request-optimization","text":"// Request batching class RequestBatcher { constructor(batchSize = 10, flushInterval = 100) { this.batchSize = batchSize; this.flushInterval = flushInterval; this.queue = []; this.timeoutId = null; } add(request) { return new Promise((resolve, reject) => { this.queue.push({ request, resolve, reject }); if (this.queue.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } }); } async flush() { if (this.queue.length === 0) return; const batch = this.queue.splice(0); if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } try { const requests = batch.map(item => item.request); const responses = await this.executeBatch(requests); batch.forEach((item, index) => { item.resolve(responses[index]); }); } catch (error) { batch.forEach(item => { item.reject(error); }); } } async executeBatch(requests) { const response = await fetch('/api/batch', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ requests }) }); return response.json(); } } // GraphQL-style request combining class RequestCombiner { constructor() { this.pendingRequests = new Map(); } async request(query, variables = {}) { const key = this.generateKey(query, variables); if (this.pendingRequests.has(key)) { return this.pendingRequests.get(key); } const promise = this.executeRequest(query, variables); this.pendingRequests.set(key, promise); // \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u043a\u0435\u0448 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f promise.finally(() => { this.pendingRequests.delete(key); }); return promise; } generateKey(query, variables) { return `${query}:${JSON.stringify(variables)}`; } async executeRequest(query, variables) { const response = await fetch('/graphql', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ query, variables }) }); return response.json(); } }","title":"2. Request optimization"},{"location":"questions/performance/optimization/#best-practices-summary","text":"Core Web Vitals : LCP < 2.5s (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b) FID < 100ms (debouncing, Web Workers) CLS < 0.1 (\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, skeleton screens) Rendering Optimization : React.memo \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useMemo/useCallback \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 Code Splitting : Route-based splitting Component-based splitting Library splitting Resource Optimization : \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (WebP, AVIF, lazy loading) Font optimization (preload, font-display: swap) Service Worker \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Bundle Optimization : Tree shaking Dead code elimination Proper imports Memory Management : Cleanup event listeners, timers, subscriptions Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0443\u0442\u0435\u0447\u0435\u043a Object pooling \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432","title":"Best Practices Summary"},{"location":"questions/performance/optimization/#tools-for-performance-monitoring","text":"Lighthouse - \u0410\u0443\u0434\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Chrome DevTools - Profiling \u0438 debugging React DevTools - React-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0444\u0430\u0439\u043b\u0438\u043d\u0433 Web Vitals - \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 Core Web Vitals Bundle Analyzer - \u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0431\u0430\u043d\u0434\u043b\u0430","title":"Tools for Performance Monitoring"},{"location":"questions/performance/optimization/#_5","text":"React Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f React \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 Architecture - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Testing Performance - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/performance/optimization/#_6","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 Core Web Vitals \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 - \u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 (\u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f, \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f) - \u041e\u043f\u044b\u0442 \u0441 bundle optimization \u0438 code splitting - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 memory management \u0438 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0443\u0442\u0435\u0447\u0435\u043a - \u0417\u043d\u0430\u043d\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Core Web Vitals \u0438 \u043a\u0430\u043a \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c? - \u041a\u0430\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 tree shaking \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c? - \u041a\u0430\u043a \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0443\u0442\u0435\u0447\u043a\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 JavaScript? - \u041a\u0430\u043a\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/performance/optimization_small/","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Frontend (small) Core Web Vitals LCP (Largest Contentful Paint) < 2.5s // \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f LCP new PerformanceObserver((list) => { for (const entry of list.getEntries()) { console.log('LCP:', entry.startTime); gtag('event', 'web_vitals', { name: 'LCP', value: Math.round(entry.startTime) }); } }).observe({ type: 'largest-contentful-paint', buffered: true }); // Critical resource preloading useEffect(() => { const link = document.createElement('link'); link.rel = 'preload'; link.as = 'image'; link.href = '/hero-image.webp'; document.head.appendChild(link); }, []); // Inline critical CSS const criticalCSS = `.hero { height: 100vh; background: linear-gradient(45deg, #667eea, #764ba2); }`; FID (First Input Delay) < 100ms / INP // Debouncing \u0434\u043b\u044f UI responsiveness const useDebounce = (value, delay) => { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => setDebouncedValue(value), delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; }; // Web Workers \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 // worker.js self.onmessage = function(e) { const result = processLargeDataset(e.data); self.postMessage(result); }; // React component const workerRef = useRef(new Worker('/worker.js')); workerRef.current.onmessage = (e) => setResult(e.data); workerRef.current.postMessage(heavyData); CLS (Cumulative Layout Shift) < 0.1 // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function StableImage({ src, alt, width, height }) { const [loaded, setLoaded] = useState(false); return ( <div style={{ aspectRatio: `${width} / ${height}`, backgroundColor: '#f0f0f0' }}> <img src={src} onLoad={() => setLoaded(true)} style={{ opacity: loaded ? 1 : 0, transition: 'opacity 0.3s' }} /> </div> ); } // Skeleton screens function UserCardSkeleton() { return ( <div className=\"skeleton\"> <div className=\"skeleton-avatar\" /> <div className=\"skeleton-line\" /> <style jsx>{` .skeleton-avatar { width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); animation: loading 1.5s infinite; } @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } } `}</style> </div> ); } React Optimization Memoization // React.memo \u0441 custom comparison const UserCard = React.memo(({ user, onEdit }) => ( <div> <h3>{user.name}</h3> <button onClick={() => onEdit(user.id)}>Edit</button> </div> ), (prev, next) => prev.user.id === next.user.id && prev.user.name === next.user.name); // useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => items.filter(item => filters.every(f => applyFilter(item, f))).sort(sortFn) , [items, filters]); // useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleUserSelect = useCallback((userId, selected) => { setSelectedUsers(prev => selected ? [...prev, userId] : prev.filter(id => id !== userId)); }, []); \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f // react-window \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; const VirtualizedList = ({ items }) => ( <List height={600} itemCount={items.length} itemSize={80}> {({ index, style }) => ( <div style={style}> <ItemComponent item={items[index]} /> </div> )} </List> ); // Custom virtualization \u0441 Intersection Observer function useVirtualization(items, itemHeight = 80, containerHeight = 600) { const [visibleRange, setVisibleRange] = useState({ start: 0, end: 10 }); const handleScroll = (scrollTop) => { const start = Math.floor(scrollTop / itemHeight); const visibleCount = Math.ceil(containerHeight / itemHeight); setVisibleRange({ start: Math.max(0, start - 5), end: Math.min(start + visibleCount + 5, items.length) }); }; return { visibleItems: items.slice(visibleRange.start, visibleRange.end), totalHeight: items.length * itemHeight, offsetY: visibleRange.start * itemHeight }; } Code Splitting & Lazy Loading // Route-based splitting const Dashboard = React.lazy(() => import('./Dashboard')); const UserProfile = React.lazy(() => import('./UserProfile')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\"/dashboard\" element={<Dashboard />} /> <Route path=\"/profile\" element={<UserProfile />} /> </Routes> </Suspense> ); } // Preloading on hover const NavigationLink = ({ to, children }) => { const handleMouseEnter = () => { if (to === '/dashboard') import('./Dashboard'); }; return <Link to={to} onMouseEnter={handleMouseEnter}>{children}</Link>; }; // Conditional library loading const ChartComponent = ({ data }) => { const [ChartLib, setChartLib] = useState(null); useEffect(() => { if (data?.length > 0) { import('recharts').then(setChartLib); } }, [data]); if (!ChartLib) return <div>Loading chart...</div>; const { LineChart, Line } = ChartLib; return <LineChart data={data}><Line dataKey=\"value\" /></LineChart>; }; Resource Optimization \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f // Responsive images \u0441 WebP/AVIF function ResponsiveImage({ src, alt, sizes }) { return ( <picture> <source srcSet={`${src}?f=avif&w=320 320w, ${src}?f=avif&w=640 640w`} type=\"image/avif\" /> <source srcSet={`${src}?f=webp&w=320 320w, ${src}?f=webp&w=640 640w`} type=\"image/webp\" /> <img src={`${src}?w=640`} alt={alt} loading=\"lazy\" decoding=\"async\" /> </picture> ); } // Progressive image loading function ProgressiveImage({ lowQualitySrc, highQualitySrc, alt }) { const [loaded, setLoaded] = useState(false); useEffect(() => { const img = new Image(); img.onload = () => setLoaded(true); img.src = highQualitySrc; }, [highQualitySrc]); return ( <div> <img src={lowQualitySrc} className={loaded ? 'fade-out' : ''} alt={alt} /> {loaded && <img src={highQualitySrc} className=\"fade-in\" alt={alt} />} </div> ); } Fonts // Font optimization useEffect(() => { // Preload critical fonts ['inter-400.woff2', 'inter-600.woff2'].forEach(font => { const link = document.createElement('link'); Object.assign(link, { rel: 'preload', as: 'font', type: 'font/woff2', crossOrigin: 'anonymous', href: `/fonts/${font}` }); document.head.appendChild(link); }); // Font Loading API Promise.all([ document.fonts.load('400 16px Inter'), document.fonts.load('600 16px Inter') ]).then(() => document.body.classList.add('fonts-loaded')); }, []); Service Worker Caching // sw.js - Advanced caching strategies const strategies = { cacheFirst: async (request) => { const cached = await caches.match(request); return cached || fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); }, networkFirst: async (request) => { try { const response = await fetch(request); caches.open('v1').then(cache => cache.put(request, response.clone())); return response; } catch { return caches.match(request); } }, staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; // Strategy selection self.addEventListener('fetch', (event) => { const url = new URL(event.request.url); if (url.pathname.startsWith('/api/')) { event.respondWith(strategies.networkFirst(event.request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(strategies.cacheFirst(event.request)); } else { event.respondWith(strategies.staleWhileRevalidate(event.request)); } }); Bundle Optimization // webpack.config.js - Tree shaking & splitting module.exports = { optimization: { usedExports: true, sideEffects: false, splitChunks: { chunks: 'all', cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, name: 'vendors' }, common: { minChunks: 2, name: 'common', enforce: true } } } } }; // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b \u0434\u043b\u044f tree shaking // \u274c import _ from 'lodash'; // \u2705 import { debounce, throttle } from 'lodash'; // \u274c import * as dateFns from 'date-fns'; // \u2705 import { format, addDays } from 'date-fns'; Performance Monitoring Performance API class PerformanceMonitor { constructor() { this.metrics = new Map(); this.setupObservers(); } setupObservers() { // Navigation timing window.addEventListener('load', () => { const [nav] = performance.getEntriesByType('navigation'); this.recordMetric('page_load_time', nav.loadEventEnd - nav.loadEventStart); }); // Long tasks (>50ms) new PerformanceObserver((list) => { list.getEntries().forEach(entry => { this.recordMetric('long_task', { duration: entry.duration, startTime: entry.startTime }); }); }).observe({ entryTypes: ['longtask'] }); // Resource timing new PerformanceObserver((list) => { list.getEntries().forEach(entry => { if (entry.duration > 1000) { // Slow resources this.recordMetric('slow_resource', { name: entry.name, duration: entry.duration }); } }); }).observe({ entryTypes: ['resource'] }); } recordMetric(name, value) { this.metrics.set(name, value); gtag('event', 'performance_metric', { metric_name: name, metric_value: value }); } } React Profiler // Profiler \u0434\u043b\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 function ProfiledComponent({ children, id }) { const onRender = (id, phase, actualDuration) => { if (actualDuration > 16) { // Slower than 60fps console.warn(`Slow render in ${id}: ${actualDuration}ms`); gtag('event', 'react_render', { component_id: id, duration: Math.round(actualDuration) }); } }; return <Profiler id={id} onRender={onRender}>{children}</Profiler>; } Memory Management Leak Prevention // Cleanup patterns function Component() { useEffect(() => { const handleResize = () => console.log('resize'); const interval = setInterval(() => console.log('tick'), 1000); const subscription = eventEmitter.subscribe('data', handleData); window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize); clearInterval(interval); subscription.unsubscribe(); }; }, []); } // Object pooling class ObjectPool { constructor(createFn, resetFn, maxSize = 100) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; this.maxSize = maxSize; } acquire() { return this.pool.length > 0 ? this.pool.pop() : this.createFn(); } release(obj) { if (this.pool.length < this.maxSize) { this.resetFn(obj); this.pool.push(obj); } } } // Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a const componentRegistry = new WeakMap(); Network Optimization Resource Hints // DNS prefetch, preconnect, prefetch useEffect(() => { const hints = [ { rel: 'dns-prefetch', href: 'https://api.example.com' }, { rel: 'preconnect', href: 'https://fonts.googleapis.com', crossOrigin: 'anonymous' }, { rel: 'prefetch', href: '/api/user/current' } ]; hints.forEach(hint => { const link = document.createElement('link'); Object.assign(link, hint); document.head.appendChild(link); }); }, []); Request Batching class RequestBatcher { constructor(batchSize = 10, flushInterval = 100) { this.queue = []; this.batchSize = batchSize; this.flushInterval = flushInterval; this.timeoutId = null; } add(request) { return new Promise((resolve, reject) => { this.queue.push({ request, resolve, reject }); if (this.queue.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } }); } async flush() { const batch = this.queue.splice(0); if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } try { const responses = await fetch('/api/batch', { method: 'POST', body: JSON.stringify({ requests: batch.map(item => item.request) }) }).then(r => r.json()); batch.forEach((item, index) => item.resolve(responses[index])); } catch (error) { batch.forEach(item => item.reject(error)); } } } Performance Budget // Lighthouse CI configuration module.exports = { ci: { assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }] } } } }; // Bundle size monitoring describe('Bundle Size', () => { it('keeps main bundle under 250KB gzipped', async () => { const size = await getPackageSize('dist/main.js'); expect(size.gzipped).toBeLessThan(250 * 1024); }); }); Key Metrics \u0434\u043b\u044f Senior Core Web Vitals : - LCP < 2.5s (\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b, \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f) - FID < 100ms (debouncing, Web Workers, code splitting) - CLS < 0.1 (\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, skeleton screens) Rendering Performance : - 60 FPS target (16.67ms per frame) - Main thread blocking < 50ms - React render time < 16ms Bundle Performance : - Initial bundle < 250KB gzipped - Time to Interactive < 5s - First Paint < 1.5s Memory Management : - Heap size growth monitoring - Event listener cleanup - Object pooling for frequent allocations \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c Core Web Vitals \u0432 production? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 code splitting \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? Memory leaks - detection \u0438 prevention? Performance monitoring \u0438 alerting setup? HTTP/2+ optimization techniques? React Concurrent Features \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438? Service Worker caching strategies? Bundle analysis \u0438 optimization workflow? Performance Tools Lighthouse : Performance audit Chrome DevTools : Profiling, memory, network React DevTools Profiler : Component performance Web Vitals : Real user monitoring Bundle Analyzer : Bundle size analysis SpeedCurve/GTmetrix : Continuous monitoring","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Frontend (small)"},{"location":"questions/performance/optimization_small/#frontend-small","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Frontend (small)"},{"location":"questions/performance/optimization_small/#core-web-vitals","text":"","title":"Core Web Vitals"},{"location":"questions/performance/optimization_small/#lcp-largest-contentful-paint-25s","text":"// \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f LCP new PerformanceObserver((list) => { for (const entry of list.getEntries()) { console.log('LCP:', entry.startTime); gtag('event', 'web_vitals', { name: 'LCP', value: Math.round(entry.startTime) }); } }).observe({ type: 'largest-contentful-paint', buffered: true }); // Critical resource preloading useEffect(() => { const link = document.createElement('link'); link.rel = 'preload'; link.as = 'image'; link.href = '/hero-image.webp'; document.head.appendChild(link); }, []); // Inline critical CSS const criticalCSS = `.hero { height: 100vh; background: linear-gradient(45deg, #667eea, #764ba2); }`;","title":"LCP (Largest Contentful Paint) &lt; 2.5s"},{"location":"questions/performance/optimization_small/#fid-first-input-delay-100ms-inp","text":"// Debouncing \u0434\u043b\u044f UI responsiveness const useDebounce = (value, delay) => { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => setDebouncedValue(value), delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; }; // Web Workers \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 // worker.js self.onmessage = function(e) { const result = processLargeDataset(e.data); self.postMessage(result); }; // React component const workerRef = useRef(new Worker('/worker.js')); workerRef.current.onmessage = (e) => setResult(e.data); workerRef.current.postMessage(heavyData);","title":"FID (First Input Delay) &lt; 100ms / INP"},{"location":"questions/performance/optimization_small/#cls-cumulative-layout-shift-01","text":"// \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 function StableImage({ src, alt, width, height }) { const [loaded, setLoaded] = useState(false); return ( <div style={{ aspectRatio: `${width} / ${height}`, backgroundColor: '#f0f0f0' }}> <img src={src} onLoad={() => setLoaded(true)} style={{ opacity: loaded ? 1 : 0, transition: 'opacity 0.3s' }} /> </div> ); } // Skeleton screens function UserCardSkeleton() { return ( <div className=\"skeleton\"> <div className=\"skeleton-avatar\" /> <div className=\"skeleton-line\" /> <style jsx>{` .skeleton-avatar { width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); animation: loading 1.5s infinite; } @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } } `}</style> </div> ); }","title":"CLS (Cumulative Layout Shift) &lt; 0.1"},{"location":"questions/performance/optimization_small/#react-optimization","text":"","title":"React Optimization"},{"location":"questions/performance/optimization_small/#memoization","text":"// React.memo \u0441 custom comparison const UserCard = React.memo(({ user, onEdit }) => ( <div> <h3>{user.name}</h3> <button onClick={() => onEdit(user.id)}>Edit</button> </div> ), (prev, next) => prev.user.id === next.user.id && prev.user.name === next.user.name); // useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => items.filter(item => filters.every(f => applyFilter(item, f))).sort(sortFn) , [items, filters]); // useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleUserSelect = useCallback((userId, selected) => { setSelectedUsers(prev => selected ? [...prev, userId] : prev.filter(id => id !== userId)); }, []);","title":"Memoization"},{"location":"questions/performance/optimization_small/#_1","text":"// react-window \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; const VirtualizedList = ({ items }) => ( <List height={600} itemCount={items.length} itemSize={80}> {({ index, style }) => ( <div style={style}> <ItemComponent item={items[index]} /> </div> )} </List> ); // Custom virtualization \u0441 Intersection Observer function useVirtualization(items, itemHeight = 80, containerHeight = 600) { const [visibleRange, setVisibleRange] = useState({ start: 0, end: 10 }); const handleScroll = (scrollTop) => { const start = Math.floor(scrollTop / itemHeight); const visibleCount = Math.ceil(containerHeight / itemHeight); setVisibleRange({ start: Math.max(0, start - 5), end: Math.min(start + visibleCount + 5, items.length) }); }; return { visibleItems: items.slice(visibleRange.start, visibleRange.end), totalHeight: items.length * itemHeight, offsetY: visibleRange.start * itemHeight }; }","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/performance/optimization_small/#code-splitting-lazy-loading","text":"// Route-based splitting const Dashboard = React.lazy(() => import('./Dashboard')); const UserProfile = React.lazy(() => import('./UserProfile')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <Routes> <Route path=\"/dashboard\" element={<Dashboard />} /> <Route path=\"/profile\" element={<UserProfile />} /> </Routes> </Suspense> ); } // Preloading on hover const NavigationLink = ({ to, children }) => { const handleMouseEnter = () => { if (to === '/dashboard') import('./Dashboard'); }; return <Link to={to} onMouseEnter={handleMouseEnter}>{children}</Link>; }; // Conditional library loading const ChartComponent = ({ data }) => { const [ChartLib, setChartLib] = useState(null); useEffect(() => { if (data?.length > 0) { import('recharts').then(setChartLib); } }, [data]); if (!ChartLib) return <div>Loading chart...</div>; const { LineChart, Line } = ChartLib; return <LineChart data={data}><Line dataKey=\"value\" /></LineChart>; };","title":"Code Splitting &amp; Lazy Loading"},{"location":"questions/performance/optimization_small/#resource-optimization","text":"","title":"Resource Optimization"},{"location":"questions/performance/optimization_small/#_2","text":"// Responsive images \u0441 WebP/AVIF function ResponsiveImage({ src, alt, sizes }) { return ( <picture> <source srcSet={`${src}?f=avif&w=320 320w, ${src}?f=avif&w=640 640w`} type=\"image/avif\" /> <source srcSet={`${src}?f=webp&w=320 320w, ${src}?f=webp&w=640 640w`} type=\"image/webp\" /> <img src={`${src}?w=640`} alt={alt} loading=\"lazy\" decoding=\"async\" /> </picture> ); } // Progressive image loading function ProgressiveImage({ lowQualitySrc, highQualitySrc, alt }) { const [loaded, setLoaded] = useState(false); useEffect(() => { const img = new Image(); img.onload = () => setLoaded(true); img.src = highQualitySrc; }, [highQualitySrc]); return ( <div> <img src={lowQualitySrc} className={loaded ? 'fade-out' : ''} alt={alt} /> {loaded && <img src={highQualitySrc} className=\"fade-in\" alt={alt} />} </div> ); }","title":"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"},{"location":"questions/performance/optimization_small/#fonts","text":"// Font optimization useEffect(() => { // Preload critical fonts ['inter-400.woff2', 'inter-600.woff2'].forEach(font => { const link = document.createElement('link'); Object.assign(link, { rel: 'preload', as: 'font', type: 'font/woff2', crossOrigin: 'anonymous', href: `/fonts/${font}` }); document.head.appendChild(link); }); // Font Loading API Promise.all([ document.fonts.load('400 16px Inter'), document.fonts.load('600 16px Inter') ]).then(() => document.body.classList.add('fonts-loaded')); }, []);","title":"Fonts"},{"location":"questions/performance/optimization_small/#service-worker-caching","text":"// sw.js - Advanced caching strategies const strategies = { cacheFirst: async (request) => { const cached = await caches.match(request); return cached || fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); }, networkFirst: async (request) => { try { const response = await fetch(request); caches.open('v1').then(cache => cache.put(request, response.clone())); return response; } catch { return caches.match(request); } }, staleWhileRevalidate: async (request) => { const cached = await caches.match(request); const fetchPromise = fetch(request).then(response => { caches.open('v1').then(cache => cache.put(request, response.clone())); return response; }); return cached || fetchPromise; } }; // Strategy selection self.addEventListener('fetch', (event) => { const url = new URL(event.request.url); if (url.pathname.startsWith('/api/')) { event.respondWith(strategies.networkFirst(event.request)); } else if (url.pathname.startsWith('/static/')) { event.respondWith(strategies.cacheFirst(event.request)); } else { event.respondWith(strategies.staleWhileRevalidate(event.request)); } });","title":"Service Worker Caching"},{"location":"questions/performance/optimization_small/#bundle-optimization","text":"// webpack.config.js - Tree shaking & splitting module.exports = { optimization: { usedExports: true, sideEffects: false, splitChunks: { chunks: 'all', cacheGroups: { vendor: { test: /[\\\\/]node_modules[\\\\/]/, name: 'vendors' }, common: { minChunks: 2, name: 'common', enforce: true } } } } }; // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b \u0434\u043b\u044f tree shaking // \u274c import _ from 'lodash'; // \u2705 import { debounce, throttle } from 'lodash'; // \u274c import * as dateFns from 'date-fns'; // \u2705 import { format, addDays } from 'date-fns';","title":"Bundle Optimization"},{"location":"questions/performance/optimization_small/#performance-monitoring","text":"","title":"Performance Monitoring"},{"location":"questions/performance/optimization_small/#performance-api","text":"class PerformanceMonitor { constructor() { this.metrics = new Map(); this.setupObservers(); } setupObservers() { // Navigation timing window.addEventListener('load', () => { const [nav] = performance.getEntriesByType('navigation'); this.recordMetric('page_load_time', nav.loadEventEnd - nav.loadEventStart); }); // Long tasks (>50ms) new PerformanceObserver((list) => { list.getEntries().forEach(entry => { this.recordMetric('long_task', { duration: entry.duration, startTime: entry.startTime }); }); }).observe({ entryTypes: ['longtask'] }); // Resource timing new PerformanceObserver((list) => { list.getEntries().forEach(entry => { if (entry.duration > 1000) { // Slow resources this.recordMetric('slow_resource', { name: entry.name, duration: entry.duration }); } }); }).observe({ entryTypes: ['resource'] }); } recordMetric(name, value) { this.metrics.set(name, value); gtag('event', 'performance_metric', { metric_name: name, metric_value: value }); } }","title":"Performance API"},{"location":"questions/performance/optimization_small/#react-profiler","text":"// Profiler \u0434\u043b\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 function ProfiledComponent({ children, id }) { const onRender = (id, phase, actualDuration) => { if (actualDuration > 16) { // Slower than 60fps console.warn(`Slow render in ${id}: ${actualDuration}ms`); gtag('event', 'react_render', { component_id: id, duration: Math.round(actualDuration) }); } }; return <Profiler id={id} onRender={onRender}>{children}</Profiler>; }","title":"React Profiler"},{"location":"questions/performance/optimization_small/#memory-management","text":"","title":"Memory Management"},{"location":"questions/performance/optimization_small/#leak-prevention","text":"// Cleanup patterns function Component() { useEffect(() => { const handleResize = () => console.log('resize'); const interval = setInterval(() => console.log('tick'), 1000); const subscription = eventEmitter.subscribe('data', handleData); window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize); clearInterval(interval); subscription.unsubscribe(); }; }, []); } // Object pooling class ObjectPool { constructor(createFn, resetFn, maxSize = 100) { this.createFn = createFn; this.resetFn = resetFn; this.pool = []; this.maxSize = maxSize; } acquire() { return this.pool.length > 0 ? this.pool.pop() : this.createFn(); } release(obj) { if (this.pool.length < this.maxSize) { this.resetFn(obj); this.pool.push(obj); } } } // Weak references \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a const componentRegistry = new WeakMap();","title":"Leak Prevention"},{"location":"questions/performance/optimization_small/#network-optimization","text":"","title":"Network Optimization"},{"location":"questions/performance/optimization_small/#resource-hints","text":"// DNS prefetch, preconnect, prefetch useEffect(() => { const hints = [ { rel: 'dns-prefetch', href: 'https://api.example.com' }, { rel: 'preconnect', href: 'https://fonts.googleapis.com', crossOrigin: 'anonymous' }, { rel: 'prefetch', href: '/api/user/current' } ]; hints.forEach(hint => { const link = document.createElement('link'); Object.assign(link, hint); document.head.appendChild(link); }); }, []);","title":"Resource Hints"},{"location":"questions/performance/optimization_small/#request-batching","text":"class RequestBatcher { constructor(batchSize = 10, flushInterval = 100) { this.queue = []; this.batchSize = batchSize; this.flushInterval = flushInterval; this.timeoutId = null; } add(request) { return new Promise((resolve, reject) => { this.queue.push({ request, resolve, reject }); if (this.queue.length >= this.batchSize) { this.flush(); } else if (!this.timeoutId) { this.timeoutId = setTimeout(() => this.flush(), this.flushInterval); } }); } async flush() { const batch = this.queue.splice(0); if (this.timeoutId) { clearTimeout(this.timeoutId); this.timeoutId = null; } try { const responses = await fetch('/api/batch', { method: 'POST', body: JSON.stringify({ requests: batch.map(item => item.request) }) }).then(r => r.json()); batch.forEach((item, index) => item.resolve(responses[index])); } catch (error) { batch.forEach(item => item.reject(error)); } } }","title":"Request Batching"},{"location":"questions/performance/optimization_small/#performance-budget","text":"// Lighthouse CI configuration module.exports = { ci: { assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }] } } } }; // Bundle size monitoring describe('Bundle Size', () => { it('keeps main bundle under 250KB gzipped', async () => { const size = await getPackageSize('dist/main.js'); expect(size.gzipped).toBeLessThan(250 * 1024); }); });","title":"Performance Budget"},{"location":"questions/performance/optimization_small/#key-metrics-senior","text":"Core Web Vitals : - LCP < 2.5s (\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b, \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f) - FID < 100ms (debouncing, Web Workers, code splitting) - CLS < 0.1 (\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, skeleton screens) Rendering Performance : - 60 FPS target (16.67ms per frame) - Main thread blocking < 50ms - React render time < 16ms Bundle Performance : - Initial bundle < 250KB gzipped - Time to Interactive < 5s - First Paint < 1.5s Memory Management : - Heap size growth monitoring - Event listener cleanup - Object pooling for frequent allocations","title":"Key Metrics \u0434\u043b\u044f Senior"},{"location":"questions/performance/optimization_small/#senior","text":"\u041a\u0430\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c Core Web Vitals \u0432 production? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 code splitting \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? Memory leaks - detection \u0438 prevention? Performance monitoring \u0438 alerting setup? HTTP/2+ optimization techniques? React Concurrent Features \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438? Service Worker caching strategies? Bundle analysis \u0438 optimization workflow?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/performance/optimization_small/#performance-tools","text":"Lighthouse : Performance audit Chrome DevTools : Profiling, memory, network React DevTools Profiler : Component performance Web Vitals : Real user monitoring Bundle Analyzer : Bundle size analysis SpeedCurve/GTmetrix : Continuous monitoring","title":"Performance Tools"},{"location":"questions/react/concurrent-rendering/","text":"\u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041a\u0430\u043a \u0432 React 18 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433? \u0417\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u043d\u044b useTransition \u0438 useDeferredValue, \u0447\u0435\u043c \u043e\u043d\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433-\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u0432 StrictMode \u0432 dev, \u0438 \u043a\u0430\u043a \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c race conditions \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (AbortController, \u043e\u0442\u043c\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432)? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 React 18 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (Concurrent Rendering) \u2014 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a React \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 React \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c, \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430. \u041e\u0441\u043d\u043e\u0432\u044b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0427\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c // React 17 \u0438 \u0440\u0430\u043d\u0435\u0435 - \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 function App() { const [count, setCount] = useState(0); const [list, setList] = useState([]); // \u042d\u0442\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043b\u0438 main thread const handleClick = () => { setCount(count + 1); setList(Array.from({length: 10000}, (_, i) => i)); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f }; return ( <div> <button onClick={handleClick}>Count: {count}</button> {list.map(item => <div key={item}>{item}</div>)} </div> ); } // React 18 - \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 import { createRoot } from 'react-dom/client'; // \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 const root = createRoot(document.getElementById('root')); root.render(<App />); \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 // React 18 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439: // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435) // - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (click, input) // - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u043a\u0443\u0441\u0430 // - \u0410\u043d\u0438\u043c\u0430\u0446\u0438\u0438 // \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 // - \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 // - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 // \u041d\u0438\u0437\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b) // - \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 // - \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // - \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f function PriorityExample() { const [inputValue, setInputValue] = useState(''); const [list, setList] = useState([]); const handleInputChange = (e) => { // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setInputValue(e.target.value); // \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 input setList(generateLargeList(e.target.value)); }; return ( <div> <input value={inputValue} onChange={handleInputChange} /> <List items={list} /> </div> ); } useTransition Hook useTransition \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043c\u0435\u0442\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b (transitions), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 import { useState, useTransition } from 'react'; function SearchPage() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const [isPending, startTransition] = useTransition(); const handleSearch = (value) => { // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 - \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 setQuery(value); // \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 - \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e startTransition(() => { setResults(searchFunction(value)); }); }; return ( <div> <input value={query} onChange={(e) => handleSearch(e.target.value)} placeholder=\"Search...\" /> {isPending && <div>Searching...</div>} <div> {results.map(result => ( <div key={result.id} className={isPending ? 'opacity-50' : ''}> {result.title} </div> ))} </div> </div> ); } \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439 function ProductFilter() { const [filter, setFilter] = useState(''); const [category, setCategory] = useState('all'); const [products, setProducts] = useState(INITIAL_PRODUCTS); const [isPending, startTransition] = useTransition(); const applyFilters = (newFilter, newCategory) => { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f UI \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setFilter(newFilter); setCategory(newCategory); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 transition startTransition(() => { const filtered = INITIAL_PRODUCTS.filter(product => { const matchesFilter = product.name.toLowerCase() .includes(newFilter.toLowerCase()); const matchesCategory = newCategory === 'all' || product.category === newCategory; return matchesFilter && matchesCategory; }); setProducts(filtered); }); }; return ( <div> <div className=\"filters\"> <input value={filter} onChange={(e) => applyFilters(e.target.value, category)} placeholder=\"Filter products...\" /> <select value={category} onChange={(e) => applyFilters(filter, e.target.value)} > <option value=\"all\">All Categories</option> <option value=\"electronics\">Electronics</option> <option value=\"clothing\">Clothing</option> </select> </div> <div className={`product-list ${isPending ? 'updating' : ''}`}> {products.map(product => ( <ProductCard key={product.id} product={product} /> ))} {isPending && ( <div className=\"overlay\"> <div>Updating results...</div> </div> )} </div> </div> ); } useDeferredValue Hook useDeferredValue \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043b\u043e\u0436\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 import { useState, useDeferredValue, useMemo } from 'react'; function App() { const [query, setQuery] = useState(''); // \u041e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 const deferredQuery = useDeferredValue(query); // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 const searchResults = useMemo(() => { if (!deferredQuery) return []; // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 return performExpensiveSearch(deferredQuery); }, [deferredQuery]); return ( <div> <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Search...\" /> <div> {/* UI \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u044b\u043c \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 */} <SearchResults query={deferredQuery} results={searchResults} isStale={query !== deferredQuery} /> </div> </div> ); } function SearchResults({ query, results, isStale }) { return ( <div className={isStale ? 'opacity-60' : 'opacity-100'}> <h3>Results for: {query}</h3> {results.map(result => ( <div key={result.id}>{result.title}</div> ))} </div> ); } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 useTransition \u0438 useDeferredValue // useTransition - \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function WithTransition() { const [input, setInput] = useState(''); const [list, setList] = useState([]); const [isPending, startTransition] = useTransition(); const handleChange = (value) => { setInput(value); // \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e startTransition(() => { setList(generateList(value)); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e }); }; return ( <div> <input onChange={(e) => handleChange(e.target.value)} /> {isPending && <Spinner />} <List items={list} /> </div> ); } // useDeferredValue - \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function WithDeferredValue() { const [input, setInput] = useState(''); const deferredInput = useDeferredValue(input); const list = useMemo(() => { return generateList(deferredInput); }, [deferredInput]); const isStale = input !== deferredInput; return ( <div> <input onChange={(e) => setInput(e.target.value)} /> {isStale && <Spinner />} <List items={list} /> </div> ); } \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433 React 18 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 // React 17 - \u0431\u0430\u0442\u0447\u0438\u043d\u0433 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 event handlers function React17Behavior() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleClick = () => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }; const handleAsyncClick = () => { setTimeout(() => { setCount(c => c + 1); // \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 React 17 setFlag(f => !f); // \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 React 17 // \u0414\u0432\u0430 \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440\u0430 }); }; return ( <div> <button onClick={handleClick}>Sync Update</button> <button onClick={handleAsyncClick}>Async Update</button> </div> ); } // React 18 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0431\u0430\u0442\u0447\u0438\u043d\u0433 \u0432\u0435\u0437\u0434\u0435 function React18Behavior() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleAsyncClick = () => { setTimeout(() => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }); }; const handlePromiseClick = () => { fetch('/api/data').then(() => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }); }; return ( <div> <button onClick={handleAsyncClick}>Async Update</button> <button onClick={handlePromiseClick}>Promise Update</button> </div> ); } \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433\u0430 import { flushSync } from 'react-dom'; function DisableBatching() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleClick = () => { flushSync(() => { setCount(c => c + 1); // \u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }); flushSync(() => { setFlag(f => !f); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }); // \u0418\u0442\u043e\u0433\u043e: \u0434\u0432\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0434\u043d\u043e\u0433\u043e }; return <button onClick={handleClick}>Force Sync</button>; } StrictMode \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 React 18 \u0443\u0441\u0438\u043b\u0438\u043b StrictMode \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0414\u0432\u043e\u0439\u043d\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 function StrictModeExample() { const [count, setCount] = useState(0); // \u0412 dev mode \u0441 StrictMode \u044d\u0442\u043e\u0442 \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b useEffect(() => { console.log('Effect running'); // \u0411\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 cleanup window.globalCounter = (window.globalCounter || 0) + 1; return () => { console.log('Effect cleanup'); // Cleanup \u0442\u043e\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f }; }, []); // Render \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u0442\u043e\u0439 console.log('Rendering'); // \u0411\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(c => c + 1)}> Increment </button> </div> ); } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432 StrictMode function StrictModeFixed() { const [count, setCount] = useState(0); useEffect(() => { let cancelled = false; const fetchData = async () => { const data = await api.getData(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u0431\u044b\u043b \u043b\u0438 \u044d\u0444\u0444\u0435\u043a\u0442 \u043e\u0442\u043c\u0435\u043d\u0435\u043d if (!cancelled) { setData(data); } }; fetchData(); return () => { cancelled = true; // Cleanup \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 }; }, []); return <div>Count: {count}</div>; } Race Conditions \u0438 \u0438\u0445 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 Race Conditions // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 race conditions function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { setLoading(true); // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0435\u0441\u043b\u0438 userId \u0431\u044b\u0441\u0442\u0440\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, // \u043e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u0432 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 fetchUser(userId).then(userData => { setUser(userData); // \u041c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 setLoading(false); }); }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; } \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0424\u043b\u0430\u0433 \u043e\u0442\u043c\u0435\u043d\u044b function UserProfileFixed({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { let cancelled = false; setLoading(true); fetchUser(userId).then(userData => { if (!cancelled) { setUser(userData); setLoading(false); } }).catch(error => { if (!cancelled) { console.error('Failed to fetch user:', error); setLoading(false); } }); return () => { cancelled = true; }; }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; } \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: AbortController function UserProfileWithAbort({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { const abortController = new AbortController(); const loadUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`, { signal: abortController.signal }); if (!response.ok) { throw new Error('Failed to fetch user'); } const userData = await response.json(); setUser(userData); } catch (err) { if (err.name !== 'AbortError') { setError(err.message); } } finally { setLoading(false); } }; if (userId) { loadUser(); } return () => { abortController.abort(); }; }, [userId]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return <div>{user?.name}</div>; } \u0420\u0435\u0448\u0435\u043d\u0438\u0435 3: Custom Hook \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 function useAsyncData(asyncFunction, dependencies) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let cancelled = false; const abortController = new AbortController(); const loadData = async () => { try { setLoading(true); setError(null); const result = await asyncFunction(abortController.signal); if (!cancelled) { setData(result); } } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!cancelled) { setLoading(false); } } }; loadData(); return () => { cancelled = true; abortController.abort(); }; }, dependencies); return { data, loading, error }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserProfile({ userId }) { const { data: user, loading, error } = useAsyncData( (signal) => fetch(`/api/users/${userId}`, { signal }).then(r => r.json()), [userId] ); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error.message}</div>; return <div>{user?.name}</div>; } Suspense \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 // \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 function App() { const [selectedUser, setSelectedUser] = useState('1'); return ( <div> <UserSelector onSelect={setSelectedUser} /> <Suspense fallback={<UserProfileSkeleton />}> <UserProfile userId={selectedUser} /> </Suspense> </div> ); } function UserProfile({ userId }) { // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 Suspense const user = useSuspenseQuery(['user', userId], () => fetchUser(userId) ); return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); } \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 React 18 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 // React 17 import ReactDOM from 'react-dom'; ReactDOM.render(<App />, document.getElementById('root')); // React 18 import { createRoot } from 'react-dom/client'; const root = createRoot(document.getElementById('root')); root.render(<App />); \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 StrictMode // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432 React 18 StrictMode function ProblemComponent() { useEffect(() => { // \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b \u0432 dev mode analytics.track('component-mounted'); // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b }, []); } // \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 function FixedComponent() { const hasMounted = useRef(false); useEffect(() => { if (!hasMounted.current) { analytics.track('component-mounted'); hasMounted.current = true; } }, []); // \u0418\u043b\u0438 \u043b\u0443\u0447\u0448\u0435: \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 event handler const handleUserAction = () => { analytics.track('user-action'); }; } \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useTransition // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0434\u043b\u044f \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 UI function GoodTransitionUse() { const [isPending, startTransition] = useTransition(); const handleFilter = (newFilter) => { startTransition(() => { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 setFilteredData(applyExpensiveFilter(data, newFilter)); }); }; } // \u274c \u041f\u043b\u043e\u0445\u043e: \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 function BadTransitionUse() { const [isPending, startTransition] = useTransition(); const handleSubmit = () => { startTransition(() => { // \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 submitForm(); // \u042d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c }); }; } 2. \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useDeferredValue // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function GoodDeferredUse({ searchQuery }) { const deferredQuery = useDeferredValue(searchQuery); const results = useMemo(() => { return expensiveSearch(deferredQuery); }, [deferredQuery]); return <SearchResults results={results} />; } // \u274c \u041f\u043b\u043e\u0445\u043e: \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function BadDeferredUse({ userName }) { const deferredName = useDeferredValue(userName); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435 return <div>Hello, {deferredName}</div>; // \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 } Debugging \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 // \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 React DevTools function ProfiledComponent() { const [isPending, startTransition] = useTransition(); const handleUpdate = () => { startTransition(() => { // \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c performance.mark('transition-start'); updateLargeDataSet(); performance.mark('transition-end'); performance.measure( 'transition-duration', 'transition-start', 'transition-end' ); }); }; return ( <div> <button onClick={handleUpdate}> Update {isPending && '(updating...)'} </button> </div> ); } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e - \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 createRoot \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useTransition \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 UI - \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0441\u043f\u0438\u0441\u043a\u0438 useDeferredValue \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043f\u043e\u0438\u0441\u043a, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0412\u0441\u0435\u0433\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 race conditions - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 StrictMode - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u041d\u0435 \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0439\u0442\u0435 \u0432\u0441\u0435 \u0432 transitions - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 React DevTools - \u0438\u0437\u043c\u0435\u0440\u044f\u0439\u0442\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b useEffect \u0438 Side Effects Reconciliation \u0438 Virtual DOM \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 Event Loop, Microtasks \u0438 Macrotasks","title":"\u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18"},{"location":"questions/react/concurrent-rendering/#react-18","text":"","title":"\u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18"},{"location":"questions/react/concurrent-rendering/#_1","text":"\u041a\u0430\u043a \u0432 React 18 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433? \u0417\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u043d\u044b useTransition \u0438 useDeferredValue, \u0447\u0435\u043c \u043e\u043d\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433-\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u0432 StrictMode \u0432 dev, \u0438 \u043a\u0430\u043a \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c race conditions \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (AbortController, \u043e\u0442\u043c\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432)?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/concurrent-rendering/#_2","text":"React 18 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 (Concurrent Rendering) \u2014 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a React \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 React \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c, \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/concurrent-rendering/#_3","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430"},{"location":"questions/react/concurrent-rendering/#_4","text":"// React 17 \u0438 \u0440\u0430\u043d\u0435\u0435 - \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 function App() { const [count, setCount] = useState(0); const [list, setList] = useState([]); // \u042d\u0442\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043b\u0438 main thread const handleClick = () => { setCount(count + 1); setList(Array.from({length: 10000}, (_, i) => i)); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f }; return ( <div> <button onClick={handleClick}>Count: {count}</button> {list.map(item => <div key={item}>{item}</div>)} </div> ); } // React 18 - \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 import { createRoot } from 'react-dom/client'; // \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 const root = createRoot(document.getElementById('root')); root.render(<App />);","title":"\u0427\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c"},{"location":"questions/react/concurrent-rendering/#_5","text":"// React 18 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439: // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435) // - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (click, input) // - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u043a\u0443\u0441\u0430 // - \u0410\u043d\u0438\u043c\u0430\u0446\u0438\u0438 // \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 // - \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 // - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 // \u041d\u0438\u0437\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b) // - \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 // - \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // - \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f function PriorityExample() { const [inputValue, setInputValue] = useState(''); const [list, setList] = useState([]); const handleInputChange = (e) => { // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setInputValue(e.target.value); // \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 input setList(generateLargeList(e.target.value)); }; return ( <div> <input value={inputValue} onChange={handleInputChange} /> <List items={list} /> </div> ); }","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439"},{"location":"questions/react/concurrent-rendering/#usetransition-hook","text":"useTransition \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043c\u0435\u0442\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b (transitions), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438.","title":"useTransition Hook"},{"location":"questions/react/concurrent-rendering/#_6","text":"import { useState, useTransition } from 'react'; function SearchPage() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const [isPending, startTransition] = useTransition(); const handleSearch = (value) => { // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 - \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 setQuery(value); // \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 - \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e startTransition(() => { setResults(searchFunction(value)); }); }; return ( <div> <input value={query} onChange={(e) => handleSearch(e.target.value)} placeholder=\"Search...\" /> {isPending && <div>Searching...</div>} <div> {results.map(result => ( <div key={result.id} className={isPending ? 'opacity-50' : ''}> {result.title} </div> ))} </div> </div> ); }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering/#_7","text":"function ProductFilter() { const [filter, setFilter] = useState(''); const [category, setCategory] = useState('all'); const [products, setProducts] = useState(INITIAL_PRODUCTS); const [isPending, startTransition] = useTransition(); const applyFilters = (newFilter, newCategory) => { // \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f UI \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e setFilter(newFilter); setCategory(newCategory); // \u0422\u044f\u0436\u0435\u043b\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 transition startTransition(() => { const filtered = INITIAL_PRODUCTS.filter(product => { const matchesFilter = product.name.toLowerCase() .includes(newFilter.toLowerCase()); const matchesCategory = newCategory === 'all' || product.category === newCategory; return matchesFilter && matchesCategory; }); setProducts(filtered); }); }; return ( <div> <div className=\"filters\"> <input value={filter} onChange={(e) => applyFilters(e.target.value, category)} placeholder=\"Filter products...\" /> <select value={category} onChange={(e) => applyFilters(filter, e.target.value)} > <option value=\"all\">All Categories</option> <option value=\"electronics\">Electronics</option> <option value=\"clothing\">Clothing</option> </select> </div> <div className={`product-list ${isPending ? 'updating' : ''}`}> {products.map(product => ( <ProductCard key={product.id} product={product} /> ))} {isPending && ( <div className=\"overlay\"> <div>Updating results...</div> </div> )} </div> </div> ); }","title":"\u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439"},{"location":"questions/react/concurrent-rendering/#usedeferredvalue-hook","text":"useDeferredValue \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043b\u043e\u0436\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.","title":"useDeferredValue Hook"},{"location":"questions/react/concurrent-rendering/#_8","text":"import { useState, useDeferredValue, useMemo } from 'react'; function App() { const [query, setQuery] = useState(''); // \u041e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 const deferredQuery = useDeferredValue(query); // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 const searchResults = useMemo(() => { if (!deferredQuery) return []; // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 return performExpensiveSearch(deferredQuery); }, [deferredQuery]); return ( <div> <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Search...\" /> <div> {/* UI \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u044b\u043c \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 */} <SearchResults query={deferredQuery} results={searchResults} isStale={query !== deferredQuery} /> </div> </div> ); } function SearchResults({ query, results, isStale }) { return ( <div className={isStale ? 'opacity-60' : 'opacity-100'}> <h3>Results for: {query}</h3> {results.map(result => ( <div key={result.id}>{result.title}</div> ))} </div> ); }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering/#usetransition-usedeferredvalue","text":"// useTransition - \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function WithTransition() { const [input, setInput] = useState(''); const [list, setList] = useState([]); const [isPending, startTransition] = useTransition(); const handleChange = (value) => { setInput(value); // \u041d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e startTransition(() => { setList(generateList(value)); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e }); }; return ( <div> <input onChange={(e) => handleChange(e.target.value)} /> {isPending && <Spinner />} <List items={list} /> </div> ); } // useDeferredValue - \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function WithDeferredValue() { const [input, setInput] = useState(''); const deferredInput = useDeferredValue(input); const list = useMemo(() => { return generateList(deferredInput); }, [deferredInput]); const isStale = input !== deferredInput; return ( <div> <input onChange={(e) => setInput(e.target.value)} /> {isStale && <Spinner />} <List items={list} /> </div> ); }","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 useTransition \u0438 useDeferredValue"},{"location":"questions/react/concurrent-rendering/#_9","text":"React 18 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433"},{"location":"questions/react/concurrent-rendering/#_10","text":"// React 17 - \u0431\u0430\u0442\u0447\u0438\u043d\u0433 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 event handlers function React17Behavior() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleClick = () => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }; const handleAsyncClick = () => { setTimeout(() => { setCount(c => c + 1); // \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 React 17 setFlag(f => !f); // \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 React 17 // \u0414\u0432\u0430 \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440\u0430 }); }; return ( <div> <button onClick={handleClick}>Sync Update</button> <button onClick={handleAsyncClick}>Async Update</button> </div> ); } // React 18 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0431\u0430\u0442\u0447\u0438\u043d\u0433 \u0432\u0435\u0437\u0434\u0435 function React18Behavior() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleAsyncClick = () => { setTimeout(() => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }); }; const handlePromiseClick = () => { fetch('/api/data').then(() => { setCount(c => c + 1); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 setFlag(f => !f); // \u0411\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 // \u041e\u0434\u0438\u043d \u0440\u0435-\u0440\u0435\u043d\u0434\u0435\u0440 }); }; return ( <div> <button onClick={handleAsyncClick}>Async Update</button> <button onClick={handlePromiseClick}>Promise Update</button> </div> ); }","title":"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering/#_11","text":"import { flushSync } from 'react-dom'; function DisableBatching() { const [count, setCount] = useState(0); const [flag, setFlag] = useState(false); const handleClick = () => { flushSync(() => { setCount(c => c + 1); // \u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }); flushSync(() => { setFlag(f => !f); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }); // \u0418\u0442\u043e\u0433\u043e: \u0434\u0432\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0434\u043d\u043e\u0433\u043e }; return <button onClick={handleClick}>Force Sync</button>; }","title":"\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433\u0430"},{"location":"questions/react/concurrent-rendering/#strictmode","text":"React 18 \u0443\u0441\u0438\u043b\u0438\u043b StrictMode \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.","title":"StrictMode \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435"},{"location":"questions/react/concurrent-rendering/#_12","text":"function StrictModeExample() { const [count, setCount] = useState(0); // \u0412 dev mode \u0441 StrictMode \u044d\u0442\u043e\u0442 \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b useEffect(() => { console.log('Effect running'); // \u0411\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 cleanup window.globalCounter = (window.globalCounter || 0) + 1; return () => { console.log('Effect cleanup'); // Cleanup \u0442\u043e\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f }; }, []); // Render \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u0442\u043e\u0439 console.log('Rendering'); // \u0411\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(c => c + 1)}> Increment </button> </div> ); } // \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432 StrictMode function StrictModeFixed() { const [count, setCount] = useState(0); useEffect(() => { let cancelled = false; const fetchData = async () => { const data = await api.getData(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u0431\u044b\u043b \u043b\u0438 \u044d\u0444\u0444\u0435\u043a\u0442 \u043e\u0442\u043c\u0435\u043d\u0435\u043d if (!cancelled) { setData(data); } }; fetchData(); return () => { cancelled = true; // Cleanup \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 }; }, []); return <div>Count: {count}</div>; }","title":"\u0414\u0432\u043e\u0439\u043d\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433"},{"location":"questions/react/concurrent-rendering/#race-conditions","text":"","title":"Race Conditions \u0438 \u0438\u0445 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering/#race-conditions_1","text":"// \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 race conditions function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { setLoading(true); // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0435\u0441\u043b\u0438 userId \u0431\u044b\u0441\u0442\u0440\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, // \u043e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u0432 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 fetchUser(userId).then(userData => { setUser(userData); // \u041c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 setLoading(false); }); }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 Race Conditions"},{"location":"questions/react/concurrent-rendering/#1","text":"function UserProfileFixed({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { let cancelled = false; setLoading(true); fetchUser(userId).then(userData => { if (!cancelled) { setUser(userData); setLoading(false); } }).catch(error => { if (!cancelled) { console.error('Failed to fetch user:', error); setLoading(false); } }); return () => { cancelled = true; }; }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0424\u043b\u0430\u0433 \u043e\u0442\u043c\u0435\u043d\u044b"},{"location":"questions/react/concurrent-rendering/#2-abortcontroller","text":"function UserProfileWithAbort({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { const abortController = new AbortController(); const loadUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`, { signal: abortController.signal }); if (!response.ok) { throw new Error('Failed to fetch user'); } const userData = await response.json(); setUser(userData); } catch (err) { if (err.name !== 'AbortError') { setError(err.message); } } finally { setLoading(false); } }; if (userId) { loadUser(); } return () => { abortController.abort(); }; }, [userId]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return <div>{user?.name}</div>; }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: AbortController"},{"location":"questions/react/concurrent-rendering/#3-custom-hook-api","text":"function useAsyncData(asyncFunction, dependencies) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let cancelled = false; const abortController = new AbortController(); const loadData = async () => { try { setLoading(true); setError(null); const result = await asyncFunction(abortController.signal); if (!cancelled) { setData(result); } } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!cancelled) { setLoading(false); } } }; loadData(); return () => { cancelled = true; abortController.abort(); }; }, dependencies); return { data, loading, error }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserProfile({ userId }) { const { data: user, loading, error } = useAsyncData( (signal) => fetch(`/api/users/${userId}`, { signal }).then(r => r.json()), [userId] ); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error.message}</div>; return <div>{user?.name}</div>; }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 3: Custom Hook \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432"},{"location":"questions/react/concurrent-rendering/#suspense","text":"// \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 function App() { const [selectedUser, setSelectedUser] = useState('1'); return ( <div> <UserSelector onSelect={setSelectedUser} /> <Suspense fallback={<UserProfileSkeleton />}> <UserProfile userId={selectedUser} /> </Suspense> </div> ); } function UserProfile({ userId }) { // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 Suspense const user = useSuspenseQuery(['user', userId], () => fetchUser(userId) ); return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); }","title":"Suspense \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/react/concurrent-rendering/#react-18_1","text":"","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 React 18"},{"location":"questions/react/concurrent-rendering/#_13","text":"// React 17 import ReactDOM from 'react-dom'; ReactDOM.render(<App />, document.getElementById('root')); // React 18 import { createRoot } from 'react-dom/client'; const root = createRoot(document.getElementById('root')); root.render(<App />);","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430"},{"location":"questions/react/concurrent-rendering/#strictmode_1","text":"// \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432 React 18 StrictMode function ProblemComponent() { useEffect(() => { // \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b \u0432 dev mode analytics.track('component-mounted'); // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b }, []); } // \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 function FixedComponent() { const hasMounted = useRef(false); useEffect(() => { if (!hasMounted.current) { analytics.track('component-mounted'); hasMounted.current = true; } }, []); // \u0418\u043b\u0438 \u043b\u0443\u0447\u0448\u0435: \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 event handler const handleUserAction = () => { analytics.track('user-action'); }; }","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 StrictMode"},{"location":"questions/react/concurrent-rendering/#_14","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/react/concurrent-rendering/#1-usetransition","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0434\u043b\u044f \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 UI function GoodTransitionUse() { const [isPending, startTransition] = useTransition(); const handleFilter = (newFilter) => { startTransition(() => { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 setFilteredData(applyExpensiveFilter(data, newFilter)); }); }; } // \u274c \u041f\u043b\u043e\u0445\u043e: \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 function BadTransitionUse() { const [isPending, startTransition] = useTransition(); const handleSubmit = () => { startTransition(() => { // \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 submitForm(); // \u042d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c }); }; }","title":"1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useTransition"},{"location":"questions/react/concurrent-rendering/#2-usedeferredvalue","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function GoodDeferredUse({ searchQuery }) { const deferredQuery = useDeferredValue(searchQuery); const results = useMemo(() => { return expensiveSearch(deferredQuery); }, [deferredQuery]); return <SearchResults results={results} />; } // \u274c \u041f\u043b\u043e\u0445\u043e: \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function BadDeferredUse({ userName }) { const deferredName = useDeferredValue(userName); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435 return <div>Hello, {deferredName}</div>; // \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 }","title":"2. \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useDeferredValue"},{"location":"questions/react/concurrent-rendering/#debugging","text":"// \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 React DevTools function ProfiledComponent() { const [isPending, startTransition] = useTransition(); const handleUpdate = () => { startTransition(() => { // \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c performance.mark('transition-start'); updateLargeDataSet(); performance.mark('transition-end'); performance.measure( 'transition-duration', 'transition-start', 'transition-end' ); }); }; return ( <div> <button onClick={handleUpdate}> Update {isPending && '(updating...)'} </button> </div> ); }","title":"Debugging \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439"},{"location":"questions/react/concurrent-rendering/#senior-","text":"\u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e - \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 createRoot \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useTransition \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 UI - \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0441\u043f\u0438\u0441\u043a\u0438 useDeferredValue \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043f\u043e\u0438\u0441\u043a, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0412\u0441\u0435\u0433\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 race conditions - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 AbortController \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 StrictMode - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u041d\u0435 \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0439\u0442\u0435 \u0432\u0441\u0435 \u0432 transitions - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 React DevTools - \u0438\u0437\u043c\u0435\u0440\u044f\u0439\u0442\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/concurrent-rendering/#_15","text":"useEffect \u0438 Side Effects Reconciliation \u0438 Virtual DOM \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 Event Loop, Microtasks \u0438 Macrotasks","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/concurrent-rendering_small/","text":"React 18 Concurrent Rendering - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u044b Concurrent Rendering = React \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c, \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u0438 UI \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 // React 17 ReactDOM.render(<App />, root); // React 18 - \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 concurrent features import { createRoot } from 'react-dom/client'; const root = createRoot(document.getElementById('root')); root.render(<App />); \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0412\u044b\u0441\u043e\u043a\u0438\u0439 - user interactions (click, input) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041d\u0438\u0437\u043a\u0438\u0439 - \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b) useTransition \u0414\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f - \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u043a \"\u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b\" \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b import { useState, useTransition } from 'react'; function SearchPage() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const [isPending, startTransition] = useTransition(); const handleSearch = (value) => { setQuery(value); // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 - \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e startTransition(() => { setResults(expensiveSearch(value)); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e }); }; return ( <div> <input onChange={(e) => handleSearch(e.target.value)} /> {isPending && <div>Searching...</div>} <div className={isPending ? 'opacity-50' : ''}> {results.map(r => <div key={r.id}>{r.title}</div>)} </div> </div> ); } useDeferredValue \u0414\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 import { useState, useDeferredValue, useMemo } from 'react'; function App() { const [query, setQuery] = useState(''); const deferredQuery = useDeferredValue(query); const results = useMemo(() => { return expensiveSearch(deferredQuery); }, [deferredQuery]); const isStale = query !== deferredQuery; return ( <div> <input onChange={(e) => setQuery(e.target.value)} /> <div className={isStale ? 'opacity-60' : ''}> <SearchResults query={deferredQuery} results={results} /> </div> </div> ); } useTransition vs useDeferredValue useTransition useDeferredValue \u0414\u043b\u044f \u0447\u0435\u0433\u043e \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439/props \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u041f\u043e\u043b\u043d\u044b\u0439 (startTransition) \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440 isPending \u0444\u043b\u0430\u0433 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0422\u044f\u0436\u0435\u043b\u044b\u0435 setState \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f // useTransition - \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f const [isPending, startTransition] = useTransition(); startTransition(() => setData(newData)); // useDeferredValue - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0442\u0441\u0440\u043e\u0447\u043a\u0430 const deferredValue = useDeferredValue(value); \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Batching React 18 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u0412\u0421\u0415 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 // React 17 - \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 async setTimeout(() => { setCount(c => c + 1); // \u0420\u0435\u043d\u0434\u0435\u0440 1 setFlag(f => !f); // \u0420\u0435\u043d\u0434\u0435\u0440 2 }); // React 18 - \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 setTimeout(() => { setCount(c => c + 1); // \\ setFlag(f => !f); // / \u041e\u0434\u0438\u043d \u0440\u0435\u043d\u0434\u0435\u0440 }); // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 import { flushSync } from 'react-dom'; flushSync(() => setCount(c => c + 1)); // \u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 flushSync(() => setFlag(f => !f)); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u0440\u0435\u043d\u0434\u0435\u0440 StrictMode \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0412 dev \u0440\u0435\u0436\u0438\u043c\u0435 StrictMode \u0441\u0442\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u043c - \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0438 \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 function Component() { useEffect(() => { console.log('Effect'); // \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b \u0432 dev // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 cleanup window.counter = (window.counter || 0) + 1; return () => { console.log('Cleanup'); // \u0422\u043e\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f }; }, []); } // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 function FixedComponent() { useEffect(() => { let cancelled = false; fetchData().then(data => { if (!cancelled) setData(data); // \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 race condition }); return () => { cancelled = true; }; }, []); } Race Conditions - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 // \u274c Race condition function UserProfile({ userId }) { useEffect(() => { fetchUser(userId).then(setUser); // \u041e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u043d\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 }, [userId]); } \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: Cancelled \u0444\u043b\u0430\u0433 useEffect(() => { let cancelled = false; fetchUser(userId).then(user => { if (!cancelled) setUser(user); }); return () => { cancelled = true; }; }, [userId]); \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: AbortController useEffect(() => { const controller = new AbortController(); const loadUser = async () => { try { const response = await fetch(`/api/users/${userId}`, { signal: controller.signal }); const user = await response.json(); setUser(user); } catch (err) { if (err.name !== 'AbortError') { setError(err); } } }; loadUser(); return () => controller.abort(); }, [userId]); Custom Hook \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 function useAsyncData(asyncFn, deps) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let cancelled = false; const controller = new AbortController(); const load = async () => { setLoading(true); try { const result = await asyncFn(controller.signal); if (!cancelled) setData(result); } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!cancelled) setLoading(false); } }; load(); return () => { cancelled = true; controller.abort(); }; }, deps); return { data, loading, error }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const { data: user, loading, error } = useAsyncData( (signal) => fetch(`/api/users/${userId}`, { signal }).then(r => r.json()), [userId] ); Suspense \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f function App() { return ( <Suspense fallback={<UserSkeleton />}> <UserProfile userId=\"123\" /> </Suspense> ); } // \u0421 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 Suspense function UserProfile({ userId }) { const user = useSuspenseQuery(['user', userId], () => fetchUser(userId)); return <div>{user.name}</div>; } \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c useTransition // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f UI startTransition(() => { setFilteredData(expensiveFilter(data)); // \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 setSearchResults(expensiveSearch(query)); // \u041f\u043e\u0438\u0441\u043a }); // \u274c \u041f\u043b\u043e\u0445\u043e - \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 startTransition(() => { submitForm(); // \u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c! }); \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c useDeferredValue // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f const deferredQuery = useDeferredValue(searchQuery); const results = useMemo(() => search(deferredQuery), [deferredQuery]); // \u274c \u041f\u043b\u043e\u0445\u043e - \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f const deferredName = useDeferredValue(userName); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f checklist createRoot \u0432\u043c\u0435\u0441\u0442\u043e ReactDOM.render StrictMode compatibility - \u0438\u0441\u043f\u0440\u0430\u0432\u044c \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b AbortController \u0434\u043b\u044f \u0432\u0441\u0435\u0445 fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 useTransition \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 useDeferredValue \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u0432 dev StrictMode - \u043d\u0430\u0439\u0434\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0437\u0430\u0440\u0430\u043d\u0435\u0435 Senior Rules \u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f - \u043d\u0430\u0447\u043d\u0438 \u0441 createRoot useTransition \u0434\u043b\u044f UI , useDeferredValue \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 AbortController always - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 StrictMode \u0432 dev - \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0439 \u041d\u0435 transition \u0432\u0441\u0435 - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 Race condition protection - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 cancelled \u0444\u043b\u0430\u0433\u0438 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0441 DevTools - \u0438\u0437\u043c\u0435\u0440\u044f\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f Suspense \u0433\u0440\u0430\u043d\u0438\u0446\u044b - \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e UX \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Concurrent rendering = \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u044c UI. \u041d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0439 main thread \u0442\u044f\u0436\u0435\u043b\u044b\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438!","title":"React 18 Concurrent Rendering - Senior Cheat Sheet (small)"},{"location":"questions/react/concurrent-rendering_small/#react-18-concurrent-rendering-senior-cheat-sheet-small","text":"","title":"React 18 Concurrent Rendering - Senior Cheat Sheet (small)"},{"location":"questions/react/concurrent-rendering_small/#_1","text":"Concurrent Rendering = React \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c, \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u0438 UI","title":"\u041e\u0441\u043d\u043e\u0432\u044b"},{"location":"questions/react/concurrent-rendering_small/#_2","text":"// React 17 ReactDOM.render(<App />, root); // React 18 - \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 concurrent features import { createRoot } from 'react-dom/client'; const root = createRoot(document.getElementById('root')); root.render(<App />);","title":"\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering_small/#_3","text":"\u0412\u044b\u0441\u043e\u043a\u0438\u0439 - user interactions (click, input) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041d\u0438\u0437\u043a\u0438\u0439 - \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b)","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439"},{"location":"questions/react/concurrent-rendering_small/#usetransition","text":"\u0414\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f - \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u043a \"\u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b\" \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u044b import { useState, useTransition } from 'react'; function SearchPage() { const [query, setQuery] = useState(''); const [results, setResults] = useState([]); const [isPending, startTransition] = useTransition(); const handleSearch = (value) => { setQuery(value); // \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 - \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e startTransition(() => { setResults(expensiveSearch(value)); // \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e }); }; return ( <div> <input onChange={(e) => handleSearch(e.target.value)} /> {isPending && <div>Searching...</div>} <div className={isPending ? 'opacity-50' : ''}> {results.map(r => <div key={r.id}>{r.title}</div>)} </div> </div> ); }","title":"useTransition"},{"location":"questions/react/concurrent-rendering_small/#usedeferredvalue","text":"\u0414\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 import { useState, useDeferredValue, useMemo } from 'react'; function App() { const [query, setQuery] = useState(''); const deferredQuery = useDeferredValue(query); const results = useMemo(() => { return expensiveSearch(deferredQuery); }, [deferredQuery]); const isStale = query !== deferredQuery; return ( <div> <input onChange={(e) => setQuery(e.target.value)} /> <div className={isStale ? 'opacity-60' : ''}> <SearchResults query={deferredQuery} results={results} /> </div> </div> ); }","title":"useDeferredValue"},{"location":"questions/react/concurrent-rendering_small/#usetransition-vs-usedeferredvalue","text":"useTransition useDeferredValue \u0414\u043b\u044f \u0447\u0435\u0433\u043e \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439/props \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u041f\u043e\u043b\u043d\u044b\u0439 (startTransition) \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440 isPending \u0444\u043b\u0430\u0433 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0422\u044f\u0436\u0435\u043b\u044b\u0435 setState \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f // useTransition - \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f const [isPending, startTransition] = useTransition(); startTransition(() => setData(newData)); // useDeferredValue - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0442\u0441\u0440\u043e\u0447\u043a\u0430 const deferredValue = useDeferredValue(value);","title":"useTransition vs useDeferredValue"},{"location":"questions/react/concurrent-rendering_small/#batching","text":"React 18 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u0412\u0421\u0415 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 // React 17 - \u041d\u0415 \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432 async setTimeout(() => { setCount(c => c + 1); // \u0420\u0435\u043d\u0434\u0435\u0440 1 setFlag(f => !f); // \u0420\u0435\u043d\u0434\u0435\u0440 2 }); // React 18 - \u0431\u0430\u0442\u0447\u0438\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 setTimeout(() => { setCount(c => c + 1); // \\ setFlag(f => !f); // / \u041e\u0434\u0438\u043d \u0440\u0435\u043d\u0434\u0435\u0440 }); // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0442\u0447\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 import { flushSync } from 'react-dom'; flushSync(() => setCount(c => c + 1)); // \u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 flushSync(() => setFlag(f => !f)); // \u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u0440\u0435\u043d\u0434\u0435\u0440","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Batching"},{"location":"questions/react/concurrent-rendering_small/#strictmode","text":"\u0412 dev \u0440\u0435\u0436\u0438\u043c\u0435 StrictMode \u0441\u0442\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u043c - \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0438 \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 function Component() { useEffect(() => { console.log('Effect'); // \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b \u0432 dev // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 cleanup window.counter = (window.counter || 0) + 1; return () => { console.log('Cleanup'); // \u0422\u043e\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f }; }, []); } // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 function FixedComponent() { useEffect(() => { let cancelled = false; fetchData().then(data => { if (!cancelled) setData(data); // \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 race condition }); return () => { cancelled = true; }; }, []); }","title":"StrictMode \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/react/concurrent-rendering_small/#race-conditions-","text":"","title":"Race Conditions - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435"},{"location":"questions/react/concurrent-rendering_small/#_4","text":"// \u274c Race condition function UserProfile({ userId }) { useEffect(() => { fetchUser(userId).then(setUser); // \u041e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u043d\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 }, [userId]); }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430"},{"location":"questions/react/concurrent-rendering_small/#1-cancelled","text":"useEffect(() => { let cancelled = false; fetchUser(userId).then(user => { if (!cancelled) setUser(user); }); return () => { cancelled = true; }; }, [userId]);","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: Cancelled \u0444\u043b\u0430\u0433"},{"location":"questions/react/concurrent-rendering_small/#2-abortcontroller","text":"useEffect(() => { const controller = new AbortController(); const loadUser = async () => { try { const response = await fetch(`/api/users/${userId}`, { signal: controller.signal }); const user = await response.json(); setUser(user); } catch (err) { if (err.name !== 'AbortError') { setError(err); } } }; loadUser(); return () => controller.abort(); }, [userId]);","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: AbortController"},{"location":"questions/react/concurrent-rendering_small/#custom-hook","text":"function useAsyncData(asyncFn, deps) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let cancelled = false; const controller = new AbortController(); const load = async () => { setLoading(true); try { const result = await asyncFn(controller.signal); if (!cancelled) setData(result); } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err); } } finally { if (!cancelled) setLoading(false); } }; load(); return () => { cancelled = true; controller.abort(); }; }, deps); return { data, loading, error }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const { data: user, loading, error } = useAsyncData( (signal) => fetch(`/api/users/${userId}`, { signal }).then(r => r.json()), [userId] );","title":"Custom Hook \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"questions/react/concurrent-rendering_small/#suspense","text":"function App() { return ( <Suspense fallback={<UserSkeleton />}> <UserProfile userId=\"123\" /> </Suspense> ); } // \u0421 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 Suspense function UserProfile({ userId }) { const user = useSuspenseQuery(['user', userId], () => fetchUser(userId)); return <div>{user.name}</div>; }","title":"Suspense \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/react/concurrent-rendering_small/#_5","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/react/concurrent-rendering_small/#usetransition_1","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f UI startTransition(() => { setFilteredData(expensiveFilter(data)); // \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 setSearchResults(expensiveSearch(query)); // \u041f\u043e\u0438\u0441\u043a }); // \u274c \u041f\u043b\u043e\u0445\u043e - \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 startTransition(() => { submitForm(); // \u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c! });","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c useTransition"},{"location":"questions/react/concurrent-rendering_small/#usedeferredvalue_1","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f const deferredQuery = useDeferredValue(searchQuery); const results = useMemo(() => search(deferredQuery), [deferredQuery]); // \u274c \u041f\u043b\u043e\u0445\u043e - \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f const deferredName = useDeferredValue(userName); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c useDeferredValue"},{"location":"questions/react/concurrent-rendering_small/#checklist","text":"createRoot \u0432\u043c\u0435\u0441\u0442\u043e ReactDOM.render StrictMode compatibility - \u0438\u0441\u043f\u0440\u0430\u0432\u044c \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b AbortController \u0434\u043b\u044f \u0432\u0441\u0435\u0445 fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 useTransition \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 useDeferredValue \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u0432 dev StrictMode - \u043d\u0430\u0439\u0434\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0437\u0430\u0440\u0430\u043d\u0435\u0435","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f checklist"},{"location":"questions/react/concurrent-rendering_small/#senior-rules","text":"\u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f - \u043d\u0430\u0447\u043d\u0438 \u0441 createRoot useTransition \u0434\u043b\u044f UI , useDeferredValue \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 AbortController always - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 async \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 StrictMode \u0432 dev - \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0439 \u041d\u0435 transition \u0432\u0441\u0435 - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 Race condition protection - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 cancelled \u0444\u043b\u0430\u0433\u0438 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0441 DevTools - \u0438\u0437\u043c\u0435\u0440\u044f\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f Suspense \u0433\u0440\u0430\u043d\u0438\u0446\u044b - \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e UX \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Concurrent rendering = \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u044c UI. \u041d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0439 main thread \u0442\u044f\u0436\u0435\u043b\u044b\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438!","title":"Senior Rules"},{"location":"questions/react/context-api/","text":"Context API vs Redux \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Context API \u0432 React \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c, \u0438 \u043a\u043e\u0433\u0434\u0430 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0435\u0441\u0442\u044c Redux? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Context API \u0438 Redux \u2014 \u0434\u0432\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 React. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. Context API - \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 React Context API \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c props \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u041e\u0441\u043d\u043e\u0432\u044b Context API import React, { createContext, useContext, useState } from 'react'; // 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 const ThemeContext = createContext(); // 2. Provider \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); const toggleTheme = () => { setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light'); }; const value = { theme, toggleTheme }; return ( <ThemeContext.Provider value={value}> {children} </ThemeContext.Provider> ); } // 3. Custom hook \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 function useTheme() { const context = useContext(ThemeContext); if (context === undefined) { throw new Error('useTheme must be used within a ThemeProvider'); } return context; } // 4. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 function Header() { const { theme, toggleTheme } = useTheme(); return ( <header className={`header header--${theme}`}> <h1>My App</h1> <button onClick={toggleTheme}> Switch to {theme === 'light' ? 'dark' : 'light'} theme </button> </header> ); } function App() { return ( <ThemeProvider> <Header /> <main> <Content /> </main> </ThemeProvider> ); } \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 useReducer // \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 const initialState = { user: null, loading: false, error: null, notifications: [] }; // Reducer \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c function appReducer(state, action) { switch (action.type) { case 'LOGIN_START': return { ...state, loading: true, error: null }; case 'LOGIN_SUCCESS': return { ...state, loading: false, user: action.payload, error: null }; case 'LOGIN_ERROR': return { ...state, loading: false, error: action.payload }; case 'LOGOUT': return { ...state, user: null, notifications: [] }; case 'ADD_NOTIFICATION': return { ...state, notifications: [...state.notifications, action.payload] }; case 'REMOVE_NOTIFICATION': return { ...state, notifications: state.notifications.filter( notif => notif.id !== action.payload ) }; default: return state; } } // Context \u0441 reducer const AppContext = createContext(); function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); // Action creators const login = async (credentials) => { dispatch({ type: 'LOGIN_START' }); try { const response = await fetch('/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(credentials) }); if (!response.ok) { throw new Error('Login failed'); } const user = await response.json(); dispatch({ type: 'LOGIN_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'LOGIN_ERROR', payload: error.message }); } }; const logout = () => { dispatch({ type: 'LOGOUT' }); }; const addNotification = (message, type = 'info') => { const notification = { id: Date.now(), message, type, timestamp: new Date() }; dispatch({ type: 'ADD_NOTIFICATION', payload: notification }); }; const removeNotification = (id) => { dispatch({ type: 'REMOVE_NOTIFICATION', payload: id }); }; const value = { ...state, login, logout, addNotification, removeNotification }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } function useApp() { const context = useContext(AppContext); if (context === undefined) { throw new Error('useApp must be used within an AppProvider'); } return context; } \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const AuthContext = createContext(); const UIContext = createContext(); const DataContext = createContext(); function AuthProvider({ children }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const login = async (credentials) => { setLoading(true); try { const user = await authService.login(credentials); setUser(user); } finally { setLoading(false); } }; return ( <AuthContext.Provider value={{ user, loading, login }}> {children} </AuthContext.Provider> ); } function UIProvider({ children }) { const [theme, setTheme] = useState('light'); const [sidebarOpen, setSidebarOpen] = useState(false); const [modals, setModals] = useState([]); return ( <UIContext.Provider value={{ theme, setTheme, sidebarOpen, setSidebarOpen, modals, setModals }}> {children} </UIContext.Provider> ); } // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 function AppProviders({ children }) { return ( <AuthProvider> <UIProvider> <DataProvider> {children} </DataProvider> </UIProvider> </AuthProvider> ); } Redux - \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c Redux \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 actions \u0438 reducers. \u041e\u0441\u043d\u043e\u0432\u044b Redux import { createStore, combineReducers } from 'redux'; import { Provider, useSelector, useDispatch } from 'react-redux'; // Actions const INCREMENT = 'INCREMENT'; const DECREMENT = 'DECREMENT'; const SET_USER = 'SET_USER'; const SET_LOADING = 'SET_LOADING'; // Action creators const increment = () => ({ type: INCREMENT }); const decrement = () => ({ type: DECREMENT }); const setUser = (user) => ({ type: SET_USER, payload: user }); const setLoading = (loading) => ({ type: SET_LOADING, payload: loading }); // Reducers function counterReducer(state = { count: 0 }, action) { switch (action.type) { case INCREMENT: return { ...state, count: state.count + 1 }; case DECREMENT: return { ...state, count: state.count - 1 }; default: return state; } } function userReducer(state = { user: null, loading: false }, action) { switch (action.type) { case SET_USER: return { ...state, user: action.payload }; case SET_LOADING: return { ...state, loading: action.payload }; default: return state; } } // Root reducer const rootReducer = combineReducers({ counter: counterReducer, user: userReducer }); // Store const store = createStore(rootReducer); // Component function Counter() { const count = useSelector(state => state.counter.count); const dispatch = useDispatch(); return ( <div> <span>{count}</span> <button onClick={() => dispatch(increment())}>+</button> <button onClick={() => dispatch(decrement())}>-</button> </div> ); } function App() { return ( <Provider store={store}> <Counter /> </Provider> ); } Redux Toolkit (\u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434) import { configureStore, createSlice } from '@reduxjs/toolkit'; import { Provider, useSelector, useDispatch } from 'react-redux'; // Slice (\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 actions \u0438 reducer) const counterSlice = createSlice({ name: 'counter', initialState: { value: 0, step: 1 }, reducers: { increment: (state) => { // Immer \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \"\u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\" \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 state.value += state.step; }, decrement: (state) => { state.value -= state.step; }, incrementByAmount: (state, action) => { state.value += action.payload; }, setStep: (state, action) => { state.step = action.payload; } } }); // \u042d\u043a\u0441\u043f\u043e\u0440\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 export const { increment, decrement, incrementByAmount, setStep } = counterSlice.actions; // Async thunk \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 import { createAsyncThunk } from '@reduxjs/toolkit'; const fetchUserById = createAsyncThunk( 'users/fetchById', async (userId) => { const response = await fetch(`/api/users/${userId}`); return response.json(); } ); const userSlice = createSlice({ name: 'user', initialState: { entity: null, loading: 'idle' // 'idle' | 'pending' | 'succeeded' | 'failed' }, reducers: { clearUser: (state) => { state.entity = null; } }, extraReducers: (builder) => { builder .addCase(fetchUserById.pending, (state) => { state.loading = 'pending'; }) .addCase(fetchUserById.fulfilled, (state, action) => { state.loading = 'succeeded'; state.entity = action.payload; }) .addCase(fetchUserById.rejected, (state) => { state.loading = 'failed'; }); } }); // Store const store = configureStore({ reducer: { counter: counterSlice.reducer, user: userSlice.reducer } }); // Selectors const selectCount = (state) => state.counter.value; const selectUser = (state) => state.user.entity; const selectUserLoading = (state) => state.user.loading; // Component function UserProfile({ userId }) { const user = useSelector(selectUser); const loading = useSelector(selectUserLoading); const dispatch = useDispatch(); useEffect(() => { dispatch(fetchUserById(userId)); }, [dispatch, userId]); if (loading === 'pending') return <div>Loading...</div>; if (loading === 'failed') return <div>Error loading user</div>; return ( <div> <h1>{user?.name}</h1> <p>{user?.email}</p> </div> ); } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 Context API \u0438 Redux \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Context API // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f Context API: // 1. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function SimpleThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // 2. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function FormProvider({ children }) { const [formData, setFormData] = useState({}); const [errors, setErrors] = useState({}); return ( <FormContext.Provider value={{ formData, setFormData, errors, setErrors }}> {children} </FormContext.Provider> ); } // 3. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f function ConfigProvider({ children }) { const [config] = useState({ apiUrl: process.env.REACT_APP_API_URL, features: { enableAnalytics: true, enableChat: false } }); return ( <ConfigContext.Provider value={config}> {children} </ConfigContext.Provider> ); } \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Redux // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f Redux: // 1. \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 const cartSlice = createSlice({ name: 'cart', initialState: { items: [], total: 0, discount: null, shipping: null }, reducers: { addItem: (state, action) => { const item = action.payload; const existingItem = state.items.find(i => i.id === item.id); if (existingItem) { existingItem.quantity += item.quantity; } else { state.items.push(item); } // \u041f\u0435\u0440\u0435\u0441\u0447\u0435\u0442 total state.total = calculateTotal(state.items, state.discount, state.shipping); }, removeItem: (state, action) => { state.items = state.items.filter(item => item.id !== action.payload); state.total = calculateTotal(state.items, state.discount, state.shipping); }, applyDiscount: (state, action) => { state.discount = action.payload; state.total = calculateTotal(state.items, state.discount, state.shipping); } } }); // 2. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 // - \u041a\u043e\u0440\u0437\u0438\u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 // - \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f // - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f // - \u041a\u044d\u0448 API \u0434\u0430\u043d\u043d\u044b\u0445 // 3. \u041d\u0443\u0436\u043d\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430 // Redux DevTools \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Context API - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const [notifications, setNotifications] = useState([]); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f const value = { user, setUser, theme, setTheme, notifications, setNotifications }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 function UserProvider({ children }) { const [user, setUser] = useState(null); return ( <UserContext.Provider value={{ user, setUser }}> {children} </UserContext.Provider> ); } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const userValue = useMemo(() => ({ user, setUser }), [user]); const themeValue = useMemo(() => ({ theme, setTheme }), [theme]); return ( <UserContext.Provider value={userValue}> <ThemeContext.Provider value={themeValue}> {children} </ThemeContext.Provider> </UserContext.Provider> ); } Redux - \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 state function UserProfile() { const state = useSelector(state => state); // \u0412\u0435\u0441\u044c state! return <div>{state.user.name}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f function UserProfile() { const userName = useSelector(state => state.user.name); return <div>{userName}</div>; } // \u2705 \u0415\u0449\u0435 \u043b\u0443\u0447\u0448\u0435: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 import { createSelector } from '@reduxjs/toolkit'; const selectUser = state => state.user; const selectUserName = createSelector( [selectUser], user => user.name ); function UserProfile() { const userName = useSelector(selectUserName); return <div>{userName}</div>; } Middleware \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c Redux middleware // Logger middleware const loggerMiddleware = store => next => action => { console.log('Dispatching:', action); const result = next(action); console.log('Next state:', store.getState()); return result; }; // Async middleware (thunk) const thunkMiddleware = store => next => action => { if (typeof action === 'function') { return action(store.dispatch, store.getState); } return next(action); }; const store = configureStore({ reducer: rootReducer, middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(loggerMiddleware) }); // Async action \u0441 thunk const fetchUser = (userId) => async (dispatch, getState) => { dispatch(setLoading(true)); try { const response = await fetch(`/api/users/${userId}`); const user = await response.json(); dispatch(setUser(user)); } catch (error) { dispatch(setError(error.message)); } finally { dispatch(setLoading(false)); } }; \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Context API import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; // Mock provider \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 function TestProvider({ children, initialTheme = 'light' }) { const [theme, setTheme] = useState(initialTheme); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } test('theme toggle works', async () => { render( <TestProvider> <ThemeToggle /> </TestProvider> ); const button = screen.getByRole('button'); expect(button).toHaveTextContent('Switch to dark theme'); await userEvent.click(button); expect(button).toHaveTextContent('Switch to light theme'); }); \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Redux import { createStore } from 'redux'; import { Provider } from 'react-redux'; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e store function createTestStore(initialState = {}) { return createStore(rootReducer, initialState); } test('counter increment works', async () => { const store = createTestStore({ counter: { count: 0 } }); render( <Provider store={store}> <Counter /> </Provider> ); const button = screen.getByText('+'); await userEvent.click(button); expect(store.getState().counter.count).toBe(1); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 reducers \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e test('counter reducer handles increment', () => { const initialState = { count: 0 }; const action = { type: 'INCREMENT' }; const newState = counterReducer(initialState, action); expect(newState.count).toBe(1); }); \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u0431\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 function App() { return ( <Provider store={store}> {/* Redux \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f */} <AuthProvider> {/* Context \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 */} <ThemeProvider> {/* Context \u0434\u043b\u044f UI \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a */} <Router> <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"/profile\" element={<Profile />} /> </Routes> </Router> </ThemeProvider> </AuthProvider> </Provider> ); } // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 function ProductList() { // Redux \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 const products = useSelector(selectProducts); const dispatch = useDispatch(); // Context \u0434\u043b\u044f \u0442\u0435\u043c\u044b const { theme } = useTheme(); useEffect(() => { dispatch(fetchProducts()); }, [dispatch]); return ( <div className={`product-list product-list--${theme}`}> {products.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); } \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u041e\u0442 Context \u043a Redux // \u0411\u044b\u043b\u043e: Context const AppContext = createContext(); function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); return ( <AppContext.Provider value={{ state, dispatch }}> {children} </AppContext.Provider> ); } // \u0421\u0442\u0430\u043b\u043e: Redux Toolkit const appSlice = createSlice({ name: 'app', initialState, reducers: { // \u0422\u0435 \u0436\u0435 reducers, \u0447\u0442\u043e \u0431\u044b\u043b\u0438 \u0432 appReducer } }); const store = configureStore({ reducer: { app: appSlice.reducer } }); Senior-\u0441\u043e\u0432\u0435\u0442\u044b Context API \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a UI, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Redux \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 - Context \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e, Redux \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 - \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0432 Redux \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u041d\u0435 \u043f\u0435\u0440\u0435\u0438\u043d\u0436\u0438\u043d\u0438\u0440\u044c\u0442\u0435 - \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0439\u0442\u0435 \u043f\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 Redux Toolkit \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e Redux \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useEffect \u0438 Side Effects Higher-Order Components (HOC)","title":"Context API vs Redux"},{"location":"questions/react/context-api/#context-api-vs-redux","text":"","title":"Context API vs Redux"},{"location":"questions/react/context-api/#_1","text":"\u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Context API \u0432 React \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c, \u0438 \u043a\u043e\u0433\u0434\u0430 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0435\u0441\u0442\u044c Redux?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/context-api/#_2","text":"Context API \u0438 Redux \u2014 \u0434\u0432\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432 React. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/context-api/#context-api-react","text":"Context API \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c props \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435.","title":"Context API - \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 React"},{"location":"questions/react/context-api/#context-api","text":"import React, { createContext, useContext, useState } from 'react'; // 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 const ThemeContext = createContext(); // 2. Provider \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); const toggleTheme = () => { setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light'); }; const value = { theme, toggleTheme }; return ( <ThemeContext.Provider value={value}> {children} </ThemeContext.Provider> ); } // 3. Custom hook \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 function useTheme() { const context = useContext(ThemeContext); if (context === undefined) { throw new Error('useTheme must be used within a ThemeProvider'); } return context; } // 4. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 function Header() { const { theme, toggleTheme } = useTheme(); return ( <header className={`header header--${theme}`}> <h1>My App</h1> <button onClick={toggleTheme}> Switch to {theme === 'light' ? 'dark' : 'light'} theme </button> </header> ); } function App() { return ( <ThemeProvider> <Header /> <main> <Content /> </main> </ThemeProvider> ); }","title":"\u041e\u0441\u043d\u043e\u0432\u044b Context API"},{"location":"questions/react/context-api/#usereducer","text":"// \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 const initialState = { user: null, loading: false, error: null, notifications: [] }; // Reducer \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c function appReducer(state, action) { switch (action.type) { case 'LOGIN_START': return { ...state, loading: true, error: null }; case 'LOGIN_SUCCESS': return { ...state, loading: false, user: action.payload, error: null }; case 'LOGIN_ERROR': return { ...state, loading: false, error: action.payload }; case 'LOGOUT': return { ...state, user: null, notifications: [] }; case 'ADD_NOTIFICATION': return { ...state, notifications: [...state.notifications, action.payload] }; case 'REMOVE_NOTIFICATION': return { ...state, notifications: state.notifications.filter( notif => notif.id !== action.payload ) }; default: return state; } } // Context \u0441 reducer const AppContext = createContext(); function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); // Action creators const login = async (credentials) => { dispatch({ type: 'LOGIN_START' }); try { const response = await fetch('/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(credentials) }); if (!response.ok) { throw new Error('Login failed'); } const user = await response.json(); dispatch({ type: 'LOGIN_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'LOGIN_ERROR', payload: error.message }); } }; const logout = () => { dispatch({ type: 'LOGOUT' }); }; const addNotification = (message, type = 'info') => { const notification = { id: Date.now(), message, type, timestamp: new Date() }; dispatch({ type: 'ADD_NOTIFICATION', payload: notification }); }; const removeNotification = (id) => { dispatch({ type: 'REMOVE_NOTIFICATION', payload: id }); }; const value = { ...state, login, logout, addNotification, removeNotification }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } function useApp() { const context = useContext(AppContext); if (context === undefined) { throw new Error('useApp must be used within an AppProvider'); } return context; }","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 useReducer"},{"location":"questions/react/context-api/#_3","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const AuthContext = createContext(); const UIContext = createContext(); const DataContext = createContext(); function AuthProvider({ children }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const login = async (credentials) => { setLoading(true); try { const user = await authService.login(credentials); setUser(user); } finally { setLoading(false); } }; return ( <AuthContext.Provider value={{ user, loading, login }}> {children} </AuthContext.Provider> ); } function UIProvider({ children }) { const [theme, setTheme] = useState('light'); const [sidebarOpen, setSidebarOpen] = useState(false); const [modals, setModals] = useState([]); return ( <UIContext.Provider value={{ theme, setTheme, sidebarOpen, setSidebarOpen, modals, setModals }}> {children} </UIContext.Provider> ); } // \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 function AppProviders({ children }) { return ( <AuthProvider> <UIProvider> <DataProvider> {children} </DataProvider> </UIProvider> </AuthProvider> ); }","title":"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b"},{"location":"questions/react/context-api/#redux-","text":"Redux \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 actions \u0438 reducers.","title":"Redux - \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c"},{"location":"questions/react/context-api/#redux","text":"import { createStore, combineReducers } from 'redux'; import { Provider, useSelector, useDispatch } from 'react-redux'; // Actions const INCREMENT = 'INCREMENT'; const DECREMENT = 'DECREMENT'; const SET_USER = 'SET_USER'; const SET_LOADING = 'SET_LOADING'; // Action creators const increment = () => ({ type: INCREMENT }); const decrement = () => ({ type: DECREMENT }); const setUser = (user) => ({ type: SET_USER, payload: user }); const setLoading = (loading) => ({ type: SET_LOADING, payload: loading }); // Reducers function counterReducer(state = { count: 0 }, action) { switch (action.type) { case INCREMENT: return { ...state, count: state.count + 1 }; case DECREMENT: return { ...state, count: state.count - 1 }; default: return state; } } function userReducer(state = { user: null, loading: false }, action) { switch (action.type) { case SET_USER: return { ...state, user: action.payload }; case SET_LOADING: return { ...state, loading: action.payload }; default: return state; } } // Root reducer const rootReducer = combineReducers({ counter: counterReducer, user: userReducer }); // Store const store = createStore(rootReducer); // Component function Counter() { const count = useSelector(state => state.counter.count); const dispatch = useDispatch(); return ( <div> <span>{count}</span> <button onClick={() => dispatch(increment())}>+</button> <button onClick={() => dispatch(decrement())}>-</button> </div> ); } function App() { return ( <Provider store={store}> <Counter /> </Provider> ); }","title":"\u041e\u0441\u043d\u043e\u0432\u044b Redux"},{"location":"questions/react/context-api/#redux-toolkit","text":"import { configureStore, createSlice } from '@reduxjs/toolkit'; import { Provider, useSelector, useDispatch } from 'react-redux'; // Slice (\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 actions \u0438 reducer) const counterSlice = createSlice({ name: 'counter', initialState: { value: 0, step: 1 }, reducers: { increment: (state) => { // Immer \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \"\u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\" \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 state.value += state.step; }, decrement: (state) => { state.value -= state.step; }, incrementByAmount: (state, action) => { state.value += action.payload; }, setStep: (state, action) => { state.step = action.payload; } } }); // \u042d\u043a\u0441\u043f\u043e\u0440\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 export const { increment, decrement, incrementByAmount, setStep } = counterSlice.actions; // Async thunk \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 import { createAsyncThunk } from '@reduxjs/toolkit'; const fetchUserById = createAsyncThunk( 'users/fetchById', async (userId) => { const response = await fetch(`/api/users/${userId}`); return response.json(); } ); const userSlice = createSlice({ name: 'user', initialState: { entity: null, loading: 'idle' // 'idle' | 'pending' | 'succeeded' | 'failed' }, reducers: { clearUser: (state) => { state.entity = null; } }, extraReducers: (builder) => { builder .addCase(fetchUserById.pending, (state) => { state.loading = 'pending'; }) .addCase(fetchUserById.fulfilled, (state, action) => { state.loading = 'succeeded'; state.entity = action.payload; }) .addCase(fetchUserById.rejected, (state) => { state.loading = 'failed'; }); } }); // Store const store = configureStore({ reducer: { counter: counterSlice.reducer, user: userSlice.reducer } }); // Selectors const selectCount = (state) => state.counter.value; const selectUser = (state) => state.user.entity; const selectUserLoading = (state) => state.user.loading; // Component function UserProfile({ userId }) { const user = useSelector(selectUser); const loading = useSelector(selectUserLoading); const dispatch = useDispatch(); useEffect(() => { dispatch(fetchUserById(userId)); }, [dispatch, userId]); if (loading === 'pending') return <div>Loading...</div>; if (loading === 'failed') return <div>Error loading user</div>; return ( <div> <h1>{user?.name}</h1> <p>{user?.email}</p> </div> ); }","title":"Redux Toolkit (\u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434)"},{"location":"questions/react/context-api/#context-api-redux","text":"","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 Context API \u0438 Redux"},{"location":"questions/react/context-api/#context-api_1","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f Context API: // 1. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function SimpleThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // 2. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function FormProvider({ children }) { const [formData, setFormData] = useState({}); const [errors, setErrors] = useState({}); return ( <FormContext.Provider value={{ formData, setFormData, errors, setErrors }}> {children} </FormContext.Provider> ); } // 3. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f function ConfigProvider({ children }) { const [config] = useState({ apiUrl: process.env.REACT_APP_API_URL, features: { enableAnalytics: true, enableChat: false } }); return ( <ConfigContext.Provider value={config}> {children} </ConfigContext.Provider> ); }","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Context API"},{"location":"questions/react/context-api/#redux_1","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f Redux: // 1. \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 const cartSlice = createSlice({ name: 'cart', initialState: { items: [], total: 0, discount: null, shipping: null }, reducers: { addItem: (state, action) => { const item = action.payload; const existingItem = state.items.find(i => i.id === item.id); if (existingItem) { existingItem.quantity += item.quantity; } else { state.items.push(item); } // \u041f\u0435\u0440\u0435\u0441\u0447\u0435\u0442 total state.total = calculateTotal(state.items, state.discount, state.shipping); }, removeItem: (state, action) => { state.items = state.items.filter(item => item.id !== action.payload); state.total = calculateTotal(state.items, state.discount, state.shipping); }, applyDiscount: (state, action) => { state.discount = action.payload; state.total = calculateTotal(state.items, state.discount, state.shipping); } } }); // 2. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 // - \u041a\u043e\u0440\u0437\u0438\u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 // - \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f // - \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f // - \u041a\u044d\u0448 API \u0434\u0430\u043d\u043d\u044b\u0445 // 3. \u041d\u0443\u0436\u043d\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430 // Redux DevTools \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Redux"},{"location":"questions/react/context-api/#_4","text":"","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/react/context-api/#context-api-","text":"// \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const [notifications, setNotifications] = useState([]); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f const value = { user, setUser, theme, setTheme, notifications, setNotifications }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 function UserProvider({ children }) { const [user, setUser] = useState(null); return ( <UserContext.Provider value={{ user, setUser }}> {children} </UserContext.Provider> ); } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const userValue = useMemo(() => ({ user, setUser }), [user]); const themeValue = useMemo(() => ({ theme, setTheme }), [theme]); return ( <UserContext.Provider value={userValue}> <ThemeContext.Provider value={themeValue}> {children} </ThemeContext.Provider> </UserContext.Provider> ); }","title":"Context API - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432"},{"location":"questions/react/context-api/#redux-_1","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 state function UserProfile() { const state = useSelector(state => state); // \u0412\u0435\u0441\u044c state! return <div>{state.user.name}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f function UserProfile() { const userName = useSelector(state => state.user.name); return <div>{userName}</div>; } // \u2705 \u0415\u0449\u0435 \u043b\u0443\u0447\u0448\u0435: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 import { createSelector } from '@reduxjs/toolkit'; const selectUser = state => state.user; const selectUserName = createSelector( [selectUser], user => user.name ); function UserProfile() { const userName = useSelector(selectUserName); return <div>{userName}</div>; }","title":"Redux - \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/react/context-api/#middleware","text":"","title":"Middleware \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c"},{"location":"questions/react/context-api/#redux-middleware","text":"// Logger middleware const loggerMiddleware = store => next => action => { console.log('Dispatching:', action); const result = next(action); console.log('Next state:', store.getState()); return result; }; // Async middleware (thunk) const thunkMiddleware = store => next => action => { if (typeof action === 'function') { return action(store.dispatch, store.getState); } return next(action); }; const store = configureStore({ reducer: rootReducer, middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(loggerMiddleware) }); // Async action \u0441 thunk const fetchUser = (userId) => async (dispatch, getState) => { dispatch(setLoading(true)); try { const response = await fetch(`/api/users/${userId}`); const user = await response.json(); dispatch(setUser(user)); } catch (error) { dispatch(setError(error.message)); } finally { dispatch(setLoading(false)); } };","title":"Redux middleware"},{"location":"questions/react/context-api/#_5","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/context-api/#context-api_2","text":"import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; // Mock provider \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 function TestProvider({ children, initialTheme = 'light' }) { const [theme, setTheme] = useState(initialTheme); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } test('theme toggle works', async () => { render( <TestProvider> <ThemeToggle /> </TestProvider> ); const button = screen.getByRole('button'); expect(button).toHaveTextContent('Switch to dark theme'); await userEvent.click(button); expect(button).toHaveTextContent('Switch to light theme'); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Context API"},{"location":"questions/react/context-api/#redux_2","text":"import { createStore } from 'redux'; import { Provider } from 'react-redux'; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e store function createTestStore(initialState = {}) { return createStore(rootReducer, initialState); } test('counter increment works', async () => { const store = createTestStore({ counter: { count: 0 } }); render( <Provider store={store}> <Counter /> </Provider> ); const button = screen.getByText('+'); await userEvent.click(button); expect(store.getState().counter.count).toBe(1); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 reducers \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e test('counter reducer handles increment', () => { const initialState = { count: 0 }; const action = { type: 'INCREMENT' }; const newState = counterReducer(initialState, action); expect(newState.count).toBe(1); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Redux"},{"location":"questions/react/context-api/#_6","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438"},{"location":"questions/react/context-api/#_7","text":"// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u0431\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 function App() { return ( <Provider store={store}> {/* Redux \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f */} <AuthProvider> {/* Context \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 */} <ThemeProvider> {/* Context \u0434\u043b\u044f UI \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a */} <Router> <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"/profile\" element={<Profile />} /> </Routes> </Router> </ThemeProvider> </AuthProvider> </Provider> ); } // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 function ProductList() { // Redux \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 const products = useSelector(selectProducts); const dispatch = useDispatch(); // Context \u0434\u043b\u044f \u0442\u0435\u043c\u044b const { theme } = useTheme(); useEffect(() => { dispatch(fetchProducts()); }, [dispatch]); return ( <div className={`product-list product-list--${theme}`}> {products.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); }","title":"\u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/react/context-api/#_8","text":"","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438"},{"location":"questions/react/context-api/#context-redux","text":"// \u0411\u044b\u043b\u043e: Context const AppContext = createContext(); function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); return ( <AppContext.Provider value={{ state, dispatch }}> {children} </AppContext.Provider> ); } // \u0421\u0442\u0430\u043b\u043e: Redux Toolkit const appSlice = createSlice({ name: 'app', initialState, reducers: { // \u0422\u0435 \u0436\u0435 reducers, \u0447\u0442\u043e \u0431\u044b\u043b\u0438 \u0432 appReducer } }); const store = configureStore({ reducer: { app: appSlice.reducer } });","title":"\u041e\u0442 Context \u043a Redux"},{"location":"questions/react/context-api/#senior-","text":"Context API \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a UI, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Redux \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439\u0442\u0435 - Context \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e, Redux \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 - \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0432 Redux \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u041d\u0435 \u043f\u0435\u0440\u0435\u0438\u043d\u0436\u0438\u043d\u0438\u0440\u044c\u0442\u0435 - \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0439\u0442\u0435 \u043f\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 Redux Toolkit \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e Redux","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/context-api/#_9","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useEffect \u0438 Side Effects Higher-Order Components (HOC)","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/context-api_small/","text":"Context API vs Redux - Senior Cheat Sheet (small) \u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Context API \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (theme, user, config) UI \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 (\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043a\u043d\u0430, sidebar) \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0444\u043e\u0440\u043c\u0430, wizard) \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (<10 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432) Redux \u2705 \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u043a\u043e\u0440\u0437\u0438\u043d\u0430, \u043a\u044d\u0448 API) \u041c\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 (undo/redo) DevTools \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430 \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b Context API - \u043e\u0441\u043d\u043e\u0432\u044b \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 const ThemeContext = createContext(); function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // Custom hook function useTheme() { const context = useContext(ThemeContext); if (!context) { throw new Error('useTheme must be used within ThemeProvider'); } return context; } \u0421 useReducer \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const initialState = { user: null, loading: false, error: null }; function appReducer(state, action) { switch (action.type) { case 'LOGIN_START': return { ...state, loading: true, error: null }; case 'LOGIN_SUCCESS': return { ...state, loading: false, user: action.payload }; case 'LOGIN_ERROR': return { ...state, loading: false, error: action.payload }; default: return state; } } function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); const login = async (credentials) => { dispatch({ type: 'LOGIN_START' }); try { const user = await authService.login(credentials); dispatch({ type: 'LOGIN_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'LOGIN_ERROR', payload: error.message }); } }; return ( <AppContext.Provider value={{ ...state, login }}> {children} </AppContext.Provider> ); } Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 import { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Async thunk const fetchUser = createAsyncThunk( 'user/fetchById', async (userId) => { const response = await fetch(`/api/users/${userId}`); return response.json(); } ); // Slice const userSlice = createSlice({ name: 'user', initialState: { entity: null, loading: 'idle' }, reducers: { clearUser: (state) => { state.entity = null; } }, extraReducers: (builder) => { builder .addCase(fetchUser.pending, (state) => { state.loading = 'pending'; }) .addCase(fetchUser.fulfilled, (state, action) => { state.loading = 'succeeded'; state.entity = action.payload; }); } }); // Store const store = configureStore({ reducer: { user: userSlice.reducer } }); // Component function UserProfile({ userId }) { const user = useSelector(state => state.user.entity); const loading = useSelector(state => state.user.loading); const dispatch = useDispatch(); useEffect(() => { dispatch(fetchUser(userId)); }, [dispatch, userId]); if (loading === 'pending') return <div>Loading...</div>; return <div>{user?.name}</div>; } Performance \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b Context - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 // \u274c \u0412\u0441\u0435 consumers \u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437! const value = { user, setUser, theme, setTheme }; return <AppContext.Provider value={value}>{children}</AppContext.Provider>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 function UserProvider({ children }) { const [user, setUser] = useState(null); return <UserContext.Provider value={{ user, setUser }}>{children}</UserContext.Provider>; } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return <AppContext.Provider value={value}>{children}</AppContext.Provider>; } Redux - \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b // \u274c \u041f\u043b\u043e\u0445\u043e - \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0432\u0435\u0441\u044c state const state = useSelector(state => state); // \u0420\u0435\u043d\u0434\u0435\u0440 \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 const userName = useSelector(state => state.user.name); // \u2705 \u0415\u0449\u0435 \u043b\u0443\u0447\u0448\u0435 - \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 import { createSelector } from '@reduxjs/toolkit'; const selectUserData = createSelector( [state => state.user], (user) => ({ name: user.name, email: user.email }) ); \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 function App() { return ( <Provider store={store}> {/* Redux \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 */} <AuthProvider> {/* Context \u0434\u043b\u044f auth */} <ThemeProvider> {/* Context \u0434\u043b\u044f UI */} <AppRoutes /> </ThemeProvider> </AuthProvider> </Provider> ); } function ProductList() { // Redux \u0434\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 const products = useSelector(selectProducts); const dispatch = useDispatch(); // Context \u0434\u043b\u044f UI \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const { theme } = useTheme(); return ( <div className={`products products--${theme}`}> {products.map(p => <ProductCard key={p.id} product={p} />)} </div> ); } \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Context // Test Provider function TestProvider({ children, initialUser = null }) { const [user, setUser] = useState(initialUser); return ( <UserContext.Provider value={{ user, setUser }}> {children} </UserContext.Provider> ); } test('user context works', () => { render( <TestProvider initialUser={{ name: 'John' }}> <UserComponent /> </TestProvider> ); expect(screen.getByText('Hello John')).toBeInTheDocument(); }); Redux // Test store function createTestStore(initialState = {}) { return configureStore({ reducer: { user: userSlice.reducer }, preloadedState: initialState }); } test('user slice works', () => { const store = createTestStore(); render( <Provider store={store}> <UserComponent /> </Provider> ); // Test interactions... }); // Test reducers separately test('userSlice handles login', () => { const initialState = { user: null, loading: false }; const action = { type: 'user/loginSuccess', payload: { name: 'John' } }; const newState = userSlice.reducer(initialState, action); expect(newState.user.name).toBe('John'); }); \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b function AppProviders({ children }) { return ( <AuthProvider> <UIProvider> <DataProvider> {children} </DataProvider> </UIProvider> </AuthProvider> ); } Redux - feature-based structure src/ features/ auth/ authSlice.js authAPI.js components/ products/ productsSlice.js productsAPI.js components/ app/ store.js rootReducer.js Senior Rules Context \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e - theme, auth, config Redux \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e - \u043a\u043e\u0440\u0437\u0438\u043d\u0430, \u043a\u044d\u0448, \u0444\u043e\u0440\u043c\u044b \u041d\u0435 \u0432\u0441\u0451 \u0432 \u043e\u0434\u0438\u043d \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 - \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 Context value - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0432 Redux \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 Redux Toolkit \u0442\u043e\u043b\u044c\u043a\u043e - \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 legacy Redux \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 UI \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f Context \u2192 Redux // \u0411\u044b\u043b\u043e: Context + useReducer const [state, dispatch] = useReducer(cartReducer, initialState); // \u0421\u0442\u0430\u043b\u043e: Redux Toolkit slice const cartSlice = createSlice({ name: 'cart', initialState, reducers: { addItem: (state, action) => { state.items.push(action.payload); } } }); Decision Tree: - \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 + \u043c\u0430\u043b\u043e consumers = Context - \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 + \u043c\u043d\u043e\u0433\u043e consumers = Redux - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 = useState/useReducer - \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 = Redux + RTK Query \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0430\u0447\u043d\u0438 \u0441 Context, \u043c\u0438\u0433\u0440\u0438\u0440\u0443\u0439 \u043d\u0430 Redux \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438!","title":"Context API vs Redux - Senior Cheat Sheet (small)"},{"location":"questions/react/context-api_small/#context-api-vs-redux-senior-cheat-sheet-small","text":"","title":"Context API vs Redux - Senior Cheat Sheet (small)"},{"location":"questions/react/context-api_small/#_1","text":"","title":"\u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/react/context-api_small/#context-api","text":"\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (theme, user, config) UI \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 (\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043a\u043d\u0430, sidebar) \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0444\u043e\u0440\u043c\u0430, wizard) \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (<10 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432)","title":"Context API \u2705"},{"location":"questions/react/context-api_small/#redux","text":"\u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u043a\u043e\u0440\u0437\u0438\u043d\u0430, \u043a\u044d\u0448 API) \u041c\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 (undo/redo) DevTools \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0430 \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b","title":"Redux \u2705"},{"location":"questions/react/context-api_small/#context-api-","text":"","title":"Context API - \u043e\u0441\u043d\u043e\u0432\u044b"},{"location":"questions/react/context-api_small/#_2","text":"const ThemeContext = createContext(); function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return ( <ThemeContext.Provider value={{ theme, setTheme }}> {children} </ThemeContext.Provider> ); } // Custom hook function useTheme() { const context = useContext(ThemeContext); if (!context) { throw new Error('useTheme must be used within ThemeProvider'); } return context; }","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"},{"location":"questions/react/context-api_small/#usereducer","text":"const initialState = { user: null, loading: false, error: null }; function appReducer(state, action) { switch (action.type) { case 'LOGIN_START': return { ...state, loading: true, error: null }; case 'LOGIN_SUCCESS': return { ...state, loading: false, user: action.payload }; case 'LOGIN_ERROR': return { ...state, loading: false, error: action.payload }; default: return state; } } function AppProvider({ children }) { const [state, dispatch] = useReducer(appReducer, initialState); const login = async (credentials) => { dispatch({ type: 'LOGIN_START' }); try { const user = await authService.login(credentials); dispatch({ type: 'LOGIN_SUCCESS', payload: user }); } catch (error) { dispatch({ type: 'LOGIN_ERROR', payload: error.message }); } }; return ( <AppContext.Provider value={{ ...state, login }}> {children} </AppContext.Provider> ); }","title":"\u0421 useReducer \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"},{"location":"questions/react/context-api_small/#redux-toolkit-","text":"import { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // Async thunk const fetchUser = createAsyncThunk( 'user/fetchById', async (userId) => { const response = await fetch(`/api/users/${userId}`); return response.json(); } ); // Slice const userSlice = createSlice({ name: 'user', initialState: { entity: null, loading: 'idle' }, reducers: { clearUser: (state) => { state.entity = null; } }, extraReducers: (builder) => { builder .addCase(fetchUser.pending, (state) => { state.loading = 'pending'; }) .addCase(fetchUser.fulfilled, (state, action) => { state.loading = 'succeeded'; state.entity = action.payload; }); } }); // Store const store = configureStore({ reducer: { user: userSlice.reducer } }); // Component function UserProfile({ userId }) { const user = useSelector(state => state.user.entity); const loading = useSelector(state => state.user.loading); const dispatch = useDispatch(); useEffect(() => { dispatch(fetchUser(userId)); }, [dispatch, userId]); if (loading === 'pending') return <div>Loading...</div>; return <div>{user?.name}</div>; }","title":"Redux Toolkit - \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/react/context-api_small/#performance","text":"","title":"Performance \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b"},{"location":"questions/react/context-api_small/#context-","text":"// \u274c \u0412\u0441\u0435 consumers \u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437! const value = { user, setUser, theme, setTheme }; return <AppContext.Provider value={value}>{children}</AppContext.Provider>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u0432 function UserProvider({ children }) { const [user, setUser] = useState(null); return <UserContext.Provider value={{ user, setUser }}>{children}</UserContext.Provider>; } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); return <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function AppProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return <AppContext.Provider value={value}>{children}</AppContext.Provider>; }","title":"Context - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432"},{"location":"questions/react/context-api_small/#redux-","text":"// \u274c \u041f\u043b\u043e\u0445\u043e - \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0432\u0435\u0441\u044c state const state = useSelector(state => state); // \u0420\u0435\u043d\u0434\u0435\u0440 \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e - \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 const userName = useSelector(state => state.user.name); // \u2705 \u0415\u0449\u0435 \u043b\u0443\u0447\u0448\u0435 - \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440 import { createSelector } from '@reduxjs/toolkit'; const selectUserData = createSelector( [state => state.user], (user) => ({ name: user.name, email: user.email }) );","title":"Redux - \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b"},{"location":"questions/react/context-api_small/#_3","text":"function App() { return ( <Provider store={store}> {/* Redux \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 */} <AuthProvider> {/* Context \u0434\u043b\u044f auth */} <ThemeProvider> {/* Context \u0434\u043b\u044f UI */} <AppRoutes /> </ThemeProvider> </AuthProvider> </Provider> ); } function ProductList() { // Redux \u0434\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 const products = useSelector(selectProducts); const dispatch = useDispatch(); // Context \u0434\u043b\u044f UI \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f const { theme } = useTheme(); return ( <div className={`products products--${theme}`}> {products.map(p => <ProductCard key={p.id} product={p} />)} </div> ); }","title":"\u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"questions/react/context-api_small/#_4","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/context-api_small/#context","text":"// Test Provider function TestProvider({ children, initialUser = null }) { const [user, setUser] = useState(initialUser); return ( <UserContext.Provider value={{ user, setUser }}> {children} </UserContext.Provider> ); } test('user context works', () => { render( <TestProvider initialUser={{ name: 'John' }}> <UserComponent /> </TestProvider> ); expect(screen.getByText('Hello John')).toBeInTheDocument(); });","title":"Context"},{"location":"questions/react/context-api_small/#redux_1","text":"// Test store function createTestStore(initialState = {}) { return configureStore({ reducer: { user: userSlice.reducer }, preloadedState: initialState }); } test('user slice works', () => { const store = createTestStore(); render( <Provider store={store}> <UserComponent /> </Provider> ); // Test interactions... }); // Test reducers separately test('userSlice handles login', () => { const initialState = { user: null, loading: false }; const action = { type: 'user/loginSuccess', payload: { name: 'John' } }; const newState = userSlice.reducer(initialState, action); expect(newState.user.name).toBe('John'); });","title":"Redux"},{"location":"questions/react/context-api_small/#_5","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/react/context-api_small/#_6","text":"function AppProviders({ children }) { return ( <AuthProvider> <UIProvider> <DataProvider> {children} </DataProvider> </UIProvider> </AuthProvider> ); }","title":"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b"},{"location":"questions/react/context-api_small/#redux-feature-based-structure","text":"src/ features/ auth/ authSlice.js authAPI.js components/ products/ productsSlice.js productsAPI.js components/ app/ store.js rootReducer.js","title":"Redux - feature-based structure"},{"location":"questions/react/context-api_small/#senior-rules","text":"Context \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e - theme, auth, config Redux \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e - \u043a\u043e\u0440\u0437\u0438\u043d\u0430, \u043a\u044d\u0448, \u0444\u043e\u0440\u043c\u044b \u041d\u0435 \u0432\u0441\u0451 \u0432 \u043e\u0434\u0438\u043d \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 - \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 Context value - \u0438\u0437\u0431\u0435\u0433\u0430\u0439 \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0432 Redux \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 Redux Toolkit \u0442\u043e\u043b\u044c\u043a\u043e - \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 legacy Redux \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 UI","title":"Senior Rules"},{"location":"questions/react/context-api_small/#context-redux","text":"// \u0411\u044b\u043b\u043e: Context + useReducer const [state, dispatch] = useReducer(cartReducer, initialState); // \u0421\u0442\u0430\u043b\u043e: Redux Toolkit slice const cartSlice = createSlice({ name: 'cart', initialState, reducers: { addItem: (state, action) => { state.items.push(action.payload); } } }); Decision Tree: - \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 + \u043c\u0430\u043b\u043e consumers = Context - \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 + \u043c\u043d\u043e\u0433\u043e consumers = Redux - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 = useState/useReducer - \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 = Redux + RTK Query \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0430\u0447\u043d\u0438 \u0441 Context, \u043c\u0438\u0433\u0440\u0438\u0440\u0443\u0439 \u043d\u0430 Redux \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438!","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f Context \u2192 Redux"},{"location":"questions/react/hoc/","text":"Higher-Order Components (HOC) \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 higher-order components (HOC) \u0432 React, \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Higher-Order Component (HOC) \u2014 \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e. \u042d\u0442\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f // \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HOC function withEnhancement(WrappedComponent) { return function EnhancedComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 const enhancedProps = { ...props, additionalProp: 'some value' }; return <WrappedComponent {...enhancedProps} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const Button = ({ text, additionalProp }) => ( <button>{text} - {additionalProp}</button> ); const EnhancedButton = withEnhancement(Button); // \u0420\u0435\u043d\u0434\u0435\u0440 <EnhancedButton text=\"Click me\" /> \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b HOC 1. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f import React from 'react'; import { useNavigate } from 'react-router-dom'; // HOC \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 function withAuth(WrappedComponent) { return function AuthenticatedComponent(props) { const navigate = useNavigate(); const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { const checkAuth = async () => { try { const token = localStorage.getItem('authToken'); if (!token) { navigate('/login'); return; } const response = await fetch('/api/me', { headers: { Authorization: `Bearer ${token}` } }); if (!response.ok) { navigate('/login'); return; } const userData = await response.json(); setUser(userData); } catch (error) { console.error('Auth check failed:', error); navigate('/login'); } finally { setLoading(false); } }; checkAuth(); }, [navigate]); if (loading) { return <div>Checking authentication...</div>; } if (!user) { return null; // \u0411\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d } return <WrappedComponent {...props} user={user} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function Dashboard({ user }) { return ( <div> <h1>Welcome, {user.name}!</h1> <p>This is your dashboard</p> </div> ); } const AuthenticatedDashboard = withAuth(Dashboard); // \u0412 \u0440\u043e\u0443\u0442\u0435\u0440\u0435 function App() { return ( <Routes> <Route path=\"/dashboard\" element={<AuthenticatedDashboard />} /> <Route path=\"/login\" element={<Login />} /> </Routes> ); } 2. \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 // HOC \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f function withLogger(WrappedComponent, componentName) { return function LoggedComponent(props) { useEffect(() => { console.log(`Component ${componentName} mounted`); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 analytics.track('component_view', { component: componentName, timestamp: new Date().toISOString(), props: Object.keys(props) }); return () => { console.log(`Component ${componentName} unmounted`); }; }, []); // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 props useEffect(() => { console.log(`${componentName} props updated:`, props); }, [props]); return <WrappedComponent {...props} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const ProductCard = ({ product }) => ( <div> <h3>{product.name}</h3> <p>${product.price}</p> </div> ); const LoggedProductCard = withLogger(ProductCard, 'ProductCard'); 3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 // HOC \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 function withDataFetching(WrappedComponent, dataSource) { return function DataFetchingComponent(props) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { let isMounted = true; const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(dataSource); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); if (isMounted) { setData(result); } } catch (err) { if (isMounted) { setError(err.message); } } finally { if (isMounted) { setLoading(false); } } }; fetchData(); return () => { isMounted = false; }; }, []); if (loading) { return <div>Loading...</div>; } if (error) { return <div>Error: {error}</div>; } return <WrappedComponent {...props} data={data} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList({ data }) { return ( <ul> {data.map(user => ( <li key={user.id}>{user.name}</li> ))} </ul> ); } const UserListWithData = withDataFetching(UserList, '/api/users'); 4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a // HOC \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a function withErrorBoundary(WrappedComponent) { class ErrorBoundaryHOC extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('Error caught by HOC:', error, errorInfo); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 if (typeof window !== 'undefined' && window.Sentry) { window.Sentry.captureException(error, { contexts: { react: { componentStack: errorInfo.componentStack } } }); } } render() { if (this.state.hasError) { return ( <div className=\"error-fallback\"> <h2>Something went wrong</h2> <details> {this.state.error && this.state.error.toString()} </details> <button onClick={() => window.location.reload()}> Reload Page </button> </div> ); } return <WrappedComponent {...this.props} />; } } // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c displayName \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 ErrorBoundaryHOC.displayName = `withErrorBoundary(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`; return ErrorBoundaryHOC; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const RiskyComponent = () => { const [shouldError, setShouldError] = useState(false); if (shouldError) { throw new Error('This is a test error'); } return ( <div> <p>This component might throw an error</p> <button onClick={() => setShouldError(true)}> Trigger Error </button> </div> ); }; const SafeRiskyComponent = withErrorBoundary(RiskyComponent); \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b HOC 1. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0435 HOC // HOC \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 function withRetry(config = {}) { const { maxRetries = 3, retryDelay = 1000, exponentialBackoff = true } = config; return function(WrappedComponent) { return function RetryComponent(props) { const [retryCount, setRetryCount] = useState(0); const [error, setError] = useState(null); const handleError = useCallback((error) => { if (retryCount < maxRetries) { const delay = exponentialBackoff ? retryDelay * Math.pow(2, retryCount) : retryDelay; setTimeout(() => { setRetryCount(prev => prev + 1); setError(null); }, delay); } else { setError(error); } }, [retryCount]); const retryProps = { ...props, onError: handleError, retryCount, isRetrying: retryCount > 0 && !error }; if (error && retryCount >= maxRetries) { return ( <div> <p>Failed after {maxRetries} retries</p> <button onClick={() => { setRetryCount(0); setError(null); }}> Try Again </button> </div> ); } return <WrappedComponent {...retryProps} />; }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 const withAggressiveRetry = withRetry({ maxRetries: 5, retryDelay: 500, exponentialBackoff: true }); const ReliableComponent = withAggressiveRetry(MyComponent); 2. \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f HOC // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 HOC function compose(...hocs) { return function(WrappedComponent) { return hocs.reduceRight((acc, hoc) => hoc(acc), WrappedComponent); }; } // \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 import { compose } from 'redux'; // \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 HOC const EnhancedComponent = compose( withAuth, withLogger, withErrorBoundary, withDataFetching('/api/data') )(BaseComponent); // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 const EnhancedComponent = withAuth( withLogger( withErrorBoundary( withDataFetching(BaseComponent, '/api/data') ) ) ); 3. HOC \u0441 \u0440\u0435\u043d\u0434\u0435\u0440-\u043f\u0440\u043e\u043f\u0441\u0430\u043c\u0438 // \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: HOC + render props function withMousePosition(WrappedComponent) { return function MouseTrackingComponent(props) { const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); useEffect(() => { const handleMouseMove = (event) => { setMousePosition({ x: event.clientX, y: event.clientY }); }; document.addEventListener('mousemove', handleMouseMove); return () => { document.removeEventListener('mousemove', handleMouseMove); }; }, []); return ( <WrappedComponent {...props} mousePosition={mousePosition} renderMouseInfo={({ x, y }) => ( <div>Mouse: ({x}, {y})</div> )} /> ); }; } \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f HOC // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 HOC \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 function withMemoization(WrappedComponent) { const MemoizedComponent = React.memo(WrappedComponent); return function MemoizedHOCComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 HOC const enhancedProps = useMemo(() => ({ ...props, timestamp: Date.now() }), [props]); return <MemoizedComponent {...enhancedProps} />; }; } // HOC \u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c function withCustomMemo(areEqual) { return function(WrappedComponent) { const MemoizedComponent = React.memo(WrappedComponent, areEqual); return function CustomMemoHOC(props) { return <MemoizedComponent {...props} />; }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const withShallowMemo = withCustomMemo((prevProps, nextProps) => { return Object.keys(prevProps).every(key => prevProps[key] === nextProps[key] ); }); \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b HOC \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c React Custom Hooks (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434) // \u0412\u043c\u0435\u0441\u0442\u043e HOC \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 custom hooks function useAuth() { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const navigate = useNavigate(); useEffect(() => { const checkAuth = async () => { // \u041b\u043e\u0433\u0438\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 setLoading(false); }; checkAuth(); }, []); return { user, loading, isAuthenticated: !!user }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function Dashboard() { const { user, loading, isAuthenticated } = useAuth(); if (loading) return <div>Loading...</div>; if (!isAuthenticated) return <Navigate to=\"/login\" />; return <div>Welcome, {user.name}!</div>; } Render Props // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 HOC \u0447\u0435\u0440\u0435\u0437 render props function DataFetcher({ url, children }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { // \u041b\u043e\u0433\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 }, [url]); return children({ data, loading, error }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList() { return ( <DataFetcher url=\"/api/users\"> {({ data, loading, error }) => { if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return ( <ul> {data.map(user => <li key={user.id}>{user.name}</li>)} </ul> ); }} </DataFetcher> ); } \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 1. \u0421\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0447\u0435\u0442\u043a\u043e\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 function withAuthentication(WrappedComponent) { const WithAuthenticationComponent = (props) => { // \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} />; }; // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 displayName \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 WithAuthenticationComponent.displayName = `withAuthentication(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`; // \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 return hoistNonReactStatics(WithAuthenticationComponent, WrappedComponent); } 2. \u041f\u0440\u043e\u0431\u0440\u043e\u0441 refs import { forwardRef } from 'react'; function withForwardedRef(WrappedComponent) { const WithRefComponent = forwardRef((props, ref) => { return <WrappedComponent {...props} forwardedRef={ref} />; }); WithRefComponent.displayName = `withForwardedRef(${WrappedComponent.displayName || WrappedComponent.name})`; return WithRefComponent; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const EnhancedInput = withForwardedRef(Input); function Parent() { const inputRef = useRef(); return <EnhancedInput ref={inputRef} />; } 3. \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441 TypeScript // \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 HOC interface WithLoadingProps { loading?: boolean; } function withLoading<P extends object>( WrappedComponent: React.ComponentType<P> ): React.ComponentType<P & WithLoadingProps> { return function WithLoadingComponent(props: P & WithLoadingProps) { const { loading, ...restProps } = props; if (loading) { return <div>Loading...</div>; } return <WrappedComponent {...(restProps as P)} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 interface ButtonProps { text: string; onClick: () => void; } const Button: React.FC<ButtonProps> = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const LoadableButton = withLoading(Button); // \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <LoadableButton text=\"Click me\" onClick={() => {}} loading={false} /> \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HOC import { render, screen } from '@testing-library/react'; describe('withAuth HOC', () => { it('redirects to login when user is not authenticated', () => { const TestComponent = () => <div>Protected Content</div>; const AuthenticatedComponent = withAuth(TestComponent); // Mock localStorage to return no token jest.spyOn(Storage.prototype, 'getItem').mockReturnValue(null); const mockNavigate = jest.fn(); jest.mock('react-router-dom', () => ({ useNavigate: () => mockNavigate })); render(<AuthenticatedComponent />); expect(mockNavigate).toHaveBeenCalledWith('/login'); }); it('renders component when user is authenticated', async () => { const TestComponent = ({ user }) => <div>Hello, {user.name}</div>; const AuthenticatedComponent = withAuth(TestComponent); // Mock successful auth global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ name: 'John' }) }); render(<AuthenticatedComponent />); expect(await screen.findByText('Hello, John')).toBeInTheDocument(); }); }); \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c HOC \u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u0434\u043b\u044f HOC: Legacy code - \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 class components Cross-cutting concerns - \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u043e\u0448\u0438\u0431\u043a\u0438 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f - \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 class \u043a hooks \u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 HOC \u043a\u043e\u0433\u0434\u0430: \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 - \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c custom hooks \u041e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 - \u043b\u043e\u0433\u0438\u043a\u0430 \u043d\u0443\u0436\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f - \u043c\u043d\u043e\u0433\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 HOC \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \"wrapper hell\" Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 custom hooks \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 HOC \u0434\u043b\u044f cross-cutting concerns \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 legacy \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u043c\u0435\u043d\u0443\u0439\u0442\u0435 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435 displayName \u041a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e hoist-non-react-statics \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 HOC \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 wrapped \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 - \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 2-3 HOC \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 props \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 HOC \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Context API vs Redux useEffect \u0438 Side Effects Currying \u0432 JavaScript \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java","title":"Higher-Order Components (HOC)"},{"location":"questions/react/hoc/#higher-order-components-hoc","text":"","title":"Higher-Order Components (HOC)"},{"location":"questions/react/hoc/#_1","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 higher-order components (HOC) \u0432 React, \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/hoc/#_2","text":"Higher-Order Component (HOC) \u2014 \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e. \u042d\u0442\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/hoc/#_3","text":"// \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HOC function withEnhancement(WrappedComponent) { return function EnhancedComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 const enhancedProps = { ...props, additionalProp: 'some value' }; return <WrappedComponent {...enhancedProps} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const Button = ({ text, additionalProp }) => ( <button>{text} - {additionalProp}</button> ); const EnhancedButton = withEnhancement(Button); // \u0420\u0435\u043d\u0434\u0435\u0440 <EnhancedButton text=\"Click me\" />","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f"},{"location":"questions/react/hoc/#hoc","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b HOC"},{"location":"questions/react/hoc/#1","text":"import React from 'react'; import { useNavigate } from 'react-router-dom'; // HOC \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 function withAuth(WrappedComponent) { return function AuthenticatedComponent(props) { const navigate = useNavigate(); const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { const checkAuth = async () => { try { const token = localStorage.getItem('authToken'); if (!token) { navigate('/login'); return; } const response = await fetch('/api/me', { headers: { Authorization: `Bearer ${token}` } }); if (!response.ok) { navigate('/login'); return; } const userData = await response.json(); setUser(userData); } catch (error) { console.error('Auth check failed:', error); navigate('/login'); } finally { setLoading(false); } }; checkAuth(); }, [navigate]); if (loading) { return <div>Checking authentication...</div>; } if (!user) { return null; // \u0411\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d } return <WrappedComponent {...props} user={user} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function Dashboard({ user }) { return ( <div> <h1>Welcome, {user.name}!</h1> <p>This is your dashboard</p> </div> ); } const AuthenticatedDashboard = withAuth(Dashboard); // \u0412 \u0440\u043e\u0443\u0442\u0435\u0440\u0435 function App() { return ( <Routes> <Route path=\"/dashboard\" element={<AuthenticatedDashboard />} /> <Route path=\"/login\" element={<Login />} /> </Routes> ); }","title":"1. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"questions/react/hoc/#2","text":"// HOC \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f function withLogger(WrappedComponent, componentName) { return function LoggedComponent(props) { useEffect(() => { console.log(`Component ${componentName} mounted`); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 analytics.track('component_view', { component: componentName, timestamp: new Date().toISOString(), props: Object.keys(props) }); return () => { console.log(`Component ${componentName} unmounted`); }; }, []); // \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 props useEffect(() => { console.log(`${componentName} props updated:`, props); }, [props]); return <WrappedComponent {...props} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const ProductCard = ({ product }) => ( <div> <h3>{product.name}</h3> <p>${product.price}</p> </div> ); const LoggedProductCard = withLogger(ProductCard, 'ProductCard');","title":"2. \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"},{"location":"questions/react/hoc/#3","text":"// HOC \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 function withDataFetching(WrappedComponent, dataSource) { return function DataFetchingComponent(props) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { let isMounted = true; const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(dataSource); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); if (isMounted) { setData(result); } } catch (err) { if (isMounted) { setError(err.message); } } finally { if (isMounted) { setLoading(false); } } }; fetchData(); return () => { isMounted = false; }; }, []); if (loading) { return <div>Loading...</div>; } if (error) { return <div>Error: {error}</div>; } return <WrappedComponent {...props} data={data} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList({ data }) { return ( <ul> {data.map(user => ( <li key={user.id}>{user.name}</li> ))} </ul> ); } const UserListWithData = withDataFetching(UserList, '/api/users');","title":"3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/react/hoc/#4","text":"// HOC \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a function withErrorBoundary(WrappedComponent) { class ErrorBoundaryHOC extends React.Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('Error caught by HOC:', error, errorInfo); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 if (typeof window !== 'undefined' && window.Sentry) { window.Sentry.captureException(error, { contexts: { react: { componentStack: errorInfo.componentStack } } }); } } render() { if (this.state.hasError) { return ( <div className=\"error-fallback\"> <h2>Something went wrong</h2> <details> {this.state.error && this.state.error.toString()} </details> <button onClick={() => window.location.reload()}> Reload Page </button> </div> ); } return <WrappedComponent {...this.props} />; } } // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c displayName \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 ErrorBoundaryHOC.displayName = `withErrorBoundary(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`; return ErrorBoundaryHOC; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const RiskyComponent = () => { const [shouldError, setShouldError] = useState(false); if (shouldError) { throw new Error('This is a test error'); } return ( <div> <p>This component might throw an error</p> <button onClick={() => setShouldError(true)}> Trigger Error </button> </div> ); }; const SafeRiskyComponent = withErrorBoundary(RiskyComponent);","title":"4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a"},{"location":"questions/react/hoc/#hoc_1","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b HOC"},{"location":"questions/react/hoc/#1-hoc","text":"// HOC \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 function withRetry(config = {}) { const { maxRetries = 3, retryDelay = 1000, exponentialBackoff = true } = config; return function(WrappedComponent) { return function RetryComponent(props) { const [retryCount, setRetryCount] = useState(0); const [error, setError] = useState(null); const handleError = useCallback((error) => { if (retryCount < maxRetries) { const delay = exponentialBackoff ? retryDelay * Math.pow(2, retryCount) : retryDelay; setTimeout(() => { setRetryCount(prev => prev + 1); setError(null); }, delay); } else { setError(error); } }, [retryCount]); const retryProps = { ...props, onError: handleError, retryCount, isRetrying: retryCount > 0 && !error }; if (error && retryCount >= maxRetries) { return ( <div> <p>Failed after {maxRetries} retries</p> <button onClick={() => { setRetryCount(0); setError(null); }}> Try Again </button> </div> ); } return <WrappedComponent {...retryProps} />; }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 const withAggressiveRetry = withRetry({ maxRetries: 5, retryDelay: 500, exponentialBackoff: true }); const ReliableComponent = withAggressiveRetry(MyComponent);","title":"1. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0435 HOC"},{"location":"questions/react/hoc/#2-hoc","text":"// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 HOC function compose(...hocs) { return function(WrappedComponent) { return hocs.reduceRight((acc, hoc) => hoc(acc), WrappedComponent); }; } // \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 import { compose } from 'redux'; // \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 HOC const EnhancedComponent = compose( withAuth, withLogger, withErrorBoundary, withDataFetching('/api/data') )(BaseComponent); // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 const EnhancedComponent = withAuth( withLogger( withErrorBoundary( withDataFetching(BaseComponent, '/api/data') ) ) );","title":"2. \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f HOC"},{"location":"questions/react/hoc/#3-hoc-","text":"// \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: HOC + render props function withMousePosition(WrappedComponent) { return function MouseTrackingComponent(props) { const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); useEffect(() => { const handleMouseMove = (event) => { setMousePosition({ x: event.clientX, y: event.clientY }); }; document.addEventListener('mousemove', handleMouseMove); return () => { document.removeEventListener('mousemove', handleMouseMove); }; }, []); return ( <WrappedComponent {...props} mousePosition={mousePosition} renderMouseInfo={({ x, y }) => ( <div>Mouse: ({x}, {y})</div> )} /> ); }; }","title":"3. HOC \u0441 \u0440\u0435\u043d\u0434\u0435\u0440-\u043f\u0440\u043e\u043f\u0441\u0430\u043c\u0438"},{"location":"questions/react/hoc/#_4","text":"","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/hoc/#hoc_2","text":"// \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 HOC \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 function withMemoization(WrappedComponent) { const MemoizedComponent = React.memo(WrappedComponent); return function MemoizedHOCComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 HOC const enhancedProps = useMemo(() => ({ ...props, timestamp: Date.now() }), [props]); return <MemoizedComponent {...enhancedProps} />; }; } // HOC \u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c function withCustomMemo(areEqual) { return function(WrappedComponent) { const MemoizedComponent = React.memo(WrappedComponent, areEqual); return function CustomMemoHOC(props) { return <MemoizedComponent {...props} />; }; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const withShallowMemo = withCustomMemo((prevProps, nextProps) => { return Object.keys(prevProps).every(key => prevProps[key] === nextProps[key] ); });","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f HOC"},{"location":"questions/react/hoc/#hoc-react","text":"","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b HOC \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c React"},{"location":"questions/react/hoc/#custom-hooks","text":"// \u0412\u043c\u0435\u0441\u0442\u043e HOC \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 custom hooks function useAuth() { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const navigate = useNavigate(); useEffect(() => { const checkAuth = async () => { // \u041b\u043e\u0433\u0438\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 setLoading(false); }; checkAuth(); }, []); return { user, loading, isAuthenticated: !!user }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function Dashboard() { const { user, loading, isAuthenticated } = useAuth(); if (loading) return <div>Loading...</div>; if (!isAuthenticated) return <Navigate to=\"/login\" />; return <div>Welcome, {user.name}!</div>; }","title":"Custom Hooks (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434)"},{"location":"questions/react/hoc/#render-props","text":"// \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 HOC \u0447\u0435\u0440\u0435\u0437 render props function DataFetcher({ url, children }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { // \u041b\u043e\u0433\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 }, [url]); return children({ data, loading, error }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList() { return ( <DataFetcher url=\"/api/users\"> {({ data, loading, error }) => { if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return ( <ul> {data.map(user => <li key={user.id}>{user.name}</li>)} </ul> ); }} </DataFetcher> ); }","title":"Render Props"},{"location":"questions/react/hoc/#_5","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/react/hoc/#1_1","text":"// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0447\u0435\u0442\u043a\u043e\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 function withAuthentication(WrappedComponent) { const WithAuthenticationComponent = (props) => { // \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} />; }; // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 displayName \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 WithAuthenticationComponent.displayName = `withAuthentication(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`; // \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 return hoistNonReactStatics(WithAuthenticationComponent, WrappedComponent); }","title":"1. \u0421\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"questions/react/hoc/#2-refs","text":"import { forwardRef } from 'react'; function withForwardedRef(WrappedComponent) { const WithRefComponent = forwardRef((props, ref) => { return <WrappedComponent {...props} forwardedRef={ref} />; }); WithRefComponent.displayName = `withForwardedRef(${WrappedComponent.displayName || WrappedComponent.name})`; return WithRefComponent; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const EnhancedInput = withForwardedRef(Input); function Parent() { const inputRef = useRef(); return <EnhancedInput ref={inputRef} />; }","title":"2. \u041f\u0440\u043e\u0431\u0440\u043e\u0441 refs"},{"location":"questions/react/hoc/#3-typescript","text":"// \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 HOC interface WithLoadingProps { loading?: boolean; } function withLoading<P extends object>( WrappedComponent: React.ComponentType<P> ): React.ComponentType<P & WithLoadingProps> { return function WithLoadingComponent(props: P & WithLoadingProps) { const { loading, ...restProps } = props; if (loading) { return <div>Loading...</div>; } return <WrappedComponent {...(restProps as P)} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 interface ButtonProps { text: string; onClick: () => void; } const Button: React.FC<ButtonProps> = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const LoadableButton = withLoading(Button); // \u0422\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <LoadableButton text=\"Click me\" onClick={() => {}} loading={false} />","title":"3. \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441 TypeScript"},{"location":"questions/react/hoc/#hoc_3","text":"import { render, screen } from '@testing-library/react'; describe('withAuth HOC', () => { it('redirects to login when user is not authenticated', () => { const TestComponent = () => <div>Protected Content</div>; const AuthenticatedComponent = withAuth(TestComponent); // Mock localStorage to return no token jest.spyOn(Storage.prototype, 'getItem').mockReturnValue(null); const mockNavigate = jest.fn(); jest.mock('react-router-dom', () => ({ useNavigate: () => mockNavigate })); render(<AuthenticatedComponent />); expect(mockNavigate).toHaveBeenCalledWith('/login'); }); it('renders component when user is authenticated', async () => { const TestComponent = ({ user }) => <div>Hello, {user.name}</div>; const AuthenticatedComponent = withAuth(TestComponent); // Mock successful auth global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ name: 'John' }) }); render(<AuthenticatedComponent />); expect(await screen.findByText('Hello, John')).toBeInTheDocument(); }); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HOC"},{"location":"questions/react/hoc/#hoc_4","text":"","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c HOC"},{"location":"questions/react/hoc/#hoc_5","text":"Legacy code - \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 class components Cross-cutting concerns - \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u043e\u0448\u0438\u0431\u043a\u0438 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f - \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 class \u043a hooks","title":"\u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u0434\u043b\u044f HOC:"},{"location":"questions/react/hoc/#hoc_6","text":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 - \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c custom hooks \u041e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 - \u043b\u043e\u0433\u0438\u043a\u0430 \u043d\u0443\u0436\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f - \u043c\u043d\u043e\u0433\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 HOC \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \"wrapper hell\"","title":"\u274c \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 HOC \u043a\u043e\u0433\u0434\u0430:"},{"location":"questions/react/hoc/#senior-","text":"\u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 custom hooks \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 HOC \u0434\u043b\u044f cross-cutting concerns \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 legacy \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u043c\u0435\u043d\u0443\u0439\u0442\u0435 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435 displayName \u041a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e hoist-non-react-statics \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 HOC \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 wrapped \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 - \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 2-3 HOC \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 props \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 HOC","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/hoc/#_6","text":"Context API vs Redux useEffect \u0438 Side Effects Currying \u0432 JavaScript \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 JS \u0438 Java","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/hoc_small/","text":"Higher-Order Components - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f HOC = \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e function withEnhancement(WrappedComponent) { return function EnhancedComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} additionalProp=\"value\" />; }; } \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b 1. Authentication function withAuth(WrappedComponent) { return function AuthComponent(props) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const navigate = useNavigate(); useEffect(() => { const checkAuth = async () => { const token = localStorage.getItem('token'); if (!token) { navigate('/login'); return; } const user = await fetchUser(token); if (!user) navigate('/login'); else setUser(user); setLoading(false); }; checkAuth(); }, []); if (loading) return <div>Loading...</div>; if (!user) return null; return <WrappedComponent {...props} user={user} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const ProtectedDashboard = withAuth(Dashboard); 2. Data Fetching function withDataFetching(url) { return function(WrappedComponent) { return function DataComponent(props) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { let mounted = true; fetch(url) .then(r => r.json()) .then(data => mounted && setData(data)) .catch(err => mounted && setError(err)) .finally(() => mounted && setLoading(false)); return () => { mounted = false; }; }, []); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error.message}</div>; return <WrappedComponent {...props} data={data} />; }; }; } const UsersWithData = withDataFetching('/api/users')(UserList); 3. Error Boundary function withErrorBoundary(WrappedComponent) { class ErrorBoundary extends Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('HOC Error:', error, errorInfo); } render() { if (this.state.hasError) { return ( <div> <h2>Something went wrong</h2> <button onClick={() => window.location.reload()}> Reload </button> </div> ); } return <WrappedComponent {...this.props} />; } } return ErrorBoundary; } 4. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0439 HOC function withRetry(config = {}) { const { maxRetries = 3, delay = 1000 } = config; return function(WrappedComponent) { return function RetryComponent(props) { const [retryCount, setRetryCount] = useState(0); const [error, setError] = useState(null); const retry = () => { if (retryCount < maxRetries) { setTimeout(() => { setRetryCount(prev => prev + 1); setError(null); }, delay); } }; return <WrappedComponent {...props} onError={setError} retry={retry} />; }; }; } const ReliableComponent = withRetry({ maxRetries: 5 })(MyComponent); \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f HOC // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 function compose(...hocs) { return (WrappedComponent) => hocs.reduceRight((acc, hoc) => hoc(acc), WrappedComponent); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const EnhancedComponent = compose( withAuth, withErrorBoundary, withDataFetching('/api/data') )(BaseComponent); // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e const Enhanced = withAuth(withErrorBoundary(withDataFetching(Base, '/api/data'))); Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function withMemo(WrappedComponent) { const MemoComponent = React.memo(WrappedComponent); return function MemoizedHOC(props) { const enhancedProps = useMemo(() => ({ ...props, timestamp: Date.now() }), [props]); return <MemoComponent {...enhancedProps} />; }; } Forward Refs function withForwardRef(WrappedComponent) { const WithRefComponent = forwardRef((props, ref) => { return <WrappedComponent {...props} forwardedRef={ref} />; }); WithRefComponent.displayName = `withForwardRef(${WrappedComponent.name})`; return WithRefComponent; } TypeScript \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f interface WithLoadingProps { loading?: boolean; } function withLoading<P extends object>( WrappedComponent: React.ComponentType<P> ): React.ComponentType<P & WithLoadingProps> { return function WithLoadingComponent(props: P & WithLoadingProps) { const { loading, ...restProps } = props; if (loading) return <div>Loading...</div>; return <WrappedComponent {...(restProps as P)} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 interface ButtonProps { text: string; onClick: () => void; } const Button: React.FC<ButtonProps> = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const LoadableButton = withLoading(Button); \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b Custom Hooks (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e) // \u0412\u043c\u0435\u0441\u0442\u043e withAuth HOC function useAuth() { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { checkAuth().then(setUser).finally(() => setLoading(false)); }, []); return { user, loading, isAuthenticated: !!user }; } // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function Dashboard() { const { user, loading, isAuthenticated } = useAuth(); if (loading) return <div>Loading...</div>; if (!isAuthenticated) return <Navigate to=\"/login\" />; return <div>Welcome {user.name}</div>; } Render Props function DataFetcher({ url, children }) { const [data, loading, error] = useFetch(url); return children({ data, loading, error }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <DataFetcher url=\"/api/users\"> {({ data, loading, error }) => { if (loading) return <div>Loading...</div>; if (error) return <div>Error</div>; return <UserList users={data} />; }} </DataFetcher> \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 DisplayName \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b function withLogger(WrappedComponent) { function LoggerComponent(props) { // \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} />; } // \u0414\u043b\u044f React DevTools LoggerComponent.displayName = `withLogger(${WrappedComponent.displayName || WrappedComponent.name})`; // \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 return hoistNonReactStatics(LoggerComponent, WrappedComponent); } \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 describe('withAuth', () => { it('redirects when not authenticated', () => { const TestComponent = () => <div>Protected</div>; const Protected = withAuth(TestComponent); // Mock no token localStorage.getItem = jest.fn(() => null); const mockNavigate = jest.fn(); render(<Protected />); expect(mockNavigate).toHaveBeenCalledWith('/login'); }); }); \u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f HOC Legacy class components \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cross-cutting concerns (\u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430) \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0441 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u274c \u041b\u0443\u0447\u0448\u0435 hooks \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u041e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 React 16.8+ \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f Senior Rules Hooks > HOC \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 displayName always - \u0434\u043b\u044f debugging hoistNonReactStatics \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Forward refs \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e Compose pattern \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 HOC \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 wrapped \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 TypeScript generics \u0434\u043b\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 2-3 HOC \u0432 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 Anti-patterns // \u274c \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 HOC \u0432\u043d\u0443\u0442\u0440\u0438 render function Parent() { const EnhancedChild = withLoading(Child); // \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440! return <EnhancedChild />; } // \u274c \u041c\u0443\u0442\u0430\u0446\u0438\u044f \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 function badHOC(WrappedComponent) { WrappedComponent.prototype.componentDidMount = function() {}; // \u041c\u0443\u0442\u0430\u0446\u0438\u044f! return WrappedComponent; } // \u274c \u041d\u0435 \u043f\u0440\u043e\u0431\u0440\u043e\u0441 props function withoutProps(WrappedComponent) { return (props) => <WrappedComponent />; // props \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u044b! } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : HOC - legacy pattern. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 hooks \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, HOC \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438 cross-cutting concerns!","title":"Higher-Order Components - Senior Cheat Sheet (small)"},{"location":"questions/react/hoc_small/#higher-order-components-senior-cheat-sheet-small","text":"","title":"Higher-Order Components - Senior Cheat Sheet (small)"},{"location":"questions/react/hoc_small/#_1","text":"HOC = \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e function withEnhancement(WrappedComponent) { return function EnhancedComponent(props) { // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} additionalProp=\"value\" />; }; }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f"},{"location":"questions/react/hoc_small/#_2","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/react/hoc_small/#1-authentication","text":"function withAuth(WrappedComponent) { return function AuthComponent(props) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); const navigate = useNavigate(); useEffect(() => { const checkAuth = async () => { const token = localStorage.getItem('token'); if (!token) { navigate('/login'); return; } const user = await fetchUser(token); if (!user) navigate('/login'); else setUser(user); setLoading(false); }; checkAuth(); }, []); if (loading) return <div>Loading...</div>; if (!user) return null; return <WrappedComponent {...props} user={user} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const ProtectedDashboard = withAuth(Dashboard);","title":"1. Authentication"},{"location":"questions/react/hoc_small/#2-data-fetching","text":"function withDataFetching(url) { return function(WrappedComponent) { return function DataComponent(props) { const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { let mounted = true; fetch(url) .then(r => r.json()) .then(data => mounted && setData(data)) .catch(err => mounted && setError(err)) .finally(() => mounted && setLoading(false)); return () => { mounted = false; }; }, []); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error.message}</div>; return <WrappedComponent {...props} data={data} />; }; }; } const UsersWithData = withDataFetching('/api/users')(UserList);","title":"2. Data Fetching"},{"location":"questions/react/hoc_small/#3-error-boundary","text":"function withErrorBoundary(WrappedComponent) { class ErrorBoundary extends Component { constructor(props) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error) { return { hasError: true, error }; } componentDidCatch(error, errorInfo) { console.error('HOC Error:', error, errorInfo); } render() { if (this.state.hasError) { return ( <div> <h2>Something went wrong</h2> <button onClick={() => window.location.reload()}> Reload </button> </div> ); } return <WrappedComponent {...this.props} />; } } return ErrorBoundary; }","title":"3. Error Boundary"},{"location":"questions/react/hoc_small/#4-hoc","text":"function withRetry(config = {}) { const { maxRetries = 3, delay = 1000 } = config; return function(WrappedComponent) { return function RetryComponent(props) { const [retryCount, setRetryCount] = useState(0); const [error, setError] = useState(null); const retry = () => { if (retryCount < maxRetries) { setTimeout(() => { setRetryCount(prev => prev + 1); setError(null); }, delay); } }; return <WrappedComponent {...props} onError={setError} retry={retry} />; }; }; } const ReliableComponent = withRetry({ maxRetries: 5 })(MyComponent);","title":"4. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0439 HOC"},{"location":"questions/react/hoc_small/#hoc","text":"// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 function compose(...hocs) { return (WrappedComponent) => hocs.reduceRight((acc, hoc) => hoc(acc), WrappedComponent); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const EnhancedComponent = compose( withAuth, withErrorBoundary, withDataFetching('/api/data') )(BaseComponent); // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e const Enhanced = withAuth(withErrorBoundary(withDataFetching(Base, '/api/data')));","title":"\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f HOC"},{"location":"questions/react/hoc_small/#performance","text":"","title":"Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/hoc_small/#_3","text":"function withMemo(WrappedComponent) { const MemoComponent = React.memo(WrappedComponent); return function MemoizedHOC(props) { const enhancedProps = useMemo(() => ({ ...props, timestamp: Date.now() }), [props]); return <MemoComponent {...enhancedProps} />; }; }","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/hoc_small/#forward-refs","text":"function withForwardRef(WrappedComponent) { const WithRefComponent = forwardRef((props, ref) => { return <WrappedComponent {...props} forwardedRef={ref} />; }); WithRefComponent.displayName = `withForwardRef(${WrappedComponent.name})`; return WithRefComponent; }","title":"Forward Refs"},{"location":"questions/react/hoc_small/#typescript","text":"interface WithLoadingProps { loading?: boolean; } function withLoading<P extends object>( WrappedComponent: React.ComponentType<P> ): React.ComponentType<P & WithLoadingProps> { return function WithLoadingComponent(props: P & WithLoadingProps) { const { loading, ...restProps } = props; if (loading) return <div>Loading...</div>; return <WrappedComponent {...(restProps as P)} />; }; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 interface ButtonProps { text: string; onClick: () => void; } const Button: React.FC<ButtonProps> = ({ text, onClick }) => ( <button onClick={onClick}>{text}</button> ); const LoadableButton = withLoading(Button);","title":"TypeScript \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/hoc_small/#_4","text":"","title":"\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b"},{"location":"questions/react/hoc_small/#custom-hooks","text":"// \u0412\u043c\u0435\u0441\u0442\u043e withAuth HOC function useAuth() { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { checkAuth().then(setUser).finally(() => setLoading(false)); }, []); return { user, loading, isAuthenticated: !!user }; } // \u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function Dashboard() { const { user, loading, isAuthenticated } = useAuth(); if (loading) return <div>Loading...</div>; if (!isAuthenticated) return <Navigate to=\"/login\" />; return <div>Welcome {user.name}</div>; }","title":"Custom Hooks (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e)"},{"location":"questions/react/hoc_small/#render-props","text":"function DataFetcher({ url, children }) { const [data, loading, error] = useFetch(url); return children({ data, loading, error }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <DataFetcher url=\"/api/users\"> {({ data, loading, error }) => { if (loading) return <div>Loading...</div>; if (error) return <div>Error</div>; return <UserList users={data} />; }} </DataFetcher>","title":"Render Props"},{"location":"questions/react/hoc_small/#_5","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/react/hoc_small/#displayname","text":"function withLogger(WrappedComponent) { function LoggerComponent(props) { // \u043b\u043e\u0433\u0438\u043a\u0430 return <WrappedComponent {...props} />; } // \u0414\u043b\u044f React DevTools LoggerComponent.displayName = `withLogger(${WrappedComponent.displayName || WrappedComponent.name})`; // \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 return hoistNonReactStatics(LoggerComponent, WrappedComponent); }","title":"DisplayName \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b"},{"location":"questions/react/hoc_small/#_6","text":"describe('withAuth', () => { it('redirects when not authenticated', () => { const TestComponent = () => <div>Protected</div>; const Protected = withAuth(TestComponent); // Mock no token localStorage.getItem = jest.fn(() => null); const mockNavigate = jest.fn(); render(<Protected />); expect(mockNavigate).toHaveBeenCalledWith('/login'); }); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/hoc_small/#_7","text":"","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/react/hoc_small/#hoc_1","text":"Legacy class components \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cross-cutting concerns (\u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430) \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0441 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","title":"\u2705 \u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f HOC"},{"location":"questions/react/hoc_small/#hooks","text":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u041e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 React 16.8+ \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"\u274c \u041b\u0443\u0447\u0448\u0435 hooks"},{"location":"questions/react/hoc_small/#senior-rules","text":"Hooks > HOC \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 displayName always - \u0434\u043b\u044f debugging hoistNonReactStatics \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Forward refs \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e Compose pattern \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 HOC \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 wrapped \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 TypeScript generics \u0434\u043b\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 2-3 HOC \u0432 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438","title":"Senior Rules"},{"location":"questions/react/hoc_small/#anti-patterns","text":"// \u274c \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 HOC \u0432\u043d\u0443\u0442\u0440\u0438 render function Parent() { const EnhancedChild = withLoading(Child); // \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440! return <EnhancedChild />; } // \u274c \u041c\u0443\u0442\u0430\u0446\u0438\u044f \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 function badHOC(WrappedComponent) { WrappedComponent.prototype.componentDidMount = function() {}; // \u041c\u0443\u0442\u0430\u0446\u0438\u044f! return WrappedComponent; } // \u274c \u041d\u0435 \u043f\u0440\u043e\u0431\u0440\u043e\u0441 props function withoutProps(WrappedComponent) { return (props) => <WrappedComponent />; // props \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u044b! } \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : HOC - legacy pattern. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 hooks \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, HOC \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438 cross-cutting concerns!","title":"Anti-patterns"},{"location":"questions/react/reconciliation/","text":"Reconciliation \u0438 Virtual DOM \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 reconciliation \u0432 React \u0438 \u0435\u0433\u043e \u0441\u0432\u044f\u0437\u044c \u0441 Virtual DOM. \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 Reconciliation \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c React \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 DOM, \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044f \u043d\u043e\u0432\u043e\u0435 Virtual DOM \u0434\u0435\u0440\u0435\u0432\u043e \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c. \u042d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c React. Virtual DOM - \u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f Virtual DOM \u2014 \u044d\u0442\u043e JavaScript-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e DOM, \u0445\u0440\u0430\u043d\u044f\u0449\u0435\u0435\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438. \u042d\u0442\u043e \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u0430\u044f \u043a\u043e\u043f\u0438\u044f DOM \u0434\u0435\u0440\u0435\u0432\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 JavaScript \u043e\u0431\u044a\u0435\u043a\u0442\u044b. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 Virtual DOM // JSX const element = ( <div className=\"container\"> <h1>Hello World</h1> <p>This is a paragraph</p> </div> ); // Virtual DOM \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e) const virtualElement = { type: 'div', props: { className: 'container', children: [ { type: 'h1', props: { children: 'Hello World' } }, { type: 'p', props: { children: 'This is a paragraph' } } ] } }; // React.createElement \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c const reactElement = React.createElement( 'div', { className: 'container' }, React.createElement('h1', null, 'Hello World'), React.createElement('p', null, 'This is a paragraph') ); \u041f\u0440\u043e\u0446\u0435\u0441\u0441 Reconciliation \u0424\u0430\u0437\u044b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 Render Phase - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e Virtual DOM \u0434\u0435\u0440\u0435\u0432\u0430 Reconciliation Phase - \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e\u043c (diffing) Commit Phase - \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c\u0443 DOM // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function Counter() { const [count, setCount] = useState(0); // \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 setCount(1): // 1. Render Phase: React \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 VDOM \u0434\u0435\u0440\u0435\u0432\u043e // 2. Reconciliation: \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (count: 0) \u0441 \u043d\u043e\u0432\u044b\u043c (count: 1) // 3. Commit: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c DOM return ( <div> <h1>Count: {count}</h1> <button onClick={() => setCount(count + 1)}> Increment </button> </div> ); } Diffing Algorithm React \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 O(n) \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e O(n\u00b3). \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b diffing // 1. \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 // \u0421\u0442\u0430\u0440\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e <div> <Counter /> </div> // \u041d\u043e\u0432\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e <span> <Counter /> </span> // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Counter \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043d\u043e\u0432\u043e // 2. \u041e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props // \u0421\u0442\u0430\u0440\u043e\u0435 <div className=\"old\" title=\"Old Title\"> Content </div> // \u041d\u043e\u0432\u043e\u0435 <div className=\"new\" title=\"New Title\"> Content </div> // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e className \u0438 title // 3. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props \u0438 state \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f function App() { const [show, setShow] = useState(true); return ( <div> {show ? ( <Counter start={0} /> // State \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 props ) : ( <span>Hidden</span> )} </div> ); } \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u043a\u043b\u044e\u0447\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u0435\u0437 \u043a\u043b\u044e\u0447\u0435\u0439 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <li>{todo.text}</li> // React \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 ))} </ul> ); } // \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e: // [todo1, todo2] -> [newTodo, todo1, todo2] // React \u0434\u0443\u043c\u0430\u0435\u0442 \u0447\u0442\u043e: // - \u043f\u0435\u0440\u0432\u044b\u0439 li \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0441 todo1 \u043d\u0430 newTodo // - \u0432\u0442\u043e\u0440\u043e\u0439 li \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0441 todo2 \u043d\u0430 todo1 // - \u0442\u0440\u0435\u0442\u0438\u0439 li \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u0441 todo2 // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 2 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f + 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432\u043c\u0435\u0441\u0442\u043e 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <li key={todo.id}>{todo.text}</li> ))} </ul> ); } // \u0421 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 React \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442: // - \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 key=\"newTodo.id\" \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d // - \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441 key=\"todo1.id\" \u0438 key=\"todo2.id\" \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430 Fiber Architecture (React 16+) \u0412 React 16 \u0431\u044b\u043b \u0432\u0432\u0435\u0434\u0435\u043d Fiber \u2014 \u043d\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 reconciliation, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Fiber // \u0414\u043e Fiber (Stack Reconciler) function heavyComponent() { // \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f const result = []; for (let i = 0; i < 100000; i++) { result.push(<div key={i}>Item {i}</div>); } return result; // \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 main thread \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f } // \u0421 Fiber function optimizedComponent() { const [items, setItems] = useState([]); useEffect(() => { // Fiber \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 const result = []; for (let i = 0; i < 100000; i++) { result.push(<div key={i}>Item {i}</div>); } setItems(result); }, []); return items; } Units of Work // Fiber \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430 units of work const fiberNode = { type: 'div', props: { className: 'container' }, parent: parentFiber, child: firstChildFiber, sibling: nextSiblingFiber, alternate: previousVersionFiber, // \u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f effectTag: 'UPDATE', // \u0422\u0438\u043f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f // ... \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 }; // \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0432 Fiber const priorities = { IMMEDIATE: 1, // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f (click handlers) USER_BLOCKING: 2, // \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f NORMAL: 3, // \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f LOW: 4, // \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 IDLE: 5 // \u041a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 }; \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Reconciliation 1. React.memo \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 function ExpensiveChild({ data, onClick }) { console.log('ExpensiveChild render'); return ( <div onClick={onClick}> {data.map(item => ( <div key={item.id}> {/* \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 */} {processComplexData(item)} </div> ))} </div> ); } // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 const OptimizedChild = React.memo(function ExpensiveChild({ data, onClick }) { console.log('OptimizedChild render'); return ( <div onClick={onClick}> {data.map(item => ( <div key={item.id}> {processComplexData(item)} </div> ))} </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 return ( prevProps.data.length === nextProps.data.length && prevProps.onClick === nextProps.onClick ); }); 2. useMemo \u0438 useCallback function OptimizedParent({ items, filter }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => { console.log('Filtering items...'); return items.filter(item => item.category === filter); }, [items, filter]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = useCallback((id) => { console.log('Item clicked:', id); }, []); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return ( <OptimizedChild data={filteredItems} onClick={handleClick} /> ); } 3. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f // \u274c \u041f\u043b\u043e\u0445\u043e: \u0432\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 function BadExample() { const [state, setState] = useState({ count: 0, text: '', users: [], filters: {} }); // \u041b\u044e\u0431\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 const updateCount = () => setState(prev => ({ ...prev, count: prev.count + 1 })); return ( <div> <Counter count={state.count} onUpdate={updateCount} /> <UserList users={state.users} filters={state.filters} /> <TextInput value={state.text} onChange={(text) => setState(prev => ({ ...prev, text }))} /> </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function GoodExample() { const [count, setCount] = useState(0); const [text, setText] = useState(''); const [users, setUsers] = useState([]); const [filters, setFilters] = useState({}); // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 count \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 UserList \u0438 TextInput return ( <div> <Counter count={count} onUpdate={setCount} /> <UserList users={users} filters={filters} /> <TextInput value={text} onChange={setText} /> </div> ); } \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b function HugeList({ items }) { return ( <div> {items.map((item, index) => ( <div key={item.id} style={{ height: 50 }}> {item.name} </div> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].name} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); } \u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 import { Suspense, lazy } from 'react'; // \u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 const HeavyComponent = lazy(() => import('./HeavyComponent')); function App() { const [showHeavy, setShowHeavy] = useState(false); return ( <div> <button onClick={() => setShowHeavy(!showHeavy)}> Toggle Heavy Component </button> {showHeavy && ( <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> )} </div> ); } \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 React DevTools Profiler // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f function ProfiledComponent() { const [count, setCount] = useState(0); // \u0414\u043e\u0440\u043e\u0433\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f const expensiveValue = useMemo(() => { console.log('Computing expensive value...'); let result = 0; for (let i = 0; i < 1000000; i++) { result += i; } return result; }, [count]); return ( <div> <p>Count: {count}</p> <p>Expensive: {expensiveValue}</p> <button onClick={() => setCount(c => c + 1)}> Increment </button> </div> ); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Profiler API import { Profiler } from 'react'; function onRenderCallback(id, phase, actualDuration, baseDuration, startTime, commitTime) { console.log('Component render info:', { id, phase, // 'mount' \u0438\u043b\u0438 'update' actualDuration, // \u0412\u0440\u0435\u043c\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 baseDuration, // \u0412\u0440\u0435\u043c\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 startTime, commitTime }); } function App() { return ( <Profiler id=\"ProfiledComponent\" onRender={onRenderCallback}> <ProfiledComponent /> </Profiler> ); } \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f 1. \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f function Parent() { const [count, setCount] = useState(0); const [text, setText] = useState(''); return ( <div> <input value={text} onChange={(e) => setText(e.target.value)} /> <button onClick={() => setCount(c => c + 1)}>Count: {count}</button> <ExpensiveChild data=\"static data\" /> {/* \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 text */} </div> ); } // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: React.memo const MemoizedChild = React.memo(ExpensiveChild); // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function Parent() { return ( <div> <TextInput /> <Counter /> <ExpensiveChild data=\"static data\" /> </div> ); } function TextInput() { const [text, setText] = useState(''); return <input value={text} onChange={(e) => setText(e.target.value)} />; } function Counter() { const [count, setCount] = useState(0); return <button onClick={() => setCount(c => c + 1)}>Count: {count}</button>; } 2. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0439 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 \u043f\u0440\u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 function TodoList({ todos }) { return ( <ul> {todos.map((todo, index) => ( <TodoItem key={index} todo={todo} /> ))} </ul> ); } // \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: // React \u0434\u0443\u043c\u0430\u0435\u0442 \u0447\u0442\u043e \u0443\u0434\u0430\u043b\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 // \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <TodoItem key={todo.id} todo={todo} /> ))} </ul> ); } // \u0414\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0431\u0435\u0437 ID \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 const todosWithKeys = todos.map((todo, index) => ({ ...todo, key: todo.id || `${todo.text}-${index}` })); Advanced Patterns Render Props \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 render prop function DataProvider({ children, render }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const fetchData = useCallback(async () => { setLoading(true); try { const result = await fetch('/api/data'); setData(await result.json()); } finally { setLoading(false); } }, []); useEffect(() => { fetchData(); }, [fetchData]); // Render prop \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 // \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 wrapper \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 return render({ data, loading, refetch: fetchData }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function App() { return ( <DataProvider render={({ data, loading, refetch }) => ( <div> {loading ? ( <div>Loading...</div> ) : ( <div> <pre>{JSON.stringify(data, null, 2)}</pre> <button onClick={refetch}>Refresh</button> </div> )} </div> )} /> ); } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 diffing algorithm - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u044e\u0447\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 - React DevTools Profiler \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u041d\u0435 \u0437\u043b\u043e\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0439\u0442\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u0435\u0439 - \u0438\u043d\u043e\u0433\u0434\u0430 \u043f\u0435\u0440\u0435\u0441\u0447\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u043c\u0435\u043b\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0447\u0430\u0441\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Suspense \u0438 Error Boundaries \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e UX \u0418\u0437\u0443\u0447\u0438\u0442\u0435 Fiber - \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 Reconciliation \u0438 Virtual DOM \u2014 \u044d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442: - \u041f\u0438\u0441\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u0418\u0437\u0431\u0435\u0433\u0430\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438","title":"Reconciliation \u0438 Virtual DOM"},{"location":"questions/react/reconciliation/#reconciliation-virtual-dom","text":"","title":"Reconciliation \u0438 Virtual DOM"},{"location":"questions/react/reconciliation/#_1","text":"\u041e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 reconciliation \u0432 React \u0438 \u0435\u0433\u043e \u0441\u0432\u044f\u0437\u044c \u0441 Virtual DOM.","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/reconciliation/#_2","text":"Reconciliation \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c React \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 DOM, \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044f \u043d\u043e\u0432\u043e\u0435 Virtual DOM \u0434\u0435\u0440\u0435\u0432\u043e \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c. \u042d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c React.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/reconciliation/#virtual-dom-","text":"Virtual DOM \u2014 \u044d\u0442\u043e JavaScript-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e DOM, \u0445\u0440\u0430\u043d\u044f\u0449\u0435\u0435\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438. \u042d\u0442\u043e \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u0430\u044f \u043a\u043e\u043f\u0438\u044f DOM \u0434\u0435\u0440\u0435\u0432\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 JavaScript \u043e\u0431\u044a\u0435\u043a\u0442\u044b.","title":"Virtual DOM - \u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f"},{"location":"questions/react/reconciliation/#virtual-dom","text":"// JSX const element = ( <div className=\"container\"> <h1>Hello World</h1> <p>This is a paragraph</p> </div> ); // Virtual DOM \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e) const virtualElement = { type: 'div', props: { className: 'container', children: [ { type: 'h1', props: { children: 'Hello World' } }, { type: 'p', props: { children: 'This is a paragraph' } } ] } }; // React.createElement \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c const reactElement = React.createElement( 'div', { className: 'container' }, React.createElement('h1', null, 'Hello World'), React.createElement('p', null, 'This is a paragraph') );","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 Virtual DOM"},{"location":"questions/react/reconciliation/#reconciliation","text":"","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441 Reconciliation"},{"location":"questions/react/reconciliation/#_3","text":"Render Phase - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e Virtual DOM \u0434\u0435\u0440\u0435\u0432\u0430 Reconciliation Phase - \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e\u043c (diffing) Commit Phase - \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c\u0443 DOM // \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function Counter() { const [count, setCount] = useState(0); // \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 setCount(1): // 1. Render Phase: React \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 VDOM \u0434\u0435\u0440\u0435\u0432\u043e // 2. Reconciliation: \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (count: 0) \u0441 \u043d\u043e\u0432\u044b\u043c (count: 1) // 3. Commit: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c DOM return ( <div> <h1>Count: {count}</h1> <button onClick={() => setCount(count + 1)}> Increment </button> </div> ); }","title":"\u0424\u0430\u0437\u044b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"},{"location":"questions/react/reconciliation/#diffing-algorithm","text":"React \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 O(n) \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e O(n\u00b3).","title":"Diffing Algorithm"},{"location":"questions/react/reconciliation/#diffing","text":"// 1. \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 // \u0421\u0442\u0430\u0440\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e <div> <Counter /> </div> // \u041d\u043e\u0432\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e <span> <Counter /> </span> // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Counter \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043d\u043e\u0432\u043e // 2. \u041e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props // \u0421\u0442\u0430\u0440\u043e\u0435 <div className=\"old\" title=\"Old Title\"> Content </div> // \u041d\u043e\u0432\u043e\u0435 <div className=\"new\" title=\"New Title\"> Content </div> // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e className \u0438 title // 3. \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props \u0438 state \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f function App() { const [show, setShow] = useState(true); return ( <div> {show ? ( <Counter start={0} /> // State \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 props ) : ( <span>Hidden</span> )} </div> ); }","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b diffing"},{"location":"questions/react/reconciliation/#_4","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u0435\u0437 \u043a\u043b\u044e\u0447\u0435\u0439 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <li>{todo.text}</li> // React \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 ))} </ul> ); } // \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e: // [todo1, todo2] -> [newTodo, todo1, todo2] // React \u0434\u0443\u043c\u0430\u0435\u0442 \u0447\u0442\u043e: // - \u043f\u0435\u0440\u0432\u044b\u0439 li \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0441 todo1 \u043d\u0430 newTodo // - \u0432\u0442\u043e\u0440\u043e\u0439 li \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0441 todo2 \u043d\u0430 todo1 // - \u0442\u0440\u0435\u0442\u0438\u0439 li \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u0441 todo2 // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 2 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f + 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432\u043c\u0435\u0441\u0442\u043e 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <li key={todo.id}>{todo.text}</li> ))} </ul> ); } // \u0421 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 React \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442: // - \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 key=\"newTodo.id\" \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d // - \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441 key=\"todo1.id\" \u0438 key=\"todo2.id\" \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u043a\u043b\u044e\u0447\u0438"},{"location":"questions/react/reconciliation/#fiber-architecture-react-16","text":"\u0412 React 16 \u0431\u044b\u043b \u0432\u0432\u0435\u0434\u0435\u043d Fiber \u2014 \u043d\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 reconciliation, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443.","title":"Fiber Architecture (React 16+)"},{"location":"questions/react/reconciliation/#fiber","text":"// \u0414\u043e Fiber (Stack Reconciler) function heavyComponent() { // \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f const result = []; for (let i = 0; i < 100000; i++) { result.push(<div key={i}>Item {i}</div>); } return result; // \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 main thread \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f } // \u0421 Fiber function optimizedComponent() { const [items, setItems] = useState([]); useEffect(() => { // Fiber \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 const result = []; for (let i = 0; i < 100000; i++) { result.push(<div key={i}>Item {i}</div>); } setItems(result); }, []); return items; }","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Fiber"},{"location":"questions/react/reconciliation/#units-of-work","text":"// Fiber \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430 units of work const fiberNode = { type: 'div', props: { className: 'container' }, parent: parentFiber, child: firstChildFiber, sibling: nextSiblingFiber, alternate: previousVersionFiber, // \u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f effectTag: 'UPDATE', // \u0422\u0438\u043f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f // ... \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 }; // \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0432 Fiber const priorities = { IMMEDIATE: 1, // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f (click handlers) USER_BLOCKING: 2, // \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f NORMAL: 3, // \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f LOW: 4, // \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 IDLE: 5 // \u041a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 };","title":"Units of Work"},{"location":"questions/react/reconciliation/#reconciliation_1","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Reconciliation"},{"location":"questions/react/reconciliation/#1-reactmemo","text":"// \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 function ExpensiveChild({ data, onClick }) { console.log('ExpensiveChild render'); return ( <div onClick={onClick}> {data.map(item => ( <div key={item.id}> {/* \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 */} {processComplexData(item)} </div> ))} </div> ); } // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 const OptimizedChild = React.memo(function ExpensiveChild({ data, onClick }) { console.log('OptimizedChild render'); return ( <div onClick={onClick}> {data.map(item => ( <div key={item.id}> {processComplexData(item)} </div> ))} </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 return ( prevProps.data.length === nextProps.data.length && prevProps.onClick === nextProps.onClick ); });","title":"1. React.memo \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432"},{"location":"questions/react/reconciliation/#2-usememo-usecallback","text":"function OptimizedParent({ items, filter }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => { console.log('Filtering items...'); return items.filter(item => item.category === filter); }, [items, filter]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 const handleClick = useCallback((id) => { console.log('Item clicked:', id); }, []); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 return ( <OptimizedChild data={filteredItems} onClick={handleClick} /> ); }","title":"2. useMemo \u0438 useCallback"},{"location":"questions/react/reconciliation/#3","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0432\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 function BadExample() { const [state, setState] = useState({ count: 0, text: '', users: [], filters: {} }); // \u041b\u044e\u0431\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 const updateCount = () => setState(prev => ({ ...prev, count: prev.count + 1 })); return ( <div> <Counter count={state.count} onUpdate={updateCount} /> <UserList users={state.users} filters={state.filters} /> <TextInput value={state.text} onChange={(text) => setState(prev => ({ ...prev, text }))} /> </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 function GoodExample() { const [count, setCount] = useState(0); const [text, setText] = useState(''); const [users, setUsers] = useState([]); const [filters, setFilters] = useState({}); // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 count \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 UserList \u0438 TextInput return ( <div> <Counter count={count} onUpdate={setCount} /> <UserList users={users} filters={filters} /> <TextInput value={text} onChange={setText} /> </div> ); }","title":"3. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"},{"location":"questions/react/reconciliation/#_5","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/react/reconciliation/#_6","text":"import { FixedSizeList as List } from 'react-window'; // \u274c \u041f\u043b\u043e\u0445\u043e: \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b function HugeList({ items }) { return ( <div> {items.map((item, index) => ( <div key={item.id} style={{ height: 50 }}> {item.name} </div> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].name} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); }","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/react/reconciliation/#_7","text":"import { Suspense, lazy } from 'react'; // \u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 const HeavyComponent = lazy(() => import('./HeavyComponent')); function App() { const [showHeavy, setShowHeavy] = useState(false); return ( <div> <button onClick={() => setShowHeavy(!showHeavy)}> Toggle Heavy Component </button> {showHeavy && ( <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> )} </div> ); }","title":"\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/react/reconciliation/#_8","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430"},{"location":"questions/react/reconciliation/#react-devtools-profiler","text":"// \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f function ProfiledComponent() { const [count, setCount] = useState(0); // \u0414\u043e\u0440\u043e\u0433\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f const expensiveValue = useMemo(() => { console.log('Computing expensive value...'); let result = 0; for (let i = 0; i < 1000000; i++) { result += i; } return result; }, [count]); return ( <div> <p>Count: {count}</p> <p>Expensive: {expensiveValue}</p> <button onClick={() => setCount(c => c + 1)}> Increment </button> </div> ); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Profiler API import { Profiler } from 'react'; function onRenderCallback(id, phase, actualDuration, baseDuration, startTime, commitTime) { console.log('Component render info:', { id, phase, // 'mount' \u0438\u043b\u0438 'update' actualDuration, // \u0412\u0440\u0435\u043c\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 baseDuration, // \u0412\u0440\u0435\u043c\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0430 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 startTime, commitTime }); } function App() { return ( <Profiler id=\"ProfiledComponent\" onRender={onRenderCallback}> <ProfiledComponent /> </Profiler> ); }","title":"React DevTools Profiler"},{"location":"questions/react/reconciliation/#_9","text":"","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"questions/react/reconciliation/#1","text":"// \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f function Parent() { const [count, setCount] = useState(0); const [text, setText] = useState(''); return ( <div> <input value={text} onChange={(e) => setText(e.target.value)} /> <button onClick={() => setCount(c => c + 1)}>Count: {count}</button> <ExpensiveChild data=\"static data\" /> {/* \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 text */} </div> ); } // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: React.memo const MemoizedChild = React.memo(ExpensiveChild); // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function Parent() { return ( <div> <TextInput /> <Counter /> <ExpensiveChild data=\"static data\" /> </div> ); } function TextInput() { const [text, setText] = useState(''); return <input value={text} onChange={(e) => setText(e.target.value)} />; } function Counter() { const [count, setCount] = useState(0); return <button onClick={() => setCount(c => c + 1)}>Count: {count}</button>; }","title":"1. \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b"},{"location":"questions/react/reconciliation/#2","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 \u043f\u0440\u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 function TodoList({ todos }) { return ( <ul> {todos.map((todo, index) => ( <TodoItem key={index} todo={todo} /> ))} </ul> ); } // \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: // React \u0434\u0443\u043c\u0430\u0435\u0442 \u0447\u0442\u043e \u0443\u0434\u0430\u043b\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 // \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 function TodoList({ todos }) { return ( <ul> {todos.map(todo => ( <TodoItem key={todo.id} todo={todo} /> ))} </ul> ); } // \u0414\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0431\u0435\u0437 ID \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 const todosWithKeys = todos.map((todo, index) => ({ ...todo, key: todo.id || `${todo.text}-${index}` }));","title":"2. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0439"},{"location":"questions/react/reconciliation/#advanced-patterns","text":"","title":"Advanced Patterns"},{"location":"questions/react/reconciliation/#render-props","text":"// \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 render prop function DataProvider({ children, render }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const fetchData = useCallback(async () => { setLoading(true); try { const result = await fetch('/api/data'); setData(await result.json()); } finally { setLoading(false); } }, []); useEffect(() => { fetchData(); }, [fetchData]); // Render prop \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 // \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 wrapper \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 return render({ data, loading, refetch: fetchData }); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function App() { return ( <DataProvider render={({ data, loading, refetch }) => ( <div> {loading ? ( <div>Loading...</div> ) : ( <div> <pre>{JSON.stringify(data, null, 2)}</pre> <button onClick={refetch}>Refresh</button> </div> )} </div> )} /> ); }","title":"Render Props \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/react/reconciliation/#senior-","text":"\u041f\u043e\u043d\u0438\u043c\u0430\u0439\u0442\u0435 diffing algorithm - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u044e\u0447\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e - \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 - React DevTools Profiler \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u041d\u0435 \u0437\u043b\u043e\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0439\u0442\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u0435\u0439 - \u0438\u043d\u043e\u0433\u0434\u0430 \u043f\u0435\u0440\u0435\u0441\u0447\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u043c\u0435\u043b\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0447\u0430\u0441\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Suspense \u0438 Error Boundaries \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e UX \u0418\u0437\u0443\u0447\u0438\u0442\u0435 Fiber - \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/reconciliation/#_10","text":"Reconciliation \u0438 Virtual DOM \u2014 \u044d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442: - \u041f\u0438\u0441\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u0418\u0437\u0431\u0435\u0433\u0430\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"questions/react/reconciliation/#_11","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 useEffect \u0438 Side Effects \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/reconciliation_small/","text":"Reconciliation & Virtual DOM - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u044b Virtual DOM = JavaScript \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e DOM Reconciliation = \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e VDOM \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u041f\u0440\u043e\u0446\u0435\u0441\u0441 Reconciliation Render Phase - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e VDOM \u0434\u0435\u0440\u0435\u0432\u0430 Reconciliation Phase - diffing (\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435) Commit Phase - \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a DOM Diffing Algorithm O(n) \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 // div \u2192 span: Counter \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e <div><Counter /></div> \u2192 <span><Counter /></span> \u041e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props <div className=\"old\" /> \u2192 <div className=\"new\" /> // \u0422\u043e\u043b\u044c\u043a\u043e className \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 = state \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f <Counter start={0} /> \u2192 <Counter start={5} /> // state \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f, \u0442\u043e\u043b\u044c\u043a\u043e props \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f Keys - \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u043e! // \u274c \u0411\u0435\u0437 \u043a\u043b\u044e\u0447\u0435\u0439 - \u043f\u043b\u043e\u0445\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c {todos.map(todo => <li>{todo.text}</li>)} // \u2705 \u0421 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 {todos.map(todo => <li key={todo.id}>{todo.text}</li>)} // \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a key \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 {todos.map((todo, index) => <li key={index}>{todo.text}</li>)} Fiber Architecture (React 16+) \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0437\u0430\u0434\u0430\u0447 const priorities = { IMMEDIATE: 1, // Click handlers USER_BLOCKING: 2, // Input, hover NORMAL: 3, // \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f LOW: 4, // \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 IDLE: 5 // \u0421\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f }; \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e : Fiber \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u043d\u0438\u0437\u043a\u043e\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Reconciliation 1. React.memo - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 // \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u043c\u0435\u043c\u043e const ExpensiveChild = React.memo(function({ data, onClick }) { return <div>{/* \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f */}</div>; }); // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const SmartChild = React.memo(Child, (prevProps, nextProps) => { return prevProps.data.length === nextProps.data.length; }); 2. useMemo & useCallback function OptimizedParent({ items, filter }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => items.filter(item => item.category === filter), [items, filter] ); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e const handleClick = useCallback((id) => { console.log('clicked', id); }, []); return <Child data={filteredItems} onClick={handleClick} />; } 3. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f // \u274c \u041e\u0434\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 const [bigState, setBigState] = useState({ count: 0, text: '', users: [] }); // \u2705 \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 const [count, setCount] = useState(0); const [text, setText] = useState(''); const [users, setUsers] = useState([]); \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b 1. \u041b\u0438\u0448\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b // \u274c ExpensiveChild \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 Parent function Parent() { const [count, setCount] = useState(0); return ( <div> <button onClick={() => setCount(c => c + 1)}>{count}</button> <ExpensiveChild data=\"static\" /> {/* \u0412\u0441\u0435\u0433\u0434\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f */} </div> ); } // \u2705 \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function Parent() { return ( <div> <Counter /> <ExpensiveChild data=\"static\" /> </div> ); } function Counter() { const [count, setCount] = useState(0); return <button onClick={() => setCount(c => c + 1)}>{count}</button>; } 2. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 keys // \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438/\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 todos.map((todo, index) => <TodoItem key={index} todo={todo} />) // \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 keys todos.map(todo => <TodoItem key={todo.id} todo={todo} />) Performance Patterns \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 import { FixedSizeList as List } from 'react-window'; const VirtualizedList = ({ items }) => ( <List height={600} itemCount={items.length} itemSize={50}> {({ index, style }) => ( <div style={style}>{items[index].name}</div> )} </List> ); Lazy loading \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 import { Suspense, lazy } from 'react'; const HeavyComponent = lazy(() => import('./HeavyComponent')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> ); } Debugging Profiler API function onRenderCallback(id, phase, actualDuration, baseDuration) { console.log({ id, phase, actualDuration, baseDuration }); } <Profiler id=\"App\" onRender={onRenderCallback}> <App /> </Profiler> React DevTools Profiler tab - \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Components tab - props, state, \u0440\u0435\u043d\u0434\u0435\u0440\u044b Highlight updates - \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 Senior Rules Keys matter! - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 Split state - \u043c\u0435\u043b\u043a\u0438\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Memo wisely - \u043d\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u044f\u0434 Profile first - \u0438\u0437\u043c\u0435\u0440\u044f\u0439 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 Understand diffing - \u0442\u0438\u043f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Stable references - useCallback \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 props Component structure - \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c Anti-patterns // \u274c \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0430 function Parent() { const Child = () => <div>Child</div>; // \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440! return <Child />; } // \u274c \u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 props <Child config={{ option: true }} /> // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 // \u274c \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 useCallback \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 const fn = () => {}; // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 <Child onClick={fn} /> // \u274c \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u044e {condition && <ComponentA />} <ComponentB /> // ComponentB \u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u0434\u0435\u0440\u0435\u0432\u0435 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Reconciliation = \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432. \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 = \u043b\u0443\u0447\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c!","title":"Reconciliation &amp; Virtual DOM - Senior Cheat Sheet (small)"},{"location":"questions/react/reconciliation_small/#reconciliation-virtual-dom-senior-cheat-sheet-small","text":"","title":"Reconciliation &amp; Virtual DOM - Senior Cheat Sheet (small)"},{"location":"questions/react/reconciliation_small/#_1","text":"Virtual DOM = JavaScript \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e DOM Reconciliation = \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e VDOM \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c","title":"\u041e\u0441\u043d\u043e\u0432\u044b"},{"location":"questions/react/reconciliation_small/#reconciliation","text":"Render Phase - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e VDOM \u0434\u0435\u0440\u0435\u0432\u0430 Reconciliation Phase - diffing (\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435) Commit Phase - \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a DOM","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441 Reconciliation"},{"location":"questions/react/reconciliation_small/#diffing-algorithm-on","text":"","title":"Diffing Algorithm O(n)"},{"location":"questions/react/reconciliation_small/#_2","text":"\u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 // div \u2192 span: Counter \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e <div><Counter /></div> \u2192 <span><Counter /></span> \u041e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b = \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 props <div className=\"old\" /> \u2192 <div className=\"new\" /> // \u0422\u043e\u043b\u044c\u043a\u043e className \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 = state \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f <Counter start={0} /> \u2192 <Counter start={5} /> // state \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f, \u0442\u043e\u043b\u044c\u043a\u043e props \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f"},{"location":"questions/react/reconciliation_small/#keys-","text":"// \u274c \u0411\u0435\u0437 \u043a\u043b\u044e\u0447\u0435\u0439 - \u043f\u043b\u043e\u0445\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c {todos.map(todo => <li>{todo.text}</li>)} // \u2705 \u0421 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 {todos.map(todo => <li key={todo.id}>{todo.text}</li>)} // \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a key \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 {todos.map((todo, index) => <li key={index}>{todo.text}</li>)}","title":"Keys - \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u043e!"},{"location":"questions/react/reconciliation_small/#fiber-architecture-react-16","text":"","title":"Fiber Architecture (React 16+)"},{"location":"questions/react/reconciliation_small/#_3","text":"const priorities = { IMMEDIATE: 1, // Click handlers USER_BLOCKING: 2, // Input, hover NORMAL: 3, // \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f LOW: 4, // \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 IDLE: 5 // \u0421\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f }; \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e : Fiber \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c \u043d\u0438\u0437\u043a\u043e\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430.","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0437\u0430\u0434\u0430\u0447"},{"location":"questions/react/reconciliation_small/#reconciliation_1","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Reconciliation"},{"location":"questions/react/reconciliation_small/#1-reactmemo-","text":"// \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u043c\u0435\u043c\u043e const ExpensiveChild = React.memo(function({ data, onClick }) { return <div>{/* \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f */}</div>; }); // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const SmartChild = React.memo(Child, (prevProps, nextProps) => { return prevProps.data.length === nextProps.data.length; });","title":"1. React.memo - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432"},{"location":"questions/react/reconciliation_small/#2-usememo-usecallback","text":"function OptimizedParent({ items, filter }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 const filteredItems = useMemo(() => items.filter(item => item.category === filter), [items, filter] ); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e const handleClick = useCallback((id) => { console.log('clicked', id); }, []); return <Child data={filteredItems} onClick={handleClick} />; }","title":"2. useMemo &amp; useCallback"},{"location":"questions/react/reconciliation_small/#3","text":"// \u274c \u041e\u0434\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 const [bigState, setBigState] = useState({ count: 0, text: '', users: [] }); // \u2705 \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 const [count, setCount] = useState(0); const [text, setText] = useState(''); const [users, setUsers] = useState([]);","title":"3. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"},{"location":"questions/react/reconciliation_small/#_4","text":"","title":"\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b"},{"location":"questions/react/reconciliation_small/#1","text":"// \u274c ExpensiveChild \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 Parent function Parent() { const [count, setCount] = useState(0); return ( <div> <button onClick={() => setCount(c => c + 1)}>{count}</button> <ExpensiveChild data=\"static\" /> {/* \u0412\u0441\u0435\u0433\u0434\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f */} </div> ); } // \u2705 \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function Parent() { return ( <div> <Counter /> <ExpensiveChild data=\"static\" /> </div> ); } function Counter() { const [count, setCount] = useState(0); return <button onClick={() => setCount(c => c + 1)}>{count}</button>; }","title":"1. \u041b\u0438\u0448\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b"},{"location":"questions/react/reconciliation_small/#2-keys","text":"// \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438/\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 todos.map((todo, index) => <TodoItem key={index} todo={todo} />) // \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 keys todos.map(todo => <TodoItem key={todo.id} todo={todo} />)","title":"2. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 keys"},{"location":"questions/react/reconciliation_small/#performance-patterns","text":"","title":"Performance Patterns"},{"location":"questions/react/reconciliation_small/#_5","text":"import { FixedSizeList as List } from 'react-window'; const VirtualizedList = ({ items }) => ( <List height={600} itemCount={items.length} itemSize={50}> {({ index, style }) => ( <div style={style}>{items[index].name}</div> )} </List> );","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/react/reconciliation_small/#lazy-loading","text":"import { Suspense, lazy } from 'react'; const HeavyComponent = lazy(() => import('./HeavyComponent')); function App() { return ( <Suspense fallback={<div>Loading...</div>}> <HeavyComponent /> </Suspense> ); }","title":"Lazy loading \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/react/reconciliation_small/#debugging","text":"","title":"Debugging"},{"location":"questions/react/reconciliation_small/#profiler-api","text":"function onRenderCallback(id, phase, actualDuration, baseDuration) { console.log({ id, phase, actualDuration, baseDuration }); } <Profiler id=\"App\" onRender={onRenderCallback}> <App /> </Profiler>","title":"Profiler API"},{"location":"questions/react/reconciliation_small/#react-devtools","text":"Profiler tab - \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Components tab - props, state, \u0440\u0435\u043d\u0434\u0435\u0440\u044b Highlight updates - \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432","title":"React DevTools"},{"location":"questions/react/reconciliation_small/#senior-rules","text":"Keys matter! - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 Split state - \u043c\u0435\u043b\u043a\u0438\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Memo wisely - \u043d\u0435 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u044f\u0434 Profile first - \u0438\u0437\u043c\u0435\u0440\u044f\u0439 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 Understand diffing - \u0442\u0438\u043f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 = \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Stable references - useCallback \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 props Component structure - \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","title":"Senior Rules"},{"location":"questions/react/reconciliation_small/#anti-patterns","text":"// \u274c \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0430 function Parent() { const Child = () => <div>Child</div>; // \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440! return <Child />; } // \u274c \u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 props <Child config={{ option: true }} /> // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 // \u274c \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 useCallback \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 const fn = () => {}; // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 <Child onClick={fn} /> // \u274c \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u044e {condition && <ComponentA />} <ComponentB /> // ComponentB \u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u0434\u0435\u0440\u0435\u0432\u0435 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : Reconciliation = \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432. \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 = \u043b\u0443\u0447\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c!","title":"Anti-patterns"},{"location":"questions/react/rerender-optimization/","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0432 React \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0432 React: \u043a\u043e\u0433\u0434\u0430 \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c React.memo, useMemo, useCallback? \u041a\u0430\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0435 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b (React DevTools Profiler), \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043a\u043b\u044e\u0447\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430/useSyncExternalStore \u0438 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043f\u0438\u0441\u043a\u043e\u0432? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u2014 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u0430\u0441\u043f\u0435\u043a\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u0438 \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. \u041e\u0441\u043d\u043e\u0432\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0432 React \u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b function Parent() { const [count, setCount] = useState(0); const [name, setName] = useState('John'); console.log('Parent renders'); return ( <div> <button onClick={() => setCount(c => c + 1)}> Count: {count} </button> <input value={name} onChange={(e) => setName(e.target.value)} /> {/* Child \u043f\u0435\u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0432 Parent */} <Child /> <ExpensiveChild data={[1, 2, 3]} /> </div> ); } function Child() { console.log('Child renders'); // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0432 Parent return <div>I'm a child</div>; } function ExpensiveChild({ data }) { console.log('ExpensiveChild renders'); // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const processedData = data.map(item => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 return performExpensiveOperation(item); }); return <div>{processedData.join(', ')}</div>; } React.memo - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 function UserCard({ user }) { console.log('UserCard renders for:', user.name); return ( <div className=\"user-card\"> <img src={user.avatar} alt={user.name} /> <h3>{user.name}</h3> <p>{user.email}</p> </div> ); } // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 const MemoizedUserCard = React.memo(function UserCard({ user }) { console.log('MemoizedUserCard renders for:', user.name); return ( <div className=\"user-card\"> <img src={user.avatar} alt={user.name} /> <h3>{user.name}</h3> <p>{user.email}</p> </div> ); }); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList({ users, onUserClick }) { const [filter, setFilter] = useState(''); return ( <div> <input value={filter} onChange={(e) => setFilter(e.target.value)} placeholder=\"Filter users...\" /> {users.map(user => ( <MemoizedUserCard key={user.id} user={user} onClick={onUserClick} // \u26a0\ufe0f \u041c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b /> ))} </div> ); } \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f const OptimizedUserCard = React.memo(function UserCard({ user, theme, onClick }) { return ( <div className={`user-card user-card--${theme}`}> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onClick(user.id)}> View Profile </button> </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f return ( prevProps.user.id === nextProps.user.id && prevProps.user.name === nextProps.user.name && prevProps.user.email === nextProps.user.email && prevProps.theme === nextProps.theme && prevProps.onClick === nextProps.onClick ); }); // \u0418\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0431\u0449\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 const deepCompareUserCard = React.memo(UserCard, (prevProps, nextProps) => { // \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 const userEqual = isEqual(prevProps.user, nextProps.user); const themeEqual = prevProps.theme === nextProps.theme; const handlerEqual = prevProps.onClick === nextProps.onClick; return userEqual && themeEqual && handlerEqual; }); useMemo - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0414\u043e\u0440\u043e\u0433\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f function ProductList({ products, filters, sortBy }) { // \u274c \u041f\u043b\u043e\u0445\u043e: \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const filteredProducts = products .filter(product => { return Object.entries(filters).every(([key, value]) => { if (!value) return true; return product[key].toLowerCase().includes(value.toLowerCase()); }); }) .sort((a, b) => { if (sortBy === 'price') return a.price - b.price; if (sortBy === 'name') return a.name.localeCompare(b.name); return 0; }); return ( <div> {filteredProducts.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f function OptimizedProductList({ products, filters, sortBy }) { const filteredAndSortedProducts = useMemo(() => { console.log('Recalculating filtered products'); return products .filter(product => { return Object.entries(filters).every(([key, value]) => { if (!value) return true; return product[key].toLowerCase().includes(value.toLowerCase()); }); }) .sort((a, b) => { if (sortBy === 'price') return a.price - b.price; if (sortBy === 'name') return a.name.localeCompare(b.name); return 0; }); }, [products, filters, sortBy]); // \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 const statistics = useMemo(() => { console.log('Recalculating statistics'); return { total: filteredAndSortedProducts.length, averagePrice: filteredAndSortedProducts.reduce((sum, p) => sum + p.price, 0) / filteredAndSortedProducts.length, categories: [...new Set(filteredAndSortedProducts.map(p => p.category))] }; }, [filteredAndSortedProducts]); return ( <div> <div className=\"statistics\"> <p>Total: {statistics.total}</p> <p>Average Price: ${statistics.averagePrice.toFixed(2)}</p> <p>Categories: {statistics.categories.join(', ')}</p> </div> {filteredAndSortedProducts.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); } \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 function ComponentWithObjects({ items, config }) { // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const tableConfig = { sortable: true, filterable: true, pageSize: config.pageSize || 10 }; // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const processedItems = items.map(item => ({ ...item, displayName: `${item.firstName} ${item.lastName}` })); return <DataTable config={tableConfig} items={processedItems} />; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b function OptimizedComponentWithObjects({ items, config }) { const tableConfig = useMemo(() => ({ sortable: true, filterable: true, pageSize: config.pageSize || 10 }), [config.pageSize]); const processedItems = useMemo(() => items.map(item => ({ ...item, displayName: `${item.firstName} ${item.lastName}` })), [items] ); return <DataTable config={tableConfig} items={processedItems} />; } useCallback - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function TodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const handleToggle = (id) => { onToggle(id); }; const handleDelete = (id) => { onDelete(id); }; const filteredTodos = todos.filter(todo => { if (filter === 'active') return !todo.completed; if (filter === 'completed') return todo.completed; return true; }); return ( <div> <FilterButtons current={filter} onChange={setFilter} /> {filteredTodos.map(todo => ( <TodoItem key={todo.id} todo={todo} onToggle={handleToggle} // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 onDelete={handleDelete} // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 /> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function OptimizedTodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); const handleToggle = useCallback((id) => { onToggle(id); }, [onToggle]); const handleDelete = useCallback((id) => { onDelete(id); }, [onDelete]); const filteredTodos = useMemo(() => { return todos.filter(todo => { if (filter === 'active') return !todo.completed; if (filter === 'completed') return todo.completed; return true; }); }, [todos, filter]); return ( <div> <FilterButtons current={filter} onChange={setFilter} /> {filteredTodos.map(todo => ( <MemoizedTodoItem key={todo.id} todo={todo} onToggle={handleToggle} onDelete={handleDelete} /> ))} </div> ); } const MemoizedTodoItem = React.memo(TodoItem); \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 function FormComponent({ initialData, onSubmit }) { const [formData, setFormData] = useState(initialData); const [errors, setErrors] = useState({}); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 const validateField = useCallback((name, value) => { const validators = { email: (val) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val) || 'Invalid email', password: (val) => val.length >= 8 || 'Password must be at least 8 characters', confirmPassword: (val) => val === formData.password || 'Passwords do not match' }; const validator = validators[name]; return validator ? validator(value) === true ? null : validator(value) : null; }, [formData.password]); const handleFieldChange = useCallback((name, value) => { setFormData(prev => ({ ...prev, [name]: value })); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 const error = validateField(name, value); setErrors(prev => ({ ...prev, [name]: error })); }, [validateField]); const handleSubmit = useCallback((e) => { e.preventDefault(); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0435\u0439 const newErrors = {}; Object.entries(formData).forEach(([name, value]) => { const error = validateField(name, value); if (error) newErrors[name] = error; }); if (Object.keys(newErrors).length === 0) { onSubmit(formData); } else { setErrors(newErrors); } }, [formData, validateField, onSubmit]); return ( <form onSubmit={handleSubmit}> <FormField name=\"email\" value={formData.email} error={errors.email} onChange={handleFieldChange} /> <FormField name=\"password\" type=\"password\" value={formData.password} error={errors.password} onChange={handleFieldChange} /> <FormField name=\"confirmPassword\" type=\"password\" value={formData.confirmPassword} error={errors.confirmPassword} onChange={handleFieldChange} /> <button type=\"submit\">Submit</button> </form> ); } const FormField = React.memo(function FormField({ name, value, error, onChange, ...props }) { return ( <div> <input {...props} value={value} onChange={(e) => onChange(name, e.target.value)} /> {error && <span className=\"error\">{error}</span>} </div> ); }); \u0414\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u0441 React DevTools Profiler \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f import { Profiler } from 'react'; function App() { const handleRender = (id, phase, actualDuration, baseDuration, startTime, commitTime) => { console.log('Profiler data:', { id, // \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 Profiler phase, // \"mount\" \u0438\u043b\u0438 \"update\" actualDuration, // \u0412\u0440\u0435\u043c\u044f, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u0440\u0435\u043d\u0434\u0435\u0440 baseDuration, // \u0412\u0440\u0435\u043c\u044f \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 startTime, // \u041a\u043e\u0433\u0434\u0430 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0440\u0435\u043d\u0434\u0435\u0440 commitTime, // \u041a\u043e\u0433\u0434\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b interactions: new Set() // \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0432\u044b\u0437\u0432\u0430\u0432\u0448\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440 }); }; return ( <div> <Profiler id=\"Navigation\" onRender={handleRender}> <Navigation /> </Profiler> <Profiler id=\"MainContent\" onRender={handleRender}> <MainContent /> </Profiler> <Profiler id=\"Sidebar\" onRender={handleRender}> <Sidebar /> </Profiler> </div> ); } \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0443\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f function useRenderTracker(componentName) { const renderCount = useRef(0); const lastRenderTime = useRef(Date.now()); renderCount.current += 1; useEffect(() => { const now = Date.now(); const timeSinceLastRender = now - lastRenderTime.current; console.log(`${componentName} render #${renderCount.current}`, { timeSinceLastRender, timestamp: new Date().toISOString() }); lastRenderTime.current = now; }); return renderCount.current; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function MyComponent({ data }) { const renderCount = useRenderTracker('MyComponent'); return ( <div> <span>Render count: {renderCount}</span> <div>{JSON.stringify(data)}</div> </div> ); } \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0439 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 function BadTodoList({ todos }) { return ( <ul> {todos.map((todo, index) => ( <TodoItem key={index} // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043f\u0440\u0438 \u0440\u0435\u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 todo={todo} /> ))} </ul> ); } // \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0441\u043f\u0438\u0441\u043a\u0430: // [todo1, todo2, todo3] -> [newTodo, todo1, todo2, todo3] // React \u0434\u0443\u043c\u0430\u0435\u0442: // - key=0: todo1 -> newTodo (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=1: todo2 -> todo1 (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=2: todo3 -> todo2 (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=3: undefined -> todo3 (\u043d\u043e\u0432\u044b\u0439) // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 3 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f + 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432\u043c\u0435\u0441\u0442\u043e 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 function GoodTodoList({ todos }) { return ( <ul> {todos.map(todo => ( <TodoItem key={todo.id} // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 todo={todo} /> ))} </ul> ); } \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 function CommentsList({ posts }) { return ( <div> {posts.map(post => ( <div key={post.id}> <h3>{post.title}</h3> {post.comments.map(comment => ( <Comment key={`${post.id}-${comment.id}`} // \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u043a\u043b\u044e\u0447 comment={comment} /> ))} </div> ))} </div> ); } // \u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 function DynamicForm({ fields }) { return ( <form> {fields.map((field, index) => ( <FormField key={field.id || `field-${field.type}-${index}`} field={field} /> ))} </form> ); } \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 Context // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f const AppContext = createContext(); function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const [notifications, setNotifications] = useState([]); const value = { user, setUser, theme, setTheme, notifications, setNotifications }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } function UserDisplay() { const { user } = useContext(AppContext); // \u0420\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 return <div>{user?.name}</div>; } function ThemeToggle() { const { theme, setTheme } = useContext(AppContext); // \u0420\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>Toggle</button>; } \u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const UserContext = createContext(); const ThemeContext = createContext(); const NotificationsContext = createContext(); function UserProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return ( <UserContext.Provider value={value}> {children} </UserContext.Provider> ); } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); const value = useMemo(() => ({ theme, setTheme }), [theme]); return ( <ThemeContext.Provider value={value}> {children} </ThemeContext.Provider> ); } // \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 function UserDisplay() { const { user } = useContext(UserContext); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <div>{user?.name}</div>; } function ThemeToggle() { const { theme, setTheme } = useContext(ThemeContext); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 theme return <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>Toggle</button>; } useSyncExternalStore \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 store // External store (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Zustand store) const useStore = create((set) => ({ count: 0, user: null, increment: () => set((state) => ({ count: state.count + 1 })), setUser: (user) => set({ user }) })); // \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function useCount() { return useSyncExternalStore( useStore.subscribe, () => useStore.getState().count, () => 0 // Server-side \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ); } function useUser() { return useSyncExternalStore( useStore.subscribe, () => useStore.getState().user, () => null ); } // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0432\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 function Counter() { const count = useCount(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count const increment = useStore(state => state.increment); return ( <button onClick={increment}> Count: {count} </button> ); } function UserProfile() { const user = useUser(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <div>{user?.name || 'Anonymous'}</div>; } \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0440\u0435\u043d\u0434\u0435\u0440 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 function HugeList({ items }) { return ( <div className=\"list\"> {items.map(item => ( <div key={item.id} className=\"list-item\"> <h3>{item.title}</h3> <p>{item.description}</p> <img src={item.thumbnail} alt={item.title} /> </div> ))} </div> ); } // \u041f\u0440\u0438 10,000 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 - \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0420\u0435\u0448\u0435\u043d\u0438\u0435: react-window import { FixedSizeList as List } from 'react-window'; // \u2705 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style} className=\"list-item\"> <h3>{items[index].title}</h3> <p>{items[index].description}</p> <img src={items[index].thumbnail} alt={items[index].title} /> </div> ); return ( <List height={600} // \u0412\u044b\u0441\u043e\u0442\u0430 \u0432\u0438\u0434\u0438\u043c\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 itemCount={items.length} itemSize={120} // \u0412\u044b\u0441\u043e\u0442\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 width=\"100%\" > {Row} </List> ); } // \u0414\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u043d\u043e\u0439 \u0432\u044b\u0441\u043e\u0442\u044b import { VariableSizeList as VariableList } from 'react-window'; function VariableHeightList({ items }) { const getItemSize = (index) => { // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e const item = items[index]; const baseHeight = 80; const descriptionHeight = item.description.length > 100 ? 40 : 20; return baseHeight + descriptionHeight; }; const Row = ({ index, style }) => ( <div style={style} className=\"list-item\"> <h3>{items[index].title}</h3> <p>{items[index].description}</p> </div> ); return ( <VariableList height={600} itemCount={items.length} itemSize={getItemSize} width=\"100%\" > {Row} </VariableList> ); } \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f function useVirtualization({ itemCount, itemHeight, containerHeight }) { const [scrollTop, setScrollTop] = useState(0); const startIndex = Math.floor(scrollTop / itemHeight); const endIndex = Math.min( itemCount - 1, Math.floor((scrollTop + containerHeight) / itemHeight) ); const visibleItems = []; for (let i = startIndex; i <= endIndex; i++) { visibleItems.push(i); } const totalHeight = itemCount * itemHeight; const offsetY = startIndex * itemHeight; return { startIndex, endIndex, visibleItems, totalHeight, offsetY, setScrollTop }; } function CustomVirtualList({ items, itemHeight = 50 }) { const containerRef = useRef(); const [containerHeight, setContainerHeight] = useState(400); const { visibleItems, totalHeight, offsetY, setScrollTop } = useVirtualization({ itemCount: items.length, itemHeight, containerHeight }); const handleScroll = (e) => { setScrollTop(e.target.scrollTop); }; return ( <div ref={containerRef} className=\"virtual-list\" style={{ height: containerHeight, overflow: 'auto' }} onScroll={handleScroll} > <div style={{ height: totalHeight, position: 'relative' }}> <div style={{ transform: `translateY(${offsetY}px)` }}> {visibleItems.map(index => ( <div key={items[index].id} style={{ height: itemHeight }} className=\"list-item\" > {items[index].title} </div> ))} </div> </div> </div> ); } \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438 \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u041a\u043e\u0433\u0434\u0430 \u041d\u0415 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 // \u274c \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OverOptimized({ name, age }) { // \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const greeting = useMemo(() => `Hello, ${name}!`, [name]); // \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const handleClick = useCallback(() => { console.log('clicked'); }, []); return ( <div onClick={handleClick}> {greeting} You are {age} years old. </div> ); } // \u2705 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e function WellOptimized({ users, onUserSelect }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const sortedUsers = useMemo(() => { return users.sort((a, b) => a.lastName.localeCompare(b.lastName)); }, [users]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b const handleUserSelect = useCallback((userId) => { onUserSelect(userId); }, [onUserSelect]); return ( <div> {sortedUsers.map(user => ( <MemoizedUserCard key={user.id} user={user} onSelect={handleUserSelect} /> ))} </div> ); } \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 function PerformanceMonitor({ children }) { const renderCount = useRef(0); const lastRenderTime = useRef(performance.now()); const onRenderCallback = useCallback((id, phase, actualDuration) => { renderCount.current += 1; const now = performance.now(); console.log(`Render #${renderCount.current}:`, { component: id, phase, duration: actualDuration, timeSinceLastRender: now - lastRenderTime.current }); lastRenderTime.current = now; // \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0430\u0445 if (actualDuration > 16) { // > 1 frame at 60fps console.warn(`Slow render detected: ${actualDuration}ms`); } }, []); return ( <Profiler id=\"PerformanceMonitor\" onRender={onRenderCallback}> {children} </Profiler> ); } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 React DevTools Profiler \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c React.memo \u0434\u043b\u044f \"\u043b\u0438\u0441\u0442\u043e\u0432\u044b\u0445\" \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b - \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b - \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 - react-window \u0438\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0418\u0437\u043c\u0435\u0440\u044f\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0440\u0435\u0434\u0438\u0442\u044c \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 ```javascript // \u0425\u0443\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 props function useWhyDidYouUpdate(name, props) { const previous = useRef();","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0432 React"},{"location":"questions/react/rerender-optimization/#react","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0432 React"},{"location":"questions/react/rerender-optimization/#_1","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u0432 React: \u043a\u043e\u0433\u0434\u0430 \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c React.memo, useMemo, useCallback? \u041a\u0430\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0435 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b (React DevTools Profiler), \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043a\u043b\u044e\u0447\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430/useSyncExternalStore \u0438 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043f\u0438\u0441\u043a\u043e\u0432?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/rerender-optimization/#_2","text":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u2014 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u0430\u0441\u043f\u0435\u043a\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u0438 \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/rerender-optimization/#react_1","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0432 React"},{"location":"questions/react/rerender-optimization/#_3","text":"function Parent() { const [count, setCount] = useState(0); const [name, setName] = useState('John'); console.log('Parent renders'); return ( <div> <button onClick={() => setCount(c => c + 1)}> Count: {count} </button> <input value={name} onChange={(e) => setName(e.target.value)} /> {/* Child \u043f\u0435\u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0432 Parent */} <Child /> <ExpensiveChild data={[1, 2, 3]} /> </div> ); } function Child() { console.log('Child renders'); // \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0432 Parent return <div>I'm a child</div>; } function ExpensiveChild({ data }) { console.log('ExpensiveChild renders'); // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const processedData = data.map(item => { // \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 return performExpensiveOperation(item); }); return <div>{processedData.join(', ')}</div>; }","title":"\u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b"},{"location":"questions/react/rerender-optimization/#reactmemo-","text":"","title":"React.memo - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/react/rerender-optimization/#_4","text":"// \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 function UserCard({ user }) { console.log('UserCard renders for:', user.name); return ( <div className=\"user-card\"> <img src={user.avatar} alt={user.name} /> <h3>{user.name}</h3> <p>{user.email}</p> </div> ); } // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 const MemoizedUserCard = React.memo(function UserCard({ user }) { console.log('MemoizedUserCard renders for:', user.name); return ( <div className=\"user-card\"> <img src={user.avatar} alt={user.name} /> <h3>{user.name}</h3> <p>{user.email}</p> </div> ); }); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function UserList({ users, onUserClick }) { const [filter, setFilter] = useState(''); return ( <div> <input value={filter} onChange={(e) => setFilter(e.target.value)} placeholder=\"Filter users...\" /> {users.map(user => ( <MemoizedUserCard key={user.id} user={user} onClick={onUserClick} // \u26a0\ufe0f \u041c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b /> ))} </div> ); }","title":"\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/rerender-optimization/#_5","text":"// \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f const OptimizedUserCard = React.memo(function UserCard({ user, theme, onClick }) { return ( <div className={`user-card user-card--${theme}`}> <h3>{user.name}</h3> <p>{user.email}</p> <button onClick={() => onClick(user.id)}> View Profile </button> </div> ); }, (prevProps, nextProps) => { // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f return ( prevProps.user.id === nextProps.user.id && prevProps.user.name === nextProps.user.name && prevProps.user.email === nextProps.user.email && prevProps.theme === nextProps.theme && prevProps.onClick === nextProps.onClick ); }); // \u0418\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0431\u0449\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 const deepCompareUserCard = React.memo(UserCard, (prevProps, nextProps) => { // \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 const userEqual = isEqual(prevProps.user, nextProps.user); const themeEqual = prevProps.theme === nextProps.theme; const handlerEqual = prevProps.onClick === nextProps.onClick; return userEqual && themeEqual && handlerEqual; });","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"},{"location":"questions/react/rerender-optimization/#usememo-","text":"","title":"useMemo - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"},{"location":"questions/react/rerender-optimization/#_6","text":"function ProductList({ products, filters, sortBy }) { // \u274c \u041f\u043b\u043e\u0445\u043e: \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const filteredProducts = products .filter(product => { return Object.entries(filters).every(([key, value]) => { if (!value) return true; return product[key].toLowerCase().includes(value.toLowerCase()); }); }) .sort((a, b) => { if (sortBy === 'price') return a.price - b.price; if (sortBy === 'name') return a.name.localeCompare(b.name); return 0; }); return ( <div> {filteredProducts.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f function OptimizedProductList({ products, filters, sortBy }) { const filteredAndSortedProducts = useMemo(() => { console.log('Recalculating filtered products'); return products .filter(product => { return Object.entries(filters).every(([key, value]) => { if (!value) return true; return product[key].toLowerCase().includes(value.toLowerCase()); }); }) .sort((a, b) => { if (sortBy === 'price') return a.price - b.price; if (sortBy === 'name') return a.name.localeCompare(b.name); return 0; }); }, [products, filters, sortBy]); // \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 const statistics = useMemo(() => { console.log('Recalculating statistics'); return { total: filteredAndSortedProducts.length, averagePrice: filteredAndSortedProducts.reduce((sum, p) => sum + p.price, 0) / filteredAndSortedProducts.length, categories: [...new Set(filteredAndSortedProducts.map(p => p.category))] }; }, [filteredAndSortedProducts]); return ( <div> <div className=\"statistics\"> <p>Total: {statistics.total}</p> <p>Average Price: ${statistics.averagePrice.toFixed(2)}</p> <p>Categories: {statistics.categories.join(', ')}</p> </div> {filteredAndSortedProducts.map(product => ( <ProductCard key={product.id} product={product} /> ))} </div> ); }","title":"\u0414\u043e\u0440\u043e\u0433\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"},{"location":"questions/react/rerender-optimization/#_7","text":"function ComponentWithObjects({ items, config }) { // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const tableConfig = { sortable: true, filterable: true, pageSize: config.pageSize || 10 }; // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const processedItems = items.map(item => ({ ...item, displayName: `${item.firstName} ${item.lastName}` })); return <DataTable config={tableConfig} items={processedItems} />; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b function OptimizedComponentWithObjects({ items, config }) { const tableConfig = useMemo(() => ({ sortable: true, filterable: true, pageSize: config.pageSize || 10 }), [config.pageSize]); const processedItems = useMemo(() => items.map(item => ({ ...item, displayName: `${item.firstName} ${item.lastName}` })), [items] ); return <DataTable config={tableConfig} items={processedItems} />; }","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432"},{"location":"questions/react/rerender-optimization/#usecallback-","text":"","title":"useCallback - \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"questions/react/rerender-optimization/#_8","text":"function TodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); // \u274c \u041f\u043b\u043e\u0445\u043e: \u043d\u043e\u0432\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0435 const handleToggle = (id) => { onToggle(id); }; const handleDelete = (id) => { onDelete(id); }; const filteredTodos = todos.filter(todo => { if (filter === 'active') return !todo.completed; if (filter === 'completed') return todo.completed; return true; }); return ( <div> <FilterButtons current={filter} onChange={setFilter} /> {filteredTodos.map(todo => ( <TodoItem key={todo.id} todo={todo} onToggle={handleToggle} // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 onDelete={handleDelete} // \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 /> ))} </div> ); } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function OptimizedTodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); const handleToggle = useCallback((id) => { onToggle(id); }, [onToggle]); const handleDelete = useCallback((id) => { onDelete(id); }, [onDelete]); const filteredTodos = useMemo(() => { return todos.filter(todo => { if (filter === 'active') return !todo.completed; if (filter === 'completed') return todo.completed; return true; }); }, [todos, filter]); return ( <div> <FilterButtons current={filter} onChange={setFilter} /> {filteredTodos.map(todo => ( <MemoizedTodoItem key={todo.id} todo={todo} onToggle={handleToggle} onDelete={handleDelete} /> ))} </div> ); } const MemoizedTodoItem = React.memo(TodoItem);","title":"\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"questions/react/rerender-optimization/#_9","text":"function FormComponent({ initialData, onSubmit }) { const [formData, setFormData] = useState(initialData); const [errors, setErrors] = useState({}); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 const validateField = useCallback((name, value) => { const validators = { email: (val) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val) || 'Invalid email', password: (val) => val.length >= 8 || 'Password must be at least 8 characters', confirmPassword: (val) => val === formData.password || 'Passwords do not match' }; const validator = validators[name]; return validator ? validator(value) === true ? null : validator(value) : null; }, [formData.password]); const handleFieldChange = useCallback((name, value) => { setFormData(prev => ({ ...prev, [name]: value })); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 const error = validateField(name, value); setErrors(prev => ({ ...prev, [name]: error })); }, [validateField]); const handleSubmit = useCallback((e) => { e.preventDefault(); // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0435\u0439 const newErrors = {}; Object.entries(formData).forEach(([name, value]) => { const error = validateField(name, value); if (error) newErrors[name] = error; }); if (Object.keys(newErrors).length === 0) { onSubmit(formData); } else { setErrors(newErrors); } }, [formData, validateField, onSubmit]); return ( <form onSubmit={handleSubmit}> <FormField name=\"email\" value={formData.email} error={errors.email} onChange={handleFieldChange} /> <FormField name=\"password\" type=\"password\" value={formData.password} error={errors.password} onChange={handleFieldChange} /> <FormField name=\"confirmPassword\" type=\"password\" value={formData.confirmPassword} error={errors.confirmPassword} onChange={handleFieldChange} /> <button type=\"submit\">Submit</button> </form> ); } const FormField = React.memo(function FormField({ name, value, error, onChange, ...props }) { return ( <div> <input {...props} value={value} onChange={(e) => onChange(name, e.target.value)} /> {error && <span className=\"error\">{error}</span>} </div> ); });","title":"\u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439"},{"location":"questions/react/rerender-optimization/#react-devtools-profiler","text":"","title":"\u0414\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u0441 React DevTools Profiler"},{"location":"questions/react/rerender-optimization/#_10","text":"import { Profiler } from 'react'; function App() { const handleRender = (id, phase, actualDuration, baseDuration, startTime, commitTime) => { console.log('Profiler data:', { id, // \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 Profiler phase, // \"mount\" \u0438\u043b\u0438 \"update\" actualDuration, // \u0412\u0440\u0435\u043c\u044f, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u0440\u0435\u043d\u0434\u0435\u0440 baseDuration, // \u0412\u0440\u0435\u043c\u044f \u0431\u0435\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439 startTime, // \u041a\u043e\u0433\u0434\u0430 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0440\u0435\u043d\u0434\u0435\u0440 commitTime, // \u041a\u043e\u0433\u0434\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b interactions: new Set() // \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0432\u044b\u0437\u0432\u0430\u0432\u0448\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440 }); }; return ( <div> <Profiler id=\"Navigation\" onRender={handleRender}> <Navigation /> </Profiler> <Profiler id=\"MainContent\" onRender={handleRender}> <MainContent /> </Profiler> <Profiler id=\"Sidebar\" onRender={handleRender}> <Sidebar /> </Profiler> </div> ); }","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/react/rerender-optimization/#_11","text":"function useRenderTracker(componentName) { const renderCount = useRef(0); const lastRenderTime = useRef(Date.now()); renderCount.current += 1; useEffect(() => { const now = Date.now(); const timeSinceLastRender = now - lastRenderTime.current; console.log(`${componentName} render #${renderCount.current}`, { timeSinceLastRender, timestamp: new Date().toISOString() }); lastRenderTime.current = now; }); return renderCount.current; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function MyComponent({ data }) { const renderCount = useRenderTracker('MyComponent'); return ( <div> <span>Render count: {renderCount}</span> <div>{JSON.stringify(data)}</div> </div> ); }","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0443\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/react/rerender-optimization/#_12","text":"","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0439"},{"location":"questions/react/rerender-optimization/#_13","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 function BadTodoList({ todos }) { return ( <ul> {todos.map((todo, index) => ( <TodoItem key={index} // \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043f\u0440\u0438 \u0440\u0435\u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 todo={todo} /> ))} </ul> ); } // \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0441\u043f\u0438\u0441\u043a\u0430: // [todo1, todo2, todo3] -> [newTodo, todo1, todo2, todo3] // React \u0434\u0443\u043c\u0430\u0435\u0442: // - key=0: todo1 -> newTodo (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=1: todo2 -> todo1 (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=2: todo3 -> todo2 (\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f) // - key=3: undefined -> todo3 (\u043d\u043e\u0432\u044b\u0439) // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 3 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f + 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432\u043c\u0435\u0441\u0442\u043e 1 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 function GoodTodoList({ todos }) { return ( <ul> {todos.map(todo => ( <TodoItem key={todo.id} // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 todo={todo} /> ))} </ul> ); }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438"},{"location":"questions/react/rerender-optimization/#_14","text":"function CommentsList({ posts }) { return ( <div> {posts.map(post => ( <div key={post.id}> <h3>{post.title}</h3> {post.comments.map(comment => ( <Comment key={`${post.id}-${comment.id}`} // \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u043a\u043b\u044e\u0447 comment={comment} /> ))} </div> ))} </div> ); } // \u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 function DynamicForm({ fields }) { return ( <form> {fields.map((field, index) => ( <FormField key={field.id || `field-${field.type}-${index}`} field={field} /> ))} </form> ); }","title":"\u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438"},{"location":"questions/react/rerender-optimization/#_15","text":"","title":"\u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430"},{"location":"questions/react/rerender-optimization/#context","text":"// \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0432\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f const AppContext = createContext(); function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const [notifications, setNotifications] = useState([]); const value = { user, setUser, theme, setTheme, notifications, setNotifications }; return ( <AppContext.Provider value={value}> {children} </AppContext.Provider> ); } function UserDisplay() { const { user } = useContext(AppContext); // \u0420\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 return <div>{user?.name}</div>; } function ThemeToggle() { const { theme, setTheme } = useContext(AppContext); // \u0420\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>Toggle</button>; }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 Context"},{"location":"questions/react/rerender-optimization/#_16","text":"// \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const UserContext = createContext(); const ThemeContext = createContext(); const NotificationsContext = createContext(); function UserProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return ( <UserContext.Provider value={value}> {children} </UserContext.Provider> ); } function ThemeProvider({ children }) { const [theme, setTheme] = useState('light'); const value = useMemo(() => ({ theme, setTheme }), [theme]); return ( <ThemeContext.Provider value={value}> {children} </ThemeContext.Provider> ); } // \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 function UserDisplay() { const { user } = useContext(UserContext); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <div>{user?.name}</div>; } function ThemeToggle() { const { theme, setTheme } = useContext(ThemeContext); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 theme return <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>Toggle</button>; }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b"},{"location":"questions/react/rerender-optimization/#usesyncexternalstore","text":"","title":"useSyncExternalStore"},{"location":"questions/react/rerender-optimization/#store","text":"// External store (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Zustand store) const useStore = create((set) => ({ count: 0, user: null, increment: () => set((state) => ({ count: state.count + 1 })), setUser: (user) => set({ user }) })); // \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function useCount() { return useSyncExternalStore( useStore.subscribe, () => useStore.getState().count, () => 0 // Server-side \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ); } function useUser() { return useSyncExternalStore( useStore.subscribe, () => useStore.getState().user, () => null ); } // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0432\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 function Counter() { const count = useCount(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count const increment = useStore(state => state.increment); return ( <button onClick={increment}> Count: {count} </button> ); } function UserProfile() { const user = useUser(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 user return <div>{user?.name || 'Anonymous'}</div>; }","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 store"},{"location":"questions/react/rerender-optimization/#_17","text":"","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/react/rerender-optimization/#_18","text":"// \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0440\u0435\u043d\u0434\u0435\u0440 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 function HugeList({ items }) { return ( <div className=\"list\"> {items.map(item => ( <div key={item.id} className=\"list-item\"> <h3>{item.title}</h3> <p>{item.description}</p> <img src={item.thumbnail} alt={item.title} /> </div> ))} </div> ); } // \u041f\u0440\u0438 10,000 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 - \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/react/rerender-optimization/#react-window","text":"import { FixedSizeList as List } from 'react-window'; // \u2705 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style} className=\"list-item\"> <h3>{items[index].title}</h3> <p>{items[index].description}</p> <img src={items[index].thumbnail} alt={items[index].title} /> </div> ); return ( <List height={600} // \u0412\u044b\u0441\u043e\u0442\u0430 \u0432\u0438\u0434\u0438\u043c\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 itemCount={items.length} itemSize={120} // \u0412\u044b\u0441\u043e\u0442\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 width=\"100%\" > {Row} </List> ); } // \u0414\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u043d\u043e\u0439 \u0432\u044b\u0441\u043e\u0442\u044b import { VariableSizeList as VariableList } from 'react-window'; function VariableHeightList({ items }) { const getItemSize = (index) => { // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e const item = items[index]; const baseHeight = 80; const descriptionHeight = item.description.length > 100 ? 40 : 20; return baseHeight + descriptionHeight; }; const Row = ({ index, style }) => ( <div style={style} className=\"list-item\"> <h3>{items[index].title}</h3> <p>{items[index].description}</p> </div> ); return ( <VariableList height={600} itemCount={items.length} itemSize={getItemSize} width=\"100%\" > {Row} </VariableList> ); }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435: react-window"},{"location":"questions/react/rerender-optimization/#_19","text":"function useVirtualization({ itemCount, itemHeight, containerHeight }) { const [scrollTop, setScrollTop] = useState(0); const startIndex = Math.floor(scrollTop / itemHeight); const endIndex = Math.min( itemCount - 1, Math.floor((scrollTop + containerHeight) / itemHeight) ); const visibleItems = []; for (let i = startIndex; i <= endIndex; i++) { visibleItems.push(i); } const totalHeight = itemCount * itemHeight; const offsetY = startIndex * itemHeight; return { startIndex, endIndex, visibleItems, totalHeight, offsetY, setScrollTop }; } function CustomVirtualList({ items, itemHeight = 50 }) { const containerRef = useRef(); const [containerHeight, setContainerHeight] = useState(400); const { visibleItems, totalHeight, offsetY, setScrollTop } = useVirtualization({ itemCount: items.length, itemHeight, containerHeight }); const handleScroll = (e) => { setScrollTop(e.target.scrollTop); }; return ( <div ref={containerRef} className=\"virtual-list\" style={{ height: containerHeight, overflow: 'auto' }} onScroll={handleScroll} > <div style={{ height: totalHeight, position: 'relative' }}> <div style={{ transform: `translateY(${offsetY}px)` }}> {visibleItems.map(index => ( <div key={items[index].id} style={{ height: itemHeight }} className=\"list-item\" > {items[index].title} </div> ))} </div> </div> </div> ); }","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/rerender-optimization/#_20","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438 \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/react/rerender-optimization/#_21","text":"// \u274c \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f function OverOptimized({ name, age }) { // \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const greeting = useMemo(() => `Hello, ${name}!`, [name]); // \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const handleClick = useCallback(() => { console.log('clicked'); }, []); return ( <div onClick={handleClick}> {greeting} You are {age} years old. </div> ); } // \u2705 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e function WellOptimized({ users, onUserSelect }) { // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const sortedUsers = useMemo(() => { return users.sort((a, b) => a.lastName.localeCompare(b.lastName)); }, [users]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b const handleUserSelect = useCallback((userId) => { onUserSelect(userId); }, [onUserSelect]); return ( <div> {sortedUsers.map(user => ( <MemoizedUserCard key={user.id} user={user} onSelect={handleUserSelect} /> ))} </div> ); }","title":"\u041a\u043e\u0433\u0434\u0430 \u041d\u0415 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/react/rerender-optimization/#_22","text":"function PerformanceMonitor({ children }) { const renderCount = useRef(0); const lastRenderTime = useRef(performance.now()); const onRenderCallback = useCallback((id, phase, actualDuration) => { renderCount.current += 1; const now = performance.now(); console.log(`Render #${renderCount.current}:`, { component: id, phase, duration: actualDuration, timeSinceLastRender: now - lastRenderTime.current }); lastRenderTime.current = now; // \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0430\u0445 if (actualDuration > 16) { // > 1 frame at 60fps console.warn(`Slow render detected: ${actualDuration}ms`); } }, []); return ( <Profiler id=\"PerformanceMonitor\" onRender={onRenderCallback}> {children} </Profiler> ); }","title":"\u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/react/rerender-optimization/#senior-","text":"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 React DevTools Profiler \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c React.memo \u0434\u043b\u044f \"\u043b\u0438\u0441\u0442\u043e\u0432\u044b\u0445\" \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 useCallback \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b - \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b - \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 - react-window \u0438\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0418\u0437\u043c\u0435\u0440\u044f\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0440\u0435\u0434\u0438\u0442\u044c","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/rerender-optimization/#_23","text":"```javascript // \u0425\u0443\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 props function useWhyDidYouUpdate(name, props) { const previous = useRef();","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438"},{"location":"questions/react/rerender-optimization_small/","text":"React Rerender Optimization - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0426\u0435\u043b\u044c : \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c React.memo - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 // \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const UserCard = React.memo(function UserCard({ user, theme }) { return ( <div className={`user-card user-card--${theme}`}> {user.name} </div> ); }); // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const CustomMemo = React.memo(UserCard, (prevProps, nextProps) => { return ( prevProps.user.id === nextProps.user.id && prevProps.theme === nextProps.theme ); }); useMemo - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 function ProductList({ products, filters, sortBy }) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filteredProducts = useMemo(() => { return products .filter(p => matchesFilters(p, filters)) .sort(getSortFunction(sortBy)); }, [products, filters, sortBy]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u043f\u0441\u043e\u0432 const tableConfig = useMemo(() => ({ sortable: true, pageSize: 10 }), []); return <ProductTable items={filteredProducts} config={tableConfig} />; } useCallback - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 function TodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const handleToggle = useCallback((id) => { onToggle(id); }, [onToggle]); const handleDelete = useCallback((id) => { onDelete(id); }, [onDelete]); const filteredTodos = useMemo(() => todos.filter(getFilterFunction(filter)), [todos, filter] ); return ( <div> {filteredTodos.map(todo => ( <MemoizedTodoItem key={todo.id} todo={todo} onToggle={handleToggle} onDelete={handleDelete} /> ))} </div> ); } \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 // \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a key \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 {todos.map((todo, index) => <TodoItem key={index} todo={todo} />)} // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)} // \u2705 \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {posts.map(post => post.comments.map(comment => ( <Comment key={`${post.id}-${comment.id}`} comment={comment} /> )) )} Context \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 // \u274c \u0412\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 const AppContext = createContext(); function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const value = { user, setUser, theme, setTheme }; // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 return <AppContext.Provider value={value}>{children}</AppContext.Provider>; } \u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b // \u2705 \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const UserContext = createContext(); const ThemeContext = createContext(); function UserProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return <UserContext.Provider value={value}>{children}</UserContext.Provider>; } // \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: useSyncExternalStore // \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f external store function useCount() { return useSyncExternalStore( store.subscribe, () => store.getState().count, () => 0 // SSR value ); } function Counter() { const count = useCount(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count return <div>{count}</div>; } Virtualization \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 react-window import { FixedSizeList as List } from 'react-window'; function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].title} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); } Variable height import { VariableSizeList } from 'react-window'; function VariableList({ items }) { const getItemSize = (index) => items[index].height || 80; return ( <VariableSizeList height={600} itemCount={items.length} itemSize={getItemSize} width=\"100%\" > {Row} </VariableSizeList> ); } DevTools Profiler Profiler API import { Profiler } from 'react'; function App() { const handleRender = (id, phase, actualDuration, baseDuration) => { if (actualDuration > 16) { // > 1 frame at 60fps console.warn(`Slow render: ${id} took ${actualDuration}ms`); } }; return ( <Profiler id=\"MainContent\" onRender={handleRender}> <MainContent /> </Profiler> ); } Custom render tracker function useRenderTracker(name) { const renderCount = useRef(0); renderCount.current += 1; useEffect(() => { console.log(`${name} render #${renderCount.current}`); }); return renderCount.current; } Why did you update function useWhyDidYouUpdate(name, props) { const previous = useRef(); useEffect(() => { if (previous.current) { const changedProps = Object.entries(props).reduce((result, [key, val]) => { if (previous.current[key] !== val) { result[key] = { before: previous.current[key], after: val }; } return result; }, {}); if (Object.keys(changedProps).length > 0) { console.log(`${name} changed props:`, changedProps); } } previous.current = props; }); } \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u041a\u043e\u0433\u0434\u0430 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c // \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const expensiveResult = useMemo(() => data.reduce(complexCalculation), [data] ); // \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 props const config = useMemo(() => ({ sortable: true }), []); // \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const handleClick = useCallback((id) => onClick(id), [onClick]); // \u274c \u041d\u0415 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const greeting = useMemo(() => `Hello ${name}`, [name]); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435 State colocation // \u274c \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function App() { const [userQuery, setUserQuery] = useState(''); const [productQuery, setProductQuery] = useState(''); return ( <div> <UserSearch query={userQuery} onQueryChange={setUserQuery} /> <ProductSearch query={productQuery} onQueryChange={setProductQuery} /> </div> ); } // \u2705 \u041b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function UserSearch() { const [query, setQuery] = useState(''); // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 return <input value={query} onChange={e => setQuery(e.target.value)} />; } Anti-patterns \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f // \u274c \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u043e function Component({ name }) { const greeting = useMemo(() => `Hello ${name}`, [name]); const handleClick = useCallback(() => console.log('click'), []); return <div onClick={handleClick}>{greeting}</div>; } // \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u043b\u0443\u0447\u0448\u0435 function Component({ name }) { return <div onClick={() => console.log('click')}>Hello {name}</div>; } \u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 // \u274c \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 function Component({ items, options }) { const filtered = useMemo(() => items.filter(matchesOptions(options)), // options \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c [items, options] ); } // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 function Component({ items, sortBy, filterBy }) { const filtered = useMemo(() => items.filter(item => item[filterBy]).sort((a, b) => a[sortBy] - b[sortBy]), [items, sortBy, filterBy] ); } \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 // \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 {items.map((item, i) => <Item key={i} item={item} />)} // \u274c \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {items.map(item => <Item key={Math.random()} item={item} />)} // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {items.map(item => <Item key={item.id} item={item} />)} Performance measurement // Benchmark \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function BenchmarkWrapper({ children, name }) { const startTime = useRef(); startTime.current = performance.now(); useLayoutEffect(() => { const duration = performance.now() - startTime.current; console.log(`${name} render took: ${duration.toFixed(2)}ms`); }); return children; } Senior Rules Profile first - DevTools Profiler \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b React.memo \u0434\u043b\u044f \u043b\u0438\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u043d\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432 useCallback \u0442\u043e\u043b\u044c\u043a\u043e \u0441 memo - \u0438\u043d\u0430\u0447\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 - \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b - \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f 1000+ \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 - react-window State colocation - \u0434\u0435\u0440\u0436\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043b\u0438\u0436\u0435 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0418\u0437\u043c\u0435\u0440\u044f\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0440\u0435\u0434\u0438\u0442\u044c Don't optimize early - \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 > \u043f\u0440\u0435\u0436\u0434\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Debugging \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b React DevTools Profiler - \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 why-did-you-render - npm \u043f\u0430\u043a\u0435\u0442 \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 React.StrictMode - \u0434\u0432\u0430\u0436\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u044b \u0432 dev Performance API - \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u043d\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u044f\u0434!","title":"React Rerender Optimization - Senior Cheat Sheet (small)"},{"location":"questions/react/rerender-optimization_small/#react-rerender-optimization-senior-cheat-sheet-small","text":"","title":"React Rerender Optimization - Senior Cheat Sheet (small)"},{"location":"questions/react/rerender-optimization_small/#_1","text":"\u0426\u0435\u043b\u044c : \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044b, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"questions/react/rerender-optimization_small/#reactmemo-","text":"// \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const UserCard = React.memo(function UserCard({ user, theme }) { return ( <div className={`user-card user-card--${theme}`}> {user.name} </div> ); }); // \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const CustomMemo = React.memo(UserCard, (prevProps, nextProps) => { return ( prevProps.user.id === nextProps.user.id && prevProps.theme === nextProps.theme ); });","title":"React.memo - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/react/rerender-optimization_small/#usememo-","text":"function ProductList({ products, filters, sortBy }) { // \u0422\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const filteredProducts = useMemo(() => { return products .filter(p => matchesFilters(p, filters)) .sort(getSortFunction(sortBy)); }, [products, filters, sortBy]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u043f\u0441\u043e\u0432 const tableConfig = useMemo(() => ({ sortable: true, pageSize: 10 }), []); return <ProductTable items={filteredProducts} config={tableConfig} />; }","title":"useMemo - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"},{"location":"questions/react/rerender-optimization_small/#usecallback-","text":"function TodoList({ todos, onToggle, onDelete }) { const [filter, setFilter] = useState('all'); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 const handleToggle = useCallback((id) => { onToggle(id); }, [onToggle]); const handleDelete = useCallback((id) => { onDelete(id); }, [onDelete]); const filteredTodos = useMemo(() => todos.filter(getFilterFunction(filter)), [todos, filter] ); return ( <div> {filteredTodos.map(todo => ( <MemoizedTodoItem key={todo.id} todo={todo} onToggle={handleToggle} onDelete={handleDelete} /> ))} </div> ); }","title":"useCallback - \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"questions/react/rerender-optimization_small/#_2","text":"// \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u0430\u043a key \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 {todos.map((todo, index) => <TodoItem key={index} todo={todo} />)} // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)} // \u2705 \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {posts.map(post => post.comments.map(comment => ( <Comment key={`${post.id}-${comment.id}`} comment={comment} /> )) )}","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438"},{"location":"questions/react/rerender-optimization_small/#context","text":"","title":"Context \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/rerender-optimization_small/#_3","text":"// \u274c \u0412\u0441\u0435 consumers \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 const AppContext = createContext(); function AppProvider({ children }) { const [user, setUser] = useState(null); const [theme, setTheme] = useState('light'); const value = { user, setUser, theme, setTheme }; // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 return <AppContext.Provider value={value}>{children}</AppContext.Provider>; }","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430"},{"location":"questions/react/rerender-optimization_small/#1","text":"// \u2705 \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b const UserContext = createContext(); const ThemeContext = createContext(); function UserProvider({ children }) { const [user, setUser] = useState(null); const value = useMemo(() => ({ user, setUser }), [user]); return <UserContext.Provider value={value}>{children}</UserContext.Provider>; } // \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 1: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b"},{"location":"questions/react/rerender-optimization_small/#2-usesyncexternalstore","text":"// \u0421\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f external store function useCount() { return useSyncExternalStore( store.subscribe, () => store.getState().count, () => 0 // SSR value ); } function Counter() { const count = useCount(); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count return <div>{count}</div>; }","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 2: useSyncExternalStore"},{"location":"questions/react/rerender-optimization_small/#virtualization","text":"","title":"Virtualization \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432"},{"location":"questions/react/rerender-optimization_small/#react-window","text":"import { FixedSizeList as List } from 'react-window'; function VirtualizedList({ items }) { const Row = ({ index, style }) => ( <div style={style}> {items[index].title} </div> ); return ( <List height={600} itemCount={items.length} itemSize={50} width=\"100%\" > {Row} </List> ); }","title":"react-window"},{"location":"questions/react/rerender-optimization_small/#variable-height","text":"import { VariableSizeList } from 'react-window'; function VariableList({ items }) { const getItemSize = (index) => items[index].height || 80; return ( <VariableSizeList height={600} itemCount={items.length} itemSize={getItemSize} width=\"100%\" > {Row} </VariableSizeList> ); }","title":"Variable height"},{"location":"questions/react/rerender-optimization_small/#devtools-profiler","text":"","title":"DevTools Profiler"},{"location":"questions/react/rerender-optimization_small/#profiler-api","text":"import { Profiler } from 'react'; function App() { const handleRender = (id, phase, actualDuration, baseDuration) => { if (actualDuration > 16) { // > 1 frame at 60fps console.warn(`Slow render: ${id} took ${actualDuration}ms`); } }; return ( <Profiler id=\"MainContent\" onRender={handleRender}> <MainContent /> </Profiler> ); }","title":"Profiler API"},{"location":"questions/react/rerender-optimization_small/#custom-render-tracker","text":"function useRenderTracker(name) { const renderCount = useRef(0); renderCount.current += 1; useEffect(() => { console.log(`${name} render #${renderCount.current}`); }); return renderCount.current; }","title":"Custom render tracker"},{"location":"questions/react/rerender-optimization_small/#why-did-you-update","text":"function useWhyDidYouUpdate(name, props) { const previous = useRef(); useEffect(() => { if (previous.current) { const changedProps = Object.entries(props).reduce((result, [key, val]) => { if (previous.current[key] !== val) { result[key] = { before: previous.current[key], after: val }; } return result; }, {}); if (Object.keys(changedProps).length > 0) { console.log(`${name} changed props:`, changedProps); } } previous.current = props; }); }","title":"Why did you update"},{"location":"questions/react/rerender-optimization_small/#_4","text":"","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"questions/react/rerender-optimization_small/#_5","text":"// \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const expensiveResult = useMemo(() => data.reduce(complexCalculation), [data] ); // \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 props const config = useMemo(() => ({ sortable: true }), []); // \u2705 \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f memo \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 const handleClick = useCallback((id) => onClick(id), [onClick]); // \u274c \u041d\u0415 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f const greeting = useMemo(() => `Hello ${name}`, [name]); // \u0418\u0437\u043b\u0438\u0448\u043d\u0435","title":"\u041a\u043e\u0433\u0434\u0430 \u043c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/react/rerender-optimization_small/#state-colocation","text":"// \u274c \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 function App() { const [userQuery, setUserQuery] = useState(''); const [productQuery, setProductQuery] = useState(''); return ( <div> <UserSearch query={userQuery} onQueryChange={setUserQuery} /> <ProductSearch query={productQuery} onQueryChange={setProductQuery} /> </div> ); } // \u2705 \u041b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f function UserSearch() { const [query, setQuery] = useState(''); // \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 return <input value={query} onChange={e => setQuery(e.target.value)} />; }","title":"State colocation"},{"location":"questions/react/rerender-optimization_small/#anti-patterns","text":"","title":"Anti-patterns"},{"location":"questions/react/rerender-optimization_small/#_6","text":"// \u274c \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u043e function Component({ name }) { const greeting = useMemo(() => `Hello ${name}`, [name]); const handleClick = useCallback(() => console.log('click'), []); return <div onClick={handleClick}>{greeting}</div>; } // \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u043b\u0443\u0447\u0448\u0435 function Component({ name }) { return <div onClick={() => console.log('click')}>Hello {name}</div>; }","title":"\u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/rerender-optimization_small/#_7","text":"// \u274c \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 function Component({ items, options }) { const filtered = useMemo(() => items.filter(matchesOptions(options)), // options \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c [items, options] ); } // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 function Component({ items, sortBy, filterBy }) { const filtered = useMemo(() => items.filter(item => item[filterBy]).sort((a, b) => a[sortBy] - b[sortBy]), [items, sortBy, filterBy] ); }","title":"\u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438"},{"location":"questions/react/rerender-optimization_small/#_8","text":"// \u274c \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 {items.map((item, i) => <Item key={i} item={item} />)} // \u274c \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {items.map(item => <Item key={Math.random()} item={item} />)} // \u2705 \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 {items.map(item => <Item key={item.id} item={item} />)}","title":"\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438"},{"location":"questions/react/rerender-optimization_small/#performance-measurement","text":"// Benchmark \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 function BenchmarkWrapper({ children, name }) { const startTime = useRef(); startTime.current = performance.now(); useLayoutEffect(() => { const duration = performance.now() - startTime.current; console.log(`${name} render took: ${duration.toFixed(2)}ms`); }); return children; }","title":"Performance measurement"},{"location":"questions/react/rerender-optimization_small/#senior-rules","text":"Profile first - DevTools Profiler \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b React.memo \u0434\u043b\u044f \u043b\u0438\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 useMemo \u0434\u043b\u044f \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u043d\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432 useCallback \u0442\u043e\u043b\u044c\u043a\u043e \u0441 memo - \u0438\u043d\u0430\u0447\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 - \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b - \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f 1000+ \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 - react-window State colocation - \u0434\u0435\u0440\u0436\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043b\u0438\u0436\u0435 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0418\u0437\u043c\u0435\u0440\u044f\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0440\u0435\u0434\u0438\u0442\u044c Don't optimize early - \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 > \u043f\u0440\u0435\u0436\u0434\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f","title":"Senior Rules"},{"location":"questions/react/rerender-optimization_small/#debugging","text":"React DevTools Profiler - \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 why-did-you-render - npm \u043f\u0430\u043a\u0435\u0442 \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 React.StrictMode - \u0434\u0432\u0430\u0436\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u044b \u0432 dev Performance API - \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u0443\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u043d\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u044f\u0434!","title":"Debugging \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b"},{"location":"questions/react/ssr-rsc/","text":"SSR/SSG \u0438 React Server Components \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0443 React-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Server-Side Rendering (SSR), Static Site Generation (SSG) \u0438 \u043d\u043e\u0432\u044b\u0435 React Server Components (RSC). \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 Server-Side Rendering (SSR) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : SSR - \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 React-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e HTML \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 (FCP) - \u041b\u0443\u0447\u0448\u0435\u0435 SEO (\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0438\u043a\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0439 HTML) - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 - \u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043c\u0435\u0442\u0430\u0442\u0435\u0433\u0438 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0412\u0440\u0435\u043c\u044f \u0434\u043e \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (TTI) \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439 // \u041f\u0440\u0438\u043c\u0435\u0440 SSR \u0441 Next.js export async function getServerSideProps(context) { const data = await fetchUserData(context.params.id); return { props: { user: data, }, }; } export default function UserPage({ user }) { return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); } Static Site Generation (SSG) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : SSG - \u044d\u0442\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 HTML \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c - \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 SEO - \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 CDN - \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446 - \u041d\u0443\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 // \u041f\u0440\u0438\u043c\u0435\u0440 SSG \u0441 Next.js export async function getStaticProps() { const posts = await fetchPosts(); return { props: { posts, }, // \u0420\u0435\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0435 60 \u0441\u0435\u043a\u0443\u043d\u0434 (ISR) revalidate: 60, }; } export async function getStaticPaths() { const posts = await fetchPosts(); const paths = posts.map((post) => ({ params: { id: post.id }, })); return { paths, fallback: 'blocking', // \u0438\u043b\u0438 true, false }; } React Server Components (RSC) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : RSC - \u044d\u0442\u043e \u043d\u043e\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430, \u0433\u0434\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 : - \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 - \u0418\u043c\u0435\u044e\u0442 \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c - \u041d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0431\u0430\u043d\u0434\u043b - \u041c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c async/await \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // Server Component (\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435) async function BlogPost({ id }) { // \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 const post = await db.posts.findById(id); const comments = await db.comments.findByPostId(id); return ( <article> <h1>{post.title}</h1> <p>{post.content}</p> {/* Client Component \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 */} <CommentSection comments={comments} /> </article> ); } // Client Component (\u043e\u0442\u043c\u0435\u0447\u0435\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439) 'use client'; function CommentSection({ comments }) { const [newComment, setNewComment] = useState(''); const handleSubmit = async (e) => { e.preventDefault(); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f }; return ( <div> {comments.map(comment => ( <div key={comment.id}>{comment.text}</div> ))} <form onSubmit={handleSubmit}> <textarea value={newComment} onChange={(e) => setNewComment(e.target.value)} /> <button type=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439</button> </form> </div> ); } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0410\u0441\u043f\u0435\u043a\u0442 SSR SSG RSC \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f SEO \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0414\u0430 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e \u0414\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u043d\u0434\u043b\u0430 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u041c\u0435\u043d\u044c\u0448\u0435 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041f\u0440\u044f\u043c\u043e\u0439 \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 : - \u041d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e HTML - \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f - \u041f\u0440\u043e\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 import { Suspense } from 'react'; import dynamic from 'next/dynamic'; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 const DynamicComponent = dynamic( () => import('./HeavyComponent'), { ssr: false, loading: () => <div>Loading...</div> } ); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Suspense \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 function App() { return ( <div> <header>Static Header</header> <Suspense fallback={<div>Loading content...</div>}> <DynamicContent /> </Suspense> </div> ); } \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Selective Hydration : // React 18 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f import { hydrateRoot } from 'react-dom/client'; const container = document.getElementById('root'); hydrateRoot(container, <App />); Streaming SSR : // \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u0439 SSR \u0432 Next.js App Router export default function Layout({ children }) { return ( <html> <body> <Suspense fallback={<HeaderSkeleton />}> <Header /> </Suspense> <main> <Suspense fallback={<ContentSkeleton />}> {children} </Suspense> </main> </body> </html> ); } Best Practices \u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 : SSG \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 SSR \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 RSC \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0431\u0430\u043d\u0434\u043b\u0430 : ```javascript // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 Server \u0438 Client \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b // app/page.js (Server Component) import ClientComponent from './ClientComponent'; export default async function Page() { const data = await fetch('...'); return ( <div> <h1>Server-rendered content</h1> <ClientComponent data={data} /> </div> ); } ``` \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c : ```javascript // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Server Actions \u0434\u043b\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u0439 async function createPost(formData) { 'use server'; const title = formData.get('title'); await db.posts.create({ title }); revalidatePath('/posts'); } export default function CreatePost() { return ( Create ); } ``` \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Event Loop - \u0414\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 Concurrent Rendering - React 18 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 SSR, SSG \u0438 RSC - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Next.js \u0438\u043b\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 impact \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 SEO - \u0417\u043d\u0430\u043d\u0438\u0435 React 18+ \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 (Concurrent Rendering, Suspense) \u0427\u0430\u0441\u0442\u044b\u0435 \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438 : - \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useEffect \u0432 SSR - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439 \u0438\u0437-\u0437\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041d\u0435\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 Server/Client \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u043e\u043f\u0430\u0434\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 RSC","title":"SSR/SSG \u0438 React Server Components"},{"location":"questions/react/ssr-rsc/#ssrssg-react-server-components","text":"","title":"SSR/SSG \u0438 React Server Components"},{"location":"questions/react/ssr-rsc/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0443 React-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Server-Side Rendering (SSR), Static Site Generation (SSG) \u0438 \u043d\u043e\u0432\u044b\u0435 React Server Components (RSC).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/react/ssr-rsc/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/react/ssr-rsc/#server-side-rendering-ssr","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : SSR - \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 React-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e HTML \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 (FCP) - \u041b\u0443\u0447\u0448\u0435\u0435 SEO (\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0438\u043a\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0439 HTML) - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 - \u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043c\u0435\u0442\u0430\u0442\u0435\u0433\u0438 \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 - \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0412\u0440\u0435\u043c\u044f \u0434\u043e \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (TTI) \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439 // \u041f\u0440\u0438\u043c\u0435\u0440 SSR \u0441 Next.js export async function getServerSideProps(context) { const data = await fetchUserData(context.params.id); return { props: { user: data, }, }; } export default function UserPage({ user }) { return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); }","title":"Server-Side Rendering (SSR)"},{"location":"questions/react/ssr-rsc/#static-site-generation-ssg","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : SSG - \u044d\u0442\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 HTML \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 : - \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c - \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 SEO - \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 CDN - \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 : - \u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446 - \u041d\u0443\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 // \u041f\u0440\u0438\u043c\u0435\u0440 SSG \u0441 Next.js export async function getStaticProps() { const posts = await fetchPosts(); return { props: { posts, }, // \u0420\u0435\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0435 60 \u0441\u0435\u043a\u0443\u043d\u0434 (ISR) revalidate: 60, }; } export async function getStaticPaths() { const posts = await fetchPosts(); const paths = posts.map((post) => ({ params: { id: post.id }, })); return { paths, fallback: 'blocking', // \u0438\u043b\u0438 true, false }; }","title":"Static Site Generation (SSG)"},{"location":"questions/react/ssr-rsc/#react-server-components-rsc","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 : RSC - \u044d\u0442\u043e \u043d\u043e\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430, \u0433\u0434\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 : - \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 - \u0418\u043c\u0435\u044e\u0442 \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c - \u041d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0431\u0430\u043d\u0434\u043b - \u041c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c async/await \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e // Server Component (\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435) async function BlogPost({ id }) { // \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 const post = await db.posts.findById(id); const comments = await db.comments.findByPostId(id); return ( <article> <h1>{post.title}</h1> <p>{post.content}</p> {/* Client Component \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 */} <CommentSection comments={comments} /> </article> ); } // Client Component (\u043e\u0442\u043c\u0435\u0447\u0435\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439) 'use client'; function CommentSection({ comments }) { const [newComment, setNewComment] = useState(''); const handleSubmit = async (e) => { e.preventDefault(); // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f }; return ( <div> {comments.map(comment => ( <div key={comment.id}>{comment.text}</div> ))} <form onSubmit={handleSubmit}> <textarea value={newComment} onChange={(e) => setNewComment(e.target.value)} /> <button type=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439</button> </form> </div> ); }","title":"React Server Components (RSC)"},{"location":"questions/react/ssr-rsc/#_3","text":"\u0410\u0441\u043f\u0435\u043a\u0442 SSR SSG RSC \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f SEO \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0414\u0430 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e \u0414\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u043d\u0434\u043b\u0430 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u041c\u0435\u043d\u044c\u0448\u0435 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041f\u0440\u044f\u043c\u043e\u0439","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432"},{"location":"questions/react/ssr-rsc/#_4","text":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 : - \u041d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e HTML - \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f - \u041f\u0440\u043e\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 // \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 import { Suspense } from 'react'; import dynamic from 'next/dynamic'; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 const DynamicComponent = dynamic( () => import('./HeavyComponent'), { ssr: false, loading: () => <div>Loading...</div> } ); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Suspense \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 function App() { return ( <div> <header>Static Header</header> <Suspense fallback={<div>Loading content...</div>}> <DynamicContent /> </Suspense> </div> ); }","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438"},{"location":"questions/react/ssr-rsc/#_5","text":"Selective Hydration : // React 18 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f import { hydrateRoot } from 'react-dom/client'; const container = document.getElementById('root'); hydrateRoot(container, <App />); Streaming SSR : // \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u0439 SSR \u0432 Next.js App Router export default function Layout({ children }) { return ( <html> <body> <Suspense fallback={<HeaderSkeleton />}> <Header /> </Suspense> <main> <Suspense fallback={<ContentSkeleton />}> {children} </Suspense> </main> </body> </html> ); }","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/react/ssr-rsc/#best-practices","text":"\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 : SSG \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 SSR \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 RSC \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0431\u0430\u043d\u0434\u043b\u0430 : ```javascript // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 Server \u0438 Client \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b // app/page.js (Server Component) import ClientComponent from './ClientComponent'; export default async function Page() { const data = await fetch('...'); return ( <div> <h1>Server-rendered content</h1> <ClientComponent data={data} /> </div> ); } ``` \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c : ```javascript // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Server Actions \u0434\u043b\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u0439 async function createPost(formData) { 'use server'; const title = formData.get('title'); await db.posts.create({ title }); revalidatePath('/posts'); } export default function CreatePost() { return ( Create ); } ```","title":"Best Practices"},{"location":"questions/react/ssr-rsc/#_6","text":"Event Loop - \u0414\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 Concurrent Rendering - React 18 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Performance Optimization - \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/ssr-rsc/#_7","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 SSR, SSG \u0438 RSC - \u0417\u043d\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Next.js \u0438\u043b\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 impact \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 SEO - \u0417\u043d\u0430\u043d\u0438\u0435 React 18+ \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 (Concurrent Rendering, Suspense) \u0427\u0430\u0441\u0442\u044b\u0435 \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438 : - \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 useEffect \u0432 SSR - \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0435\u0439 \u0438\u0437-\u0437\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041d\u0435\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 Server/Client \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u043e\u043f\u0430\u0434\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 RSC","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/react/ssr-rsc_small/","text":"SSR/SSG & React Server Components - Senior Cheat Sheet (small) \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b SSR (Server-Side Rendering) \u0427\u0442\u043e : \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e HTML \u041f\u043b\u044e\u0441\u044b : \u0411\u044b\u0441\u0442\u0440\u044b\u0439 FCP, \u043b\u0443\u0447\u0448\u0435\u0435 SEO, \u0440\u0430\u0431\u043e\u0442\u0430 \u043d\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438, \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 TTI // Next.js SSR export async function getServerSideProps(context) { const data = await fetchUserData(context.params.id); return { props: { user: data } }; } export default function UserPage({ user }) { return <div>{user.name}</div>; } SSG (Static Site Generation) \u0427\u0442\u043e : \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e HTML \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u041f\u043b\u044e\u0441\u044b : \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, CDN, \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 SEO \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u0435 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 // Next.js SSG + ISR export async function getStaticProps() { const posts = await fetchPosts(); return { props: { posts }, revalidate: 60 // ISR - \u0440\u0435\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0435 60 \u0441\u0435\u043a }; } export async function getStaticPaths() { const posts = await fetchPosts(); return { paths: posts.map(p => ({ params: { id: p.id } })), fallback: 'blocking' }; } RSC (React Server Components) \u0427\u0442\u043e : \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0422\u041e\u041b\u042c\u041a\u041e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u041f\u043b\u044e\u0441\u044b : \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB, \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u0431\u0430\u043d\u0434\u043b, async/await \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u043e\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430, \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c // Server Component (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 Next.js App Router) async function BlogPost({ id }) { const post = await db.posts.findById(id); // \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB const comments = await db.comments.findByPostId(id); return ( <article> <h1>{post.title}</h1> <CommentSection comments={comments} /> {/* Client Component */} </article> ); } // Client Component 'use client'; function CommentSection({ comments }) { const [newComment, setNewComment] = useState(''); // \u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c } \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 SSR SSG RSC Performance \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f SEO \u2705 \u2705 \u2705 Dynamic Content \u2705 \u274c (ISR) \u2705 Bundle Size \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u041c\u0435\u043d\u044c\u0448\u0435 DB Access \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041f\u0440\u044f\u043c\u043e\u0439 Complexity \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438 Mismatch \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 // \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440/\u043a\u043b\u0438\u0435\u043d\u0442 function Component() { const [time, setTime] = useState(Date.now()); // \u0420\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 return <div>{time}</div>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 - useEffect \u0438\u043b\u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 import dynamic from 'next/dynamic'; const ClientOnlyComponent = dynamic( () => import('./ClientComponent'), { ssr: false } ); // \u0418\u043b\u0438 \u0441 useEffect function TimeComponent() { const [time, setTime] = useState(null); useEffect(() => { setTime(Date.now()); }, []); return <div>{time || 'Loading...'}</div>; } Selective Hydration (React 18) // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f \u0441 Suspense function App() { return ( <div> <Header /> {/* \u0413\u0438\u0434\u0440\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 */} <Suspense fallback={<Skeleton />}> <HeavyComponent /> {/* \u0413\u0438\u0434\u0440\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e */} </Suspense> </div> ); } Next.js App Router (RSC) \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 app/ layout.js // Root layout (Server Component) page.js // Home page (Server Component) posts/ page.js // Posts page (Server Component) [id]/ page.js // Dynamic route (Server Component) Server Actions // Server Action async function createPost(formData) { 'use server'; const title = formData.get('title'); await db.posts.create({ title }); revalidatePath('/posts'); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Server Component export default function CreatePost() { return ( <form action={createPost}> <input name=\"title\" /> <button type=\"submit\">Create</button> </form> ); } Data Fetching patterns // \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b async function Page() { const postsPromise = fetchPosts(); const usersPromise = fetchUsers(); const [posts, users] = await Promise.all([postsPromise, usersPromise]); return ( <div> <PostList posts={posts} /> <UserList users={users} /> </div> ); } // \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 export default async function Page() { return ( <div> <Suspense fallback={<PostsSkeleton />}> <Posts /> </Suspense> <Suspense fallback={<CommentsSkeleton />}> <Comments /> </Suspense> </div> ); } Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Streaming SSR // \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 HTML \u0447\u0430\u0441\u0442\u044f\u043c\u0438 import { renderToReadableStream } from 'react-dom/server'; const stream = await renderToReadableStream(<App />, { onError(error) { console.error(error); } }); Bundle optimization // \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Server/Client \u043a\u043e\u0434\u0430 // server-utils.js (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435) export function connectDB() { ... } // Client Component \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c JS 'use client'; export function InteractiveButton() { return <button onClick={() => alert('clicked')}>Click</button>; } Best Practices 1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Server/Client // \u2705 Server Component \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 async function ProductPage({ id }) { const product = await fetchProduct(id); return ( <div> <h1>{product.name}</h1> <AddToCartButton product={product} /> {/* Client \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 */} </div> ); } // \u2705 Client Component \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 'use client'; function AddToCartButton({ product }) { const [loading, setLoading] = useState(false); // \u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443 } 2. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 waterfall \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 // \u274c Waterfall async function BlogPost({ id }) { const post = await fetchPost(id); const author = await fetchAuthor(post.authorId); // \u0416\u0434\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 return <div>...</div>; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b async function BlogPost({ id }) { const [post, author] = await Promise.all([ fetchPost(id), fetchAuthor(id) // \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0435\u043c authorId \u0437\u0430\u0440\u0430\u043d\u0435\u0435 ]); } 3. \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // Next.js \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async function getData() { const res = await fetch('https://api.example.com/data', { next: { revalidate: 3600 } // \u041a\u0435\u0448 \u043d\u0430 1 \u0447\u0430\u0441 }); return res.json(); } Senior Rules SSG > SSR > Client - \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 RSC \u0434\u043b\u044f data-heavy \u043b\u043e\u0433\u0438\u043a\u0438 - \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB Client Components \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0418\u0437\u0431\u0435\u0433\u0430\u0439 waterfall - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 Promise.all Suspense boundaries - \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Server Actions \u0434\u043b\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u0439 \u0431\u0435\u0437 API routes \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 - CDN, fetch cache, React cache \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u044c Core Web Vitals - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e FCP, LCP, CLS \u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SSG - \u0431\u043b\u043e\u0433\u0438, landing pages, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f SSR - e-commerce, dashboards, \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 RSC - \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0442\u044f\u0436\u0435\u043b\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 Client-only - \u0430\u0434\u043c\u0438\u043d\u043a\u0438, SPA \u0441 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c!","title":"SSR/SSG &amp; React Server Components - Senior Cheat Sheet (small)"},{"location":"questions/react/ssr-rsc_small/#ssrssg-react-server-components-senior-cheat-sheet-small","text":"","title":"SSR/SSG &amp; React Server Components - Senior Cheat Sheet (small)"},{"location":"questions/react/ssr-rsc_small/#_1","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b"},{"location":"questions/react/ssr-rsc_small/#ssr-server-side-rendering","text":"\u0427\u0442\u043e : \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e HTML \u041f\u043b\u044e\u0441\u044b : \u0411\u044b\u0441\u0442\u0440\u044b\u0439 FCP, \u043b\u0443\u0447\u0448\u0435\u0435 SEO, \u0440\u0430\u0431\u043e\u0442\u0430 \u043d\u0430 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438, \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 TTI // Next.js SSR export async function getServerSideProps(context) { const data = await fetchUserData(context.params.id); return { props: { user: data } }; } export default function UserPage({ user }) { return <div>{user.name}</div>; }","title":"SSR (Server-Side Rendering)"},{"location":"questions/react/ssr-rsc_small/#ssg-static-site-generation","text":"\u0427\u0442\u043e : \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e HTML \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u041f\u043b\u044e\u0441\u044b : \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, CDN, \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 SEO \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u0435 \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u043a\u0438 // Next.js SSG + ISR export async function getStaticProps() { const posts = await fetchPosts(); return { props: { posts }, revalidate: 60 // ISR - \u0440\u0435\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u044b\u0435 60 \u0441\u0435\u043a }; } export async function getStaticPaths() { const posts = await fetchPosts(); return { paths: posts.map(p => ({ params: { id: p.id } })), fallback: 'blocking' }; }","title":"SSG (Static Site Generation)"},{"location":"questions/react/ssr-rsc_small/#rsc-react-server-components","text":"\u0427\u0442\u043e : \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0422\u041e\u041b\u042c\u041a\u041e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u041f\u043b\u044e\u0441\u044b : \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB, \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u0431\u0430\u043d\u0434\u043b, async/await \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u041c\u0438\u043d\u0443\u0441\u044b : \u041d\u043e\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430, \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c // Server Component (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 Next.js App Router) async function BlogPost({ id }) { const post = await db.posts.findById(id); // \u041f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB const comments = await db.comments.findByPostId(id); return ( <article> <h1>{post.title}</h1> <CommentSection comments={comments} /> {/* Client Component */} </article> ); } // Client Component 'use client'; function CommentSection({ comments }) { const [newComment, setNewComment] = useState(''); // \u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c }","title":"RSC (React Server Components)"},{"location":"questions/react/ssr-rsc_small/#_2","text":"SSR SSG RSC Performance \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f SEO \u2705 \u2705 \u2705 Dynamic Content \u2705 \u274c (ISR) \u2705 Bundle Size \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u041c\u0435\u043d\u044c\u0448\u0435 DB Access \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u041f\u0440\u044f\u043c\u043e\u0439 Complexity \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u041d\u0438\u0437\u043a\u0430\u044f \u0412\u044b\u0441\u043e\u043a\u0430\u044f","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"},{"location":"questions/react/ssr-rsc_small/#_3","text":"","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u0438"},{"location":"questions/react/ssr-rsc_small/#mismatch","text":"// \u274c \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440/\u043a\u043b\u0438\u0435\u043d\u0442 function Component() { const [time, setTime] = useState(Date.now()); // \u0420\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 return <div>{time}</div>; } // \u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 - useEffect \u0438\u043b\u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 import dynamic from 'next/dynamic'; const ClientOnlyComponent = dynamic( () => import('./ClientComponent'), { ssr: false } ); // \u0418\u043b\u0438 \u0441 useEffect function TimeComponent() { const [time, setTime] = useState(null); useEffect(() => { setTime(Date.now()); }, []); return <div>{time || 'Loading...'}</div>; }","title":"Mismatch \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430"},{"location":"questions/react/ssr-rsc_small/#selective-hydration-react-18","text":"// \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u0434\u0440\u0430\u0442\u0430\u0446\u0438\u044f \u0441 Suspense function App() { return ( <div> <Header /> {/* \u0413\u0438\u0434\u0440\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 */} <Suspense fallback={<Skeleton />}> <HeavyComponent /> {/* \u0413\u0438\u0434\u0440\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e */} </Suspense> </div> ); }","title":"Selective Hydration (React 18)"},{"location":"questions/react/ssr-rsc_small/#nextjs-app-router-rsc","text":"","title":"Next.js App Router (RSC)"},{"location":"questions/react/ssr-rsc_small/#_4","text":"app/ layout.js // Root layout (Server Component) page.js // Home page (Server Component) posts/ page.js // Posts page (Server Component) [id]/ page.js // Dynamic route (Server Component)","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"questions/react/ssr-rsc_small/#server-actions","text":"// Server Action async function createPost(formData) { 'use server'; const title = formData.get('title'); await db.posts.create({ title }); revalidatePath('/posts'); } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Server Component export default function CreatePost() { return ( <form action={createPost}> <input name=\"title\" /> <button type=\"submit\">Create</button> </form> ); }","title":"Server Actions"},{"location":"questions/react/ssr-rsc_small/#data-fetching-patterns","text":"// \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b async function Page() { const postsPromise = fetchPosts(); const usersPromise = fetchUsers(); const [posts, users] = await Promise.all([postsPromise, usersPromise]); return ( <div> <PostList posts={posts} /> <UserList users={users} /> </div> ); } // \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 export default async function Page() { return ( <div> <Suspense fallback={<PostsSkeleton />}> <Posts /> </Suspense> <Suspense fallback={<CommentsSkeleton />}> <Comments /> </Suspense> </div> ); }","title":"Data Fetching patterns"},{"location":"questions/react/ssr-rsc_small/#performance","text":"","title":"Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/ssr-rsc_small/#streaming-ssr","text":"// \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 HTML \u0447\u0430\u0441\u0442\u044f\u043c\u0438 import { renderToReadableStream } from 'react-dom/server'; const stream = await renderToReadableStream(<App />, { onError(error) { console.error(error); } });","title":"Streaming SSR"},{"location":"questions/react/ssr-rsc_small/#bundle-optimization","text":"// \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Server/Client \u043a\u043e\u0434\u0430 // server-utils.js (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435) export function connectDB() { ... } // Client Component \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c JS 'use client'; export function InteractiveButton() { return <button onClick={() => alert('clicked')}>Click</button>; }","title":"Bundle optimization"},{"location":"questions/react/ssr-rsc_small/#best-practices","text":"","title":"Best Practices"},{"location":"questions/react/ssr-rsc_small/#1-serverclient","text":"// \u2705 Server Component \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 async function ProductPage({ id }) { const product = await fetchProduct(id); return ( <div> <h1>{product.name}</h1> <AddToCartButton product={product} /> {/* Client \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 */} </div> ); } // \u2705 Client Component \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 'use client'; function AddToCartButton({ product }) { const [loading, setLoading] = useState(false); // \u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443 }","title":"1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Server/Client"},{"location":"questions/react/ssr-rsc_small/#2-waterfall","text":"// \u274c Waterfall async function BlogPost({ id }) { const post = await fetchPost(id); const author = await fetchAuthor(post.authorId); // \u0416\u0434\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 return <div>...</div>; } // \u2705 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b async function BlogPost({ id }) { const [post, author] = await Promise.all([ fetchPost(id), fetchAuthor(id) // \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0435\u043c authorId \u0437\u0430\u0440\u0430\u043d\u0435\u0435 ]); }","title":"2. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 waterfall \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"questions/react/ssr-rsc_small/#3","text":"// Next.js \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async function getData() { const res = await fetch('https://api.example.com/data', { next: { revalidate: 3600 } // \u041a\u0435\u0448 \u043d\u0430 1 \u0447\u0430\u0441 }); return res.json(); }","title":"3. \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/ssr-rsc_small/#senior-rules","text":"SSG > SSR > Client - \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 RSC \u0434\u043b\u044f data-heavy \u043b\u043e\u0433\u0438\u043a\u0438 - \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a DB Client Components \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0418\u0437\u0431\u0435\u0433\u0430\u0439 waterfall - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 Promise.all Suspense boundaries - \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Server Actions \u0434\u043b\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u0439 \u0431\u0435\u0437 API routes \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 - CDN, fetch cache, React cache \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u044c Core Web Vitals - \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e FCP, LCP, CLS","title":"Senior Rules"},{"location":"questions/react/ssr-rsc_small/#_5","text":"SSG - \u0431\u043b\u043e\u0433\u0438, landing pages, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f SSR - e-commerce, dashboards, \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 RSC - \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0442\u044f\u0436\u0435\u043b\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 Client-only - \u0430\u0434\u043c\u0438\u043d\u043a\u0438, SPA \u0441 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : \u041d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c!","title":"\u041a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"},{"location":"questions/react/use-effect/","text":"useEffect \u0438 Side Effects \ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441 \u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c side effects \u0432 React \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e useEffect, \u0438 \u043a\u0430\u043a\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u0438 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438? \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442 useEffect \u2014 \u044d\u0442\u043e React Hook \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 (side effects) \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445. \u041e\u043d \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c componentDidMount, componentDidUpdate \u0438 componentWillUnmount \u0438\u0437 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u044b useEffect \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 import React, { useState, useEffect } from 'react'; function MyComponent() { const [count, setCount] = useState(0); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0430 useEffect(() => { document.title = `Count: ${count}`; }); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count useEffect(() => { console.log('Count changed:', count); }, [count]); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 useEffect(() => { console.log('Component mounted'); }, []); return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(count + 1)}> Increment </button> </div> ); } Cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function TimerComponent() { const [seconds, setSeconds] = useState(0); useEffect(() => { // Setup const interval = setInterval(() => { setSeconds(prev => prev + 1); }, 1000); // Cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u044f return () => { clearInterval(interval); }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 - \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return <div>Timer: {seconds}s</div>; } \u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0441 useEffect \u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (componentDidMount) function ComponentDidMount() { const [data, setData] = useState(null); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 console.log('Component mounted'); // \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 fetchData().then(setData); // Cleanup \u043f\u0440\u0438 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return () => { console.log('Component will unmount'); }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>; } \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 (componentDidUpdate) function ComponentDidUpdate({ userId }) { const [user, setUser] = useState(null); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 userId console.log('User ID changed:', userId); if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 userId return user ? <div>User: {user.name}</div> : <div>No user</div>; } \u0420\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (componentWillUnmount) function EventListenerComponent() { const [windowWidth, setWindowWidth] = useState(window.innerWidth); useEffect(() => { const handleResize = () => { setWindowWidth(window.innerWidth); }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 event listener window.addEventListener('resize', handleResize); // Cleanup - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 listener \u043f\u0440\u0438 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return () => { window.removeEventListener('resize', handleResize); }; }, []); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return <div>Window width: {windowWidth}px</div>; } \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let isCancelled = false; const fetchUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error('Failed to fetch user'); } const userData = await response.json(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u0431\u044b\u043b \u043b\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d if (!isCancelled) { setUser(userData); } } catch (err) { if (!isCancelled) { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; if (userId) { fetchUser(); } // Cleanup return () => { isCancelled = true; }; }, [userId]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; if (!user) return <div>No user found</div>; return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); } 2. Subscriptions \u0438 WebSocket function ChatComponent({ roomId }) { const [messages, setMessages] = useState([]); const [socket, setSocket] = useState(null); useEffect(() => { // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f const ws = new WebSocket(`ws://localhost:8080/chat/${roomId}`); setSocket(ws); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 ws.onopen = () => { console.log('Connected to chat'); }; ws.onmessage = (event) => { const message = JSON.parse(event.data); setMessages(prev => [...prev, message]); }; ws.onerror = (error) => { console.error('WebSocket error:', error); }; // Cleanup return () => { if (ws.readyState === WebSocket.OPEN) { ws.close(); } }; }, [roomId]); const sendMessage = (text) => { if (socket && socket.readyState === WebSocket.OPEN) { socket.send(JSON.stringify({ text, timestamp: Date.now() })); } }; return ( <div> <div> {messages.map((msg, index) => ( <div key={index}>{msg.text}</div> ))} </div> <input onKeyPress={(e) => { if (e.key === 'Enter') { sendMessage(e.target.value); e.target.value = ''; } }} /> </div> ); } 3. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 function useLocalStorage(key, initialValue) { const [storedValue, setStoredValue] = useState(() => { try { const item = window.localStorage.getItem(key); return item ? JSON.parse(item) : initialValue; } catch (error) { console.error('Error reading from localStorage:', error); return initialValue; } }); const setValue = (value) => { try { setStoredValue(value); window.localStorage.setItem(key, JSON.stringify(value)); } catch (error) { console.error('Error writing to localStorage:', error); } }; // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 localStorage \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u043a\u043b\u0430\u0434\u043a\u0430\u0445 useEffect(() => { const handleStorageChange = (e) => { if (e.key === key && e.newValue !== null) { setStoredValue(JSON.parse(e.newValue)); } }; window.addEventListener('storage', handleStorageChange); return () => { window.removeEventListener('storage', handleStorageChange); }; }, [key]); return [storedValue, setValue]; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function SettingsComponent() { const [theme, setTheme] = useLocalStorage('theme', 'light'); return ( <div> <p>Current theme: {theme}</p> <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}> Toggle Theme </button> </div> ); } \u0420\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 1. \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b // \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b function BadExample() { const [count, setCount] = useState(0); const [data, setData] = useState([]); useEffect(() => { // \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0447\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 setData([1, 2, 3]); }, [data]); // data \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437! return <div>{count}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 function GoodExample() { const [count, setCount] = useState(0); const [data, setData] = useState([]); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 setData([1, 2, 3]); }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 return <div>{count}</div>; } 2. \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup // \u274c \u041f\u043b\u043e\u0445\u043e: memory leak function BadTimer() { const [time, setTime] = useState(Date.now()); useEffect(() => { setInterval(() => { setTime(Date.now()); }, 1000); // \u041d\u0435\u0442 cleanup - \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f! }, []); return <div>{new Date(time).toLocaleTimeString()}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 cleanup function GoodTimer() { const [time, setTime] = useState(Date.now()); useEffect(() => { const interval = setInterval(() => { setTime(Date.now()); }, 1000); // Cleanup return () => clearInterval(interval); }, []); return <div>{new Date(time).toLocaleTimeString()}</div>; } 3. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 // \u274c \u041f\u043b\u043e\u0445\u043e: missing dependencies function BadDependencies({ userId }) { const [user, setUser] = useState(null); useEffect(() => { fetchUser(userId).then(setUser); }, []); // userId \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445! return user ? <div>{user.name}</div> : <div>Loading...</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b function GoodDependencies({ userId }) { const [user, setUser] = useState(null); useEffect(() => { if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // userId \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 return user ? <div>{user.name}</div> : <div>Loading...</div>; } 4. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 useEffect // \u274c \u041f\u043b\u043e\u0445\u043e: async \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 useEffect function BadAsync() { const [data, setData] = useState(null); useEffect(async () => { // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435! const result = await fetchData(); setData(result); }, []); return <div>{data}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: async \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430 function GoodAsync() { const [data, setData] = useState(null); useEffect(() => { const loadData = async () => { try { const result = await fetchData(); setData(result); } catch (error) { console.error('Error loading data:', error); } }; loadData(); }, []); return <div>{data}</div>; } \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b 1. \u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 function DataComponent({ url }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { const abortController = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: abortController.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); setData(result); } catch (err) { if (err.name !== 'AbortError') { setError(err.message); } } finally { setLoading(false); } }; fetchData(); // Cleanup - \u043e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 return () => { abortController.abort(); }; }, [url]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return <div>{JSON.stringify(data)}</div>; } 2. Debounced \u044d\u0444\u0444\u0435\u043a\u0442\u044b function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; } function SearchComponent() { const [searchTerm, setSearchTerm] = useState(''); const [results, setResults] = useState([]); const debouncedSearchTerm = useDebounce(searchTerm, 500); useEffect(() => { if (debouncedSearchTerm) { searchAPI(debouncedSearchTerm).then(setResults); } else { setResults([]); } }, [debouncedSearchTerm]); return ( <div> <input value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} placeholder=\"Search...\" /> <ul> {results.map(result => ( <li key={result.id}>{result.title}</li> ))} </ul> </div> ); } 3. \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b function ConditionalEffect({ shouldFetch, userId }) { const [data, setData] = useState(null); useEffect(() => { // \u042d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 if (shouldFetch && userId) { let isCancelled = false; fetchUserData(userId).then(result => { if (!isCancelled) { setData(result); } }); return () => { isCancelled = true; }; } }, [shouldFetch, userId]); return data ? <div>{data.name}</div> : <div>No data</div>; } Custom Hooks \u0441 useEffect \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 // Hook \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API function useAPI(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { if (!url) return; let isCancelled = false; const abortController = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: abortController.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); if (!isCancelled) { setData(result); } } catch (err) { if (!isCancelled && err.name !== 'AbortError') { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchData(); return () => { isCancelled = true; abortController.abort(); }; }, [url]); const refetch = useCallback(() => { if (url) { // Trigger re-fetch by updating a dependency setData(null); setError(null); } }, [url]); return { data, loading, error, refetch }; } // Hook \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 function useIntersectionObserver(targetRef, options = {}) { const [isVisible, setIsVisible] = useState(false); useEffect(() => { const observer = new IntersectionObserver(([entry]) => { setIsVisible(entry.isIntersecting); }, options); const currentTarget = targetRef.current; if (currentTarget) { observer.observe(currentTarget); } return () => { if (currentTarget) { observer.unobserve(currentTarget); } }; }, [targetRef, options]); return isVisible; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 custom hooks function ProductList() { const { data: products, loading, error, refetch } = useAPI('/api/products'); const targetRef = useRef(); const isVisible = useIntersectionObserver(targetRef, { threshold: 0.1 }); useEffect(() => { if (isVisible) { console.log('Product list is visible'); } }, [isVisible]); if (loading) return <div>Loading products...</div>; if (error) return <div>Error: {error}</div>; return ( <div ref={targetRef}> <button onClick={refetch}>Refresh</button> {products?.map(product => ( <div key={product.id}>{product.name}</div> ))} </div> ); } \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 useEffect import { renderHook, act } from '@testing-library/react'; import { render, screen, waitFor } from '@testing-library/react'; // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 custom hook test('useAPI hook fetches data correctly', async () => { const mockData = { id: 1, name: 'Test' }; global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve(mockData) }); const { result } = renderHook(() => useAPI('/api/test')); expect(result.current.loading).toBe(true); expect(result.current.data).toBe(null); await waitFor(() => { expect(result.current.loading).toBe(false); expect(result.current.data).toEqual(mockData); }); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0441 useEffect test('component loads data on mount', async () => { global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ name: 'John Doe' }) }); render(<UserProfile userId=\"123\" />); expect(screen.getByText('Loading...')).toBeInTheDocument(); await waitFor(() => { expect(screen.getByText('John Doe')).toBeInTheDocument(); }); expect(fetch).toHaveBeenCalledWith('/api/users/123'); }); \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 function OptimizedComponent({ filters, sortBy }) { const [data, setData] = useState([]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 const queryParams = useMemo(() => ({ ...filters, sortBy }), [filters, sortBy]); useEffect(() => { fetchData(queryParams).then(setData); }, [queryParams]); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f useMemo return <div>{data.length} items</div>; } Senior-\u0441\u043e\u0432\u0435\u0442\u044b \u0412\u0441\u0435\u0433\u0434\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ESLint \u043f\u0440\u0430\u0432\u0438\u043b\u043e exhaustive-deps \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f memory leaks \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 async \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 useEffect \u041e\u0442\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e AbortController \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 \u0441 useMemo \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0441 proper mocking \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b useEffect \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 useEffect \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438: // \u0412\u043c\u0435\u0441\u0442\u043e useEffect \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useMemo const expensiveValue = useMemo(() => { return computeExpensiveValue(props.data); }, [props.data]); // \u0412\u043c\u0435\u0441\u0442\u043e useEffect \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useCallback const handleClick = useCallback((id) => { onItemClick(id); }, [onItemClick]); // \u0414\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useSyncExternalStore const width = useSyncExternalStore( (callback) => { window.addEventListener('resize', callback); return () => window.removeEventListener('resize', callback); }, () => window.innerWidth ); \ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Context API vs Redux \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 Promises, Async/Await \u0438 Generators Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438","title":"useEffect \u0438 Side Effects"},{"location":"questions/react/use-effect/#useeffect-side-effects","text":"","title":"useEffect \u0438 Side Effects"},{"location":"questions/react/use-effect/#_1","text":"\u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c side effects \u0432 React \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e useEffect, \u0438 \u043a\u0430\u043a\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u0438 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438?","title":"\ud83d\udccb \u0412\u043e\u043f\u0440\u043e\u0441"},{"location":"questions/react/use-effect/#_2","text":"useEffect \u2014 \u044d\u0442\u043e React Hook \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 (side effects) \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445. \u041e\u043d \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c componentDidMount, componentDidUpdate \u0438 componentWillUnmount \u0438\u0437 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.","title":"\ud83d\udca1 \u041e\u0442\u0432\u0435\u0442"},{"location":"questions/react/use-effect/#useeffect","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u044b useEffect"},{"location":"questions/react/use-effect/#_3","text":"import React, { useState, useEffect } from 'react'; function MyComponent() { const [count, setCount] = useState(0); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0430 useEffect(() => { document.title = `Count: ${count}`; }); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 count useEffect(() => { console.log('Count changed:', count); }, [count]); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 useEffect(() => { console.log('Component mounted'); }, []); return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(count + 1)}> Increment </button> </div> ); }","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441"},{"location":"questions/react/use-effect/#cleanup","text":"function TimerComponent() { const [seconds, setSeconds] = useState(0); useEffect(() => { // Setup const interval = setInterval(() => { setSeconds(prev => prev + 1); }, 1000); // Cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u044f return () => { clearInterval(interval); }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 - \u044d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return <div>Timer: {seconds}s</div>; }","title":"Cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"questions/react/use-effect/#useeffect_1","text":"","title":"\u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0441 useEffect"},{"location":"questions/react/use-effect/#componentdidmount","text":"function ComponentDidMount() { const [data, setData] = useState(null); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 console.log('Component mounted'); // \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 fetchData().then(setData); // Cleanup \u043f\u0440\u0438 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return () => { console.log('Component will unmount'); }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>; }","title":"\u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (componentDidMount)"},{"location":"questions/react/use-effect/#componentdidupdate","text":"function ComponentDidUpdate({ userId }) { const [user, setUser] = useState(null); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 userId console.log('User ID changed:', userId); if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 userId return user ? <div>User: {user.name}</div> : <div>No user</div>; }","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 (componentDidUpdate)"},{"location":"questions/react/use-effect/#componentwillunmount","text":"function EventListenerComponent() { const [windowWidth, setWindowWidth] = useState(window.innerWidth); useEffect(() => { const handleResize = () => { setWindowWidth(window.innerWidth); }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 event listener window.addEventListener('resize', handleResize); // Cleanup - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 listener \u043f\u0440\u0438 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return () => { window.removeEventListener('resize', handleResize); }; }, []); // \u042d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 return <div>Window width: {windowWidth}px</div>; }","title":"\u0420\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (componentWillUnmount)"},{"location":"questions/react/use-effect/#_4","text":"","title":"\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/react/use-effect/#1","text":"function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { let isCancelled = false; const fetchUser = async () => { try { setLoading(true); setError(null); const response = await fetch(`/api/users/${userId}`); if (!response.ok) { throw new Error('Failed to fetch user'); } const userData = await response.json(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u0431\u044b\u043b \u043b\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d if (!isCancelled) { setUser(userData); } } catch (err) { if (!isCancelled) { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; if (userId) { fetchUser(); } // Cleanup return () => { isCancelled = true; }; }, [userId]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; if (!user) return <div>No user found</div>; return ( <div> <h1>{user.name}</h1> <p>{user.email}</p> </div> ); }","title":"1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/react/use-effect/#2-subscriptions-websocket","text":"function ChatComponent({ roomId }) { const [messages, setMessages] = useState([]); const [socket, setSocket] = useState(null); useEffect(() => { // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f const ws = new WebSocket(`ws://localhost:8080/chat/${roomId}`); setSocket(ws); // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 ws.onopen = () => { console.log('Connected to chat'); }; ws.onmessage = (event) => { const message = JSON.parse(event.data); setMessages(prev => [...prev, message]); }; ws.onerror = (error) => { console.error('WebSocket error:', error); }; // Cleanup return () => { if (ws.readyState === WebSocket.OPEN) { ws.close(); } }; }, [roomId]); const sendMessage = (text) => { if (socket && socket.readyState === WebSocket.OPEN) { socket.send(JSON.stringify({ text, timestamp: Date.now() })); } }; return ( <div> <div> {messages.map((msg, index) => ( <div key={index}>{msg.text}</div> ))} </div> <input onKeyPress={(e) => { if (e.key === 'Enter') { sendMessage(e.target.value); e.target.value = ''; } }} /> </div> ); }","title":"2. Subscriptions \u0438 WebSocket"},{"location":"questions/react/use-effect/#3","text":"function useLocalStorage(key, initialValue) { const [storedValue, setStoredValue] = useState(() => { try { const item = window.localStorage.getItem(key); return item ? JSON.parse(item) : initialValue; } catch (error) { console.error('Error reading from localStorage:', error); return initialValue; } }); const setValue = (value) => { try { setStoredValue(value); window.localStorage.setItem(key, JSON.stringify(value)); } catch (error) { console.error('Error writing to localStorage:', error); } }; // \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 localStorage \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u043a\u043b\u0430\u0434\u043a\u0430\u0445 useEffect(() => { const handleStorageChange = (e) => { if (e.key === key && e.newValue !== null) { setStoredValue(JSON.parse(e.newValue)); } }; window.addEventListener('storage', handleStorageChange); return () => { window.removeEventListener('storage', handleStorageChange); }; }, [key]); return [storedValue, setValue]; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 function SettingsComponent() { const [theme, setTheme] = useLocalStorage('theme', 'light'); return ( <div> <p>Current theme: {theme}</p> <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}> Toggle Theme </button> </div> ); }","title":"3. \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435"},{"location":"questions/react/use-effect/#_5","text":"","title":"\u0420\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438"},{"location":"questions/react/use-effect/#1_1","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b function BadExample() { const [count, setCount] = useState(0); const [data, setData] = useState([]); useEffect(() => { // \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0447\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 setData([1, 2, 3]); }, [data]); // data \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437! return <div>{count}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 function GoodExample() { const [count, setCount] = useState(0); const [data, setData] = useState([]); useEffect(() => { // \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 setData([1, 2, 3]); }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 return <div>{count}</div>; }","title":"1. \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b"},{"location":"questions/react/use-effect/#2-cleanup","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: memory leak function BadTimer() { const [time, setTime] = useState(Date.now()); useEffect(() => { setInterval(() => { setTime(Date.now()); }, 1000); // \u041d\u0435\u0442 cleanup - \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f! }, []); return <div>{new Date(time).toLocaleTimeString()}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 cleanup function GoodTimer() { const [time, setTime] = useState(Date.now()); useEffect(() => { const interval = setInterval(() => { setTime(Date.now()); }, 1000); // Cleanup return () => clearInterval(interval); }, []); return <div>{new Date(time).toLocaleTimeString()}</div>; }","title":"2. \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup"},{"location":"questions/react/use-effect/#3_1","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: missing dependencies function BadDependencies({ userId }) { const [user, setUser] = useState(null); useEffect(() => { fetchUser(userId).then(setUser); }, []); // userId \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445! return user ? <div>{user.name}</div> : <div>Loading...</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b function GoodDependencies({ userId }) { const [user, setUser] = useState(null); useEffect(() => { if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // userId \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 return user ? <div>{user.name}</div> : <div>Loading...</div>; }","title":"3. \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438"},{"location":"questions/react/use-effect/#4-async-useeffect","text":"// \u274c \u041f\u043b\u043e\u0445\u043e: async \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 useEffect function BadAsync() { const [data, setData] = useState(null); useEffect(async () => { // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435! const result = await fetchData(); setData(result); }, []); return <div>{data}</div>; } // \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: async \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430 function GoodAsync() { const [data, setData] = useState(null); useEffect(() => { const loadData = async () => { try { const result = await fetchData(); setData(result); } catch (error) { console.error('Error loading data:', error); } }; loadData(); }, []); return <div>{data}</div>; }","title":"4. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 useEffect"},{"location":"questions/react/use-effect/#_6","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/react/use-effect/#1_2","text":"function DataComponent({ url }) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { const abortController = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: abortController.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); setData(result); } catch (err) { if (err.name !== 'AbortError') { setError(err.message); } } finally { setLoading(false); } }; fetchData(); // Cleanup - \u043e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 return () => { abortController.abort(); }; }, [url]); if (loading) return <div>Loading...</div>; if (error) return <div>Error: {error}</div>; return <div>{JSON.stringify(data)}</div>; }","title":"1. \u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"questions/react/use-effect/#2-debounced","text":"function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; } function SearchComponent() { const [searchTerm, setSearchTerm] = useState(''); const [results, setResults] = useState([]); const debouncedSearchTerm = useDebounce(searchTerm, 500); useEffect(() => { if (debouncedSearchTerm) { searchAPI(debouncedSearchTerm).then(setResults); } else { setResults([]); } }, [debouncedSearchTerm]); return ( <div> <input value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} placeholder=\"Search...\" /> <ul> {results.map(result => ( <li key={result.id}>{result.title}</li> ))} </ul> </div> ); }","title":"2. Debounced \u044d\u0444\u0444\u0435\u043a\u0442\u044b"},{"location":"questions/react/use-effect/#3_2","text":"function ConditionalEffect({ shouldFetch, userId }) { const [data, setData] = useState(null); useEffect(() => { // \u042d\u0444\u0444\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 if (shouldFetch && userId) { let isCancelled = false; fetchUserData(userId).then(result => { if (!isCancelled) { setData(result); } }); return () => { isCancelled = true; }; } }, [shouldFetch, userId]); return data ? <div>{data.name}</div> : <div>No data</div>; }","title":"3. \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b"},{"location":"questions/react/use-effect/#custom-hooks-useeffect","text":"","title":"Custom Hooks \u0441 useEffect"},{"location":"questions/react/use-effect/#_7","text":"// Hook \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API function useAPI(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { if (!url) return; let isCancelled = false; const abortController = new AbortController(); const fetchData = async () => { try { setLoading(true); setError(null); const response = await fetch(url, { signal: abortController.signal }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); if (!isCancelled) { setData(result); } } catch (err) { if (!isCancelled && err.name !== 'AbortError') { setError(err.message); } } finally { if (!isCancelled) { setLoading(false); } } }; fetchData(); return () => { isCancelled = true; abortController.abort(); }; }, [url]); const refetch = useCallback(() => { if (url) { // Trigger re-fetch by updating a dependency setData(null); setError(null); } }, [url]); return { data, loading, error, refetch }; } // Hook \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 function useIntersectionObserver(targetRef, options = {}) { const [isVisible, setIsVisible] = useState(false); useEffect(() => { const observer = new IntersectionObserver(([entry]) => { setIsVisible(entry.isIntersecting); }, options); const currentTarget = targetRef.current; if (currentTarget) { observer.observe(currentTarget); } return () => { if (currentTarget) { observer.unobserve(currentTarget); } }; }, [targetRef, options]); return isVisible; } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 custom hooks function ProductList() { const { data: products, loading, error, refetch } = useAPI('/api/products'); const targetRef = useRef(); const isVisible = useIntersectionObserver(targetRef, { threshold: 0.1 }); useEffect(() => { if (isVisible) { console.log('Product list is visible'); } }, [isVisible]); if (loading) return <div>Loading products...</div>; if (error) return <div>Error: {error}</div>; return ( <div ref={targetRef}> <button onClick={refetch}>Refresh</button> {products?.map(product => ( <div key={product.id}>{product.name}</div> ))} </div> ); }","title":"\u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430"},{"location":"questions/react/use-effect/#useeffect_2","text":"import { renderHook, act } from '@testing-library/react'; import { render, screen, waitFor } from '@testing-library/react'; // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 custom hook test('useAPI hook fetches data correctly', async () => { const mockData = { id: 1, name: 'Test' }; global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve(mockData) }); const { result } = renderHook(() => useAPI('/api/test')); expect(result.current.loading).toBe(true); expect(result.current.data).toBe(null); await waitFor(() => { expect(result.current.loading).toBe(false); expect(result.current.data).toEqual(mockData); }); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0441 useEffect test('component loads data on mount', async () => { global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ name: 'John Doe' }) }); render(<UserProfile userId=\"123\" />); expect(screen.getByText('Loading...')).toBeInTheDocument(); await waitFor(() => { expect(screen.getByText('John Doe')).toBeInTheDocument(); }); expect(fetch).toHaveBeenCalledWith('/api/users/123'); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 useEffect"},{"location":"questions/react/use-effect/#_8","text":"","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438"},{"location":"questions/react/use-effect/#_9","text":"function OptimizedComponent({ filters, sortBy }) { const [data, setData] = useState([]); // \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 const queryParams = useMemo(() => ({ ...filters, sortBy }), [filters, sortBy]); useEffect(() => { fetchData(queryParams).then(setData); }, [queryParams]); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f useMemo return <div>{data.length} items</div>; }","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"questions/react/use-effect/#senior-","text":"\u0412\u0441\u0435\u0433\u0434\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ESLint \u043f\u0440\u0430\u0432\u0438\u043b\u043e exhaustive-deps \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 cleanup \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f memory leaks \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 async \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 useEffect \u041e\u0442\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e AbortController \u041c\u0435\u043c\u043e\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 \u0441 useMemo \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u043f\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0441 proper mocking","title":"Senior-\u0441\u043e\u0432\u0435\u0442\u044b"},{"location":"questions/react/use-effect/#useeffect_3","text":"\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 useEffect \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438: // \u0412\u043c\u0435\u0441\u0442\u043e useEffect \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useMemo const expensiveValue = useMemo(() => { return computeExpensiveValue(props.data); }, [props.data]); // \u0412\u043c\u0435\u0441\u0442\u043e useEffect \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useCallback const handleClick = useCallback((id) => { onItemClick(id); }, [onItemClick]); // \u0414\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 useSyncExternalStore const width = useSyncExternalStore( (callback) => { window.addEventListener('resize', callback); return () => window.removeEventListener('resize', callback); }, () => window.innerWidth );","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b useEffect"},{"location":"questions/react/use-effect/#_10","text":"Context API vs Redux \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 React 18 Promises, Async/Await \u0438 Generators Garbage Collection \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438","title":"\ud83d\udd17 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/react/use-effect_small/","text":"useEffect & Side Effects - Senior Cheat Sheet \u041e\u0441\u043d\u043e\u0432\u044b useEffect = Hook \u0434\u043b\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 (side effects) \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 // \u041f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0430 useEffect(() => { document.title = `Count: ${count}`; }); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 useEffect(() => { console.log('Count changed'); }, [count]); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 useEffect(() => { console.log('Mounted'); }, []); // \u0421 cleanup useEffect(() => { const timer = setInterval(() => {}, 1000); return () => clearInterval(timer); // Cleanup }, []); \u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b Mount (componentDidMount) useEffect(() => { fetchData().then(setData); return () => { // Cleanup \u043f\u0440\u0438 unmount }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 = \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 Update (componentDidUpdate) useEffect(() => { if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 userId Unmount (componentWillUnmount) useEffect(() => { const handleResize = () => setWidth(window.innerWidth); window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize); // Cleanup }; }, []); \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 1. \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b // \u274c \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b useEffect(() => { setData([1, 2, 3]); // \u041d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }, [data]); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { setData([1, 2, 3]); }, []); // \u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 2. \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup // \u274c Memory leak useEffect(() => { setInterval(() => {}, 1000); // \u041d\u0435\u0442 cleanup! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { const timer = setInterval(() => {}, 1000); return () => clearInterval(timer); }, []); 3. Missing dependencies // \u274c ESLint exhaustive-deps \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 useEffect(() => { fetchUser(userId); // userId \u043d\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { if (userId) { fetchUser(userId); } }, [userId]); 4. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438 // \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(async () => { const data = await fetch('/api'); // Warning! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { const loadData = async () => { const data = await fetch('/api'); setData(await data.json()); }; loadData(); }, []); \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Data Fetching \u0441 cleanup function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { let cancelled = false; const fetchUser = async () => { setLoading(true); try { const response = await fetch(`/api/users/${userId}`); const userData = await response.json(); if (!cancelled) setUser(userData); } finally { if (!cancelled) setLoading(false); } }; if (userId) fetchUser(); return () => { cancelled = true; }; }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; } AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 useEffect(() => { const controller = new AbortController(); fetch('/api/data', { signal: controller.signal }) .then(r => r.json()) .then(setData) .catch(err => err.name !== 'AbortError' && setError(err)); return () => controller.abort(); }, []); WebSocket subscriptions useEffect(() => { const ws = new WebSocket(`ws://localhost:8080/chat/${roomId}`); ws.onmessage = (event) => { const message = JSON.parse(event.data); setMessages(prev => [...prev, message]); }; return () => { if (ws.readyState === WebSocket.OPEN) { ws.close(); } }; }, [roomId]); Event Listeners useEffect(() => { const handleKeyDown = (e) => { if (e.key === 'Escape') setModalOpen(false); }; document.addEventListener('keydown', handleKeyDown); return () => document.removeEventListener('keydown', handleKeyDown); }, []); Custom Hooks useDebounce function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => setDebouncedValue(value), delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; } useAPI function useAPI(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { if (!url) return; let cancelled = false; const controller = new AbortController(); const fetchData = async () => { setLoading(true); setError(null); try { const response = await fetch(url, { signal: controller.signal }); const result = await response.json(); if (!cancelled) setData(result); } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err.message); } } finally { if (!cancelled) setLoading(false); } }; fetchData(); return () => { cancelled = true; controller.abort(); }; }, [url]); return { data, loading, error }; } useLocalStorage function useLocalStorage(key, initialValue) { const [value, setValue] = useState(() => { try { return JSON.parse(localStorage.getItem(key)) || initialValue; } catch { return initialValue; } }); useEffect(() => { localStorage.setItem(key, JSON.stringify(value)); }, [key, value]); return [value, setValue]; } Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 function Component({ filters, sortBy }) { const [data, setData] = useState([]); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 const queryParams = useMemo(() => ({ ...filters, sortBy }), [filters, sortBy]); useEffect(() => { fetchData(queryParams).then(setData); }, [queryParams]); return <div>{data.length} items</div>; } \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 import { renderHook, waitFor } from '@testing-library/react'; test('useAPI loads data', async () => { global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ id: 1, name: 'Test' }) }); const { result } = renderHook(() => useAPI('/api/test')); expect(result.current.loading).toBe(true); await waitFor(() => { expect(result.current.loading).toBe(false); expect(result.current.data).toEqual({ id: 1, name: 'Test' }); }); }); \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b useEffect // \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - useMemo \u0432\u043c\u0435\u0441\u0442\u043e useEffect const expensiveValue = useMemo(() => computeExpensive(data), [data] ); // \u0414\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 - useCallback const handleClick = useCallback((id) => onItemClick(id), [onItemClick] ); // \u0414\u043b\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a - useSyncExternalStore const width = useSyncExternalStore( (callback) => { window.addEventListener('resize', callback); return () => window.removeEventListener('resize', callback); }, () => window.innerWidth ); Senior Rules ESLint exhaustive-deps - \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0439 \u043f\u0440\u0430\u0432\u0438\u043b\u0443 Cleanup functions - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0439 memory leaks AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Separate effects - \u043e\u0434\u0438\u043d \u044d\u0444\u0444\u0435\u043a\u0442 = \u043e\u0434\u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c Custom hooks \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 useMemo for objects \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 Race conditions - \u0437\u0430\u0449\u0438\u0449\u0430\u0439\u0441\u044f \u0444\u043b\u0430\u0433\u0430\u043c\u0438 cancelled Conditional effects - \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430 Anti-patterns // \u274c Async useEffect useEffect(async () => { ... }); // \u274c \u041c\u0443\u0442\u0430\u0446\u0438\u044f props/state useEffect(() => { props.data.push(newItem); // \u041c\u0443\u0442\u0430\u0446\u0438\u044f! }); // \u274c \u042d\u0444\u0444\u0435\u043a\u0442\u044b \u0431\u0435\u0437 cleanup useEffect(() => { setInterval(() => {}, 1000); // Leak! }, []); // \u274c \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 \u0431\u0435\u0437 memo useEffect(() => { fetchData({ filter: 'active' }); // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }, [{ filter: 'active' }]); \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : useEffect \u0434\u043b\u044f side effects \u0442\u043e\u043b\u044c\u043a\u043e! \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 useMemo, \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 - useCallback.","title":"useEffect &amp; Side Effects - Senior Cheat Sheet"},{"location":"questions/react/use-effect_small/#useeffect-side-effects-senior-cheat-sheet","text":"","title":"useEffect &amp; Side Effects - Senior Cheat Sheet"},{"location":"questions/react/use-effect_small/#_1","text":"useEffect = Hook \u0434\u043b\u044f \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 (side effects) \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445","title":"\u041e\u0441\u043d\u043e\u0432\u044b"},{"location":"questions/react/use-effect_small/#_2","text":"// \u041f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0430 useEffect(() => { document.title = `Count: ${count}`; }); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 useEffect(() => { console.log('Count changed'); }, [count]); // \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 useEffect(() => { console.log('Mounted'); }, []); // \u0421 cleanup useEffect(() => { const timer = setInterval(() => {}, 1000); return () => clearInterval(timer); // Cleanup }, []);","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441"},{"location":"questions/react/use-effect_small/#_3","text":"","title":"\u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b"},{"location":"questions/react/use-effect_small/#mount-componentdidmount","text":"useEffect(() => { fetchData().then(setData); return () => { // Cleanup \u043f\u0440\u0438 unmount }; }, []); // \u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 = \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438","title":"Mount (componentDidMount)"},{"location":"questions/react/use-effect_small/#update-componentdidupdate","text":"useEffect(() => { if (userId) { fetchUser(userId).then(setUser); } }, [userId]); // \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 userId","title":"Update (componentDidUpdate)"},{"location":"questions/react/use-effect_small/#unmount-componentwillunmount","text":"useEffect(() => { const handleResize = () => setWidth(window.innerWidth); window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize); // Cleanup }; }, []);","title":"Unmount (componentWillUnmount)"},{"location":"questions/react/use-effect_small/#_4","text":"","title":"\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438"},{"location":"questions/react/use-effect_small/#1","text":"// \u274c \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b useEffect(() => { setData([1, 2, 3]); // \u041d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }, [data]); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { setData([1, 2, 3]); }, []); // \u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","title":"1. \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b"},{"location":"questions/react/use-effect_small/#2-cleanup","text":"// \u274c Memory leak useEffect(() => { setInterval(() => {}, 1000); // \u041d\u0435\u0442 cleanup! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { const timer = setInterval(() => {}, 1000); return () => clearInterval(timer); }, []);","title":"2. \u0417\u0430\u0431\u044b\u0442\u044b\u0439 cleanup"},{"location":"questions/react/use-effect_small/#3-missing-dependencies","text":"// \u274c ESLint exhaustive-deps \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 useEffect(() => { fetchUser(userId); // userId \u043d\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { if (userId) { fetchUser(userId); } }, [userId]);","title":"3. Missing dependencies"},{"location":"questions/react/use-effect_small/#4-async","text":"// \u274c \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(async () => { const data = await fetch('/api'); // Warning! }, []); // \u2705 \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e useEffect(() => { const loadData = async () => { const data = await fetch('/api'); setData(await data.json()); }; loadData(); }, []);","title":"4. Async \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"questions/react/use-effect_small/#_5","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/react/use-effect_small/#data-fetching-cleanup","text":"function UserProfile({ userId }) { const [user, setUser] = useState(null); const [loading, setLoading] = useState(false); useEffect(() => { let cancelled = false; const fetchUser = async () => { setLoading(true); try { const response = await fetch(`/api/users/${userId}`); const userData = await response.json(); if (!cancelled) setUser(userData); } finally { if (!cancelled) setLoading(false); } }; if (userId) fetchUser(); return () => { cancelled = true; }; }, [userId]); return loading ? <div>Loading...</div> : <div>{user?.name}</div>; }","title":"Data Fetching \u0441 cleanup"},{"location":"questions/react/use-effect_small/#abortcontroller","text":"useEffect(() => { const controller = new AbortController(); fetch('/api/data', { signal: controller.signal }) .then(r => r.json()) .then(setData) .catch(err => err.name !== 'AbortError' && setError(err)); return () => controller.abort(); }, []);","title":"AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"questions/react/use-effect_small/#websocket-subscriptions","text":"useEffect(() => { const ws = new WebSocket(`ws://localhost:8080/chat/${roomId}`); ws.onmessage = (event) => { const message = JSON.parse(event.data); setMessages(prev => [...prev, message]); }; return () => { if (ws.readyState === WebSocket.OPEN) { ws.close(); } }; }, [roomId]);","title":"WebSocket subscriptions"},{"location":"questions/react/use-effect_small/#event-listeners","text":"useEffect(() => { const handleKeyDown = (e) => { if (e.key === 'Escape') setModalOpen(false); }; document.addEventListener('keydown', handleKeyDown); return () => document.removeEventListener('keydown', handleKeyDown); }, []);","title":"Event Listeners"},{"location":"questions/react/use-effect_small/#custom-hooks","text":"","title":"Custom Hooks"},{"location":"questions/react/use-effect_small/#usedebounce","text":"function useDebounce(value, delay) { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => setDebouncedValue(value), delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; }","title":"useDebounce"},{"location":"questions/react/use-effect_small/#useapi","text":"function useAPI(url) { const [data, setData] = useState(null); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); useEffect(() => { if (!url) return; let cancelled = false; const controller = new AbortController(); const fetchData = async () => { setLoading(true); setError(null); try { const response = await fetch(url, { signal: controller.signal }); const result = await response.json(); if (!cancelled) setData(result); } catch (err) { if (!cancelled && err.name !== 'AbortError') { setError(err.message); } } finally { if (!cancelled) setLoading(false); } }; fetchData(); return () => { cancelled = true; controller.abort(); }; }, [url]); return { data, loading, error }; }","title":"useAPI"},{"location":"questions/react/use-effect_small/#uselocalstorage","text":"function useLocalStorage(key, initialValue) { const [value, setValue] = useState(() => { try { return JSON.parse(localStorage.getItem(key)) || initialValue; } catch { return initialValue; } }); useEffect(() => { localStorage.setItem(key, JSON.stringify(value)); }, [key, value]); return [value, setValue]; }","title":"useLocalStorage"},{"location":"questions/react/use-effect_small/#performance","text":"","title":"Performance \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/react/use-effect_small/#_6","text":"function Component({ filters, sortBy }) { const [data, setData] = useState([]); // \u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 const queryParams = useMemo(() => ({ ...filters, sortBy }), [filters, sortBy]); useEffect(() => { fetchData(queryParams).then(setData); }, [queryParams]); return <div>{data.length} items</div>; }","title":"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"questions/react/use-effect_small/#_7","text":"import { renderHook, waitFor } from '@testing-library/react'; test('useAPI loads data', async () => { global.fetch = jest.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ id: 1, name: 'Test' }) }); const { result } = renderHook(() => useAPI('/api/test')); expect(result.current.loading).toBe(true); await waitFor(() => { expect(result.current.loading).toBe(false); expect(result.current.data).toEqual({ id: 1, name: 'Test' }); }); });","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/react/use-effect_small/#useeffect","text":"// \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - useMemo \u0432\u043c\u0435\u0441\u0442\u043e useEffect const expensiveValue = useMemo(() => computeExpensive(data), [data] ); // \u0414\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 - useCallback const handleClick = useCallback((id) => onItemClick(id), [onItemClick] ); // \u0414\u043b\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a - useSyncExternalStore const width = useSyncExternalStore( (callback) => { window.addEventListener('resize', callback); return () => window.removeEventListener('resize', callback); }, () => window.innerWidth );","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b useEffect"},{"location":"questions/react/use-effect_small/#senior-rules","text":"ESLint exhaustive-deps - \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0439 \u043f\u0440\u0430\u0432\u0438\u043b\u0443 Cleanup functions - \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0439 memory leaks AbortController \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b fetch \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Separate effects - \u043e\u0434\u0438\u043d \u044d\u0444\u0444\u0435\u043a\u0442 = \u043e\u0434\u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c Custom hooks \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 useMemo for objects \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 Race conditions - \u0437\u0430\u0449\u0438\u0449\u0430\u0439\u0441\u044f \u0444\u043b\u0430\u0433\u0430\u043c\u0438 cancelled Conditional effects - \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430","title":"Senior Rules"},{"location":"questions/react/use-effect_small/#anti-patterns","text":"// \u274c Async useEffect useEffect(async () => { ... }); // \u274c \u041c\u0443\u0442\u0430\u0446\u0438\u044f props/state useEffect(() => { props.data.push(newItem); // \u041c\u0443\u0442\u0430\u0446\u0438\u044f! }); // \u274c \u042d\u0444\u0444\u0435\u043a\u0442\u044b \u0431\u0435\u0437 cleanup useEffect(() => { setInterval(() => {}, 1000); // Leak! }, []); // \u274c \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445 \u0431\u0435\u0437 memo useEffect(() => { fetchData({ filter: 'active' }); // \u041d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440 }, [{ filter: 'active' }]); \u0413\u043b\u0430\u0432\u043d\u043e\u0435 : useEffect \u0434\u043b\u044f side effects \u0442\u043e\u043b\u044c\u043a\u043e! \u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 useMemo, \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 - useCallback.","title":"Anti-patterns"},{"location":"questions/security/frontend-security/","text":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Frontend \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0423\u0433\u0440\u043e\u0437\u044b XSS (Cross-Site Scripting) CSRF (Cross-Site Request Forgery) Content Security Policy (CSP) \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 HTTPS \u0438 Transport Security \u0417\u0430\u0449\u0438\u0442\u0430 \u0414\u0430\u043d\u043d\u044b\u0445 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Dependencies Security Headers \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0410\u0443\u0434\u0438\u0442 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0423\u0433\u0440\u043e\u0437\u044b OWASP Top 10 \u0434\u043b\u044f Frontend: Injection - XSS, SQL injection \u0447\u0435\u0440\u0435\u0437 frontend Broken Authentication - \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 Sensitive Data Exposure - \u0443\u0442\u0435\u0447\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 frontend XML External Entities (XXE) - \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 XML Broken Access Control - \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f Security Misconfiguration - \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 Cross-Site Scripting (XSS) - \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 Insecure Deserialization - \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Using Components with Known Vulnerabilities - \u0443\u044f\u0437\u0432\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 Insufficient Logging & Monitoring - \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 XSS (Cross-Site Scripting) \u0422\u0438\u043f\u044b XSS: 1. Reflected XSS // \u0423\u042f\u0417\u0412\u0418\u041c\u042b\u0419 \u041a\u041e\u0414 function displayUserInput(input) { document.innerHTML = `<p>\u0412\u044b \u0432\u0432\u0435\u043b\u0438: ${input}</p>`; } // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u042b\u0419 \u041a\u041e\u0414 function displayUserInput(input) { const sanitizedInput = DOMPurify.sanitize(input); const element = document.createElement('p'); element.textContent = `\u0412\u044b \u0432\u0432\u0435\u043b\u0438: ${sanitizedInput}`; document.body.appendChild(element); } 2. Stored XSS // React - \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 import DOMPurify from 'dompurify'; function UserComment({ comment }) { // \u0423\u042f\u0417\u0412\u0418\u041c\u041e // return <div dangerouslySetInnerHTML={{__html: comment.text}} />; // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e const sanitizedContent = DOMPurify.sanitize(comment.text); return <div dangerouslySetInnerHTML={{__html: sanitizedContent}} />; } // \u0415\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 textContent function UserComment({ comment }) { return <div>{comment.text}</div>; // React \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 } 3. DOM-based XSS // \u0423\u042f\u0417\u0412\u0418\u041c\u042b\u0419 \u041a\u041e\u0414 const userInput = new URLSearchParams(window.location.search).get('q'); document.getElementById('search-term').innerHTML = userInput; // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u042b\u0419 \u041a\u041e\u0414 const userInput = new URLSearchParams(window.location.search).get('q'); document.getElementById('search-term').textContent = userInput; // \u0418\u043b\u0438 \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 function sanitizeSearchTerm(term) { return term ? term.replace(/<[^>]*>/g, '') : ''; } \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 XSS: Content Security Policy (CSP) <!-- \u0411\u0430\u0437\u043e\u0432\u0430\u044f CSP --> <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline';\"> <!-- \u0421\u0442\u0440\u043e\u0433\u0430\u044f CSP --> <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'nonce-random123' 'strict-dynamic'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;\"> \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 import DOMPurify from 'dompurify'; // \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML function sanitizeHTML(dirty) { return DOMPurify.sanitize(dirty, { ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'], ALLOWED_ATTR: ['href'] }); } // \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 function escapeAttribute(str) { return str.replace(/[&<>\"']/g, (match) => { const escapeMap = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#x27;' }; return escapeMap[match]; }); } CSRF (Cross-Site Request Forgery) \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 CSRF: 1. CSRF Token // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 CSRF \u0442\u043e\u043a\u0435\u043d\u0430 async function getCSRFToken() { const response = await fetch('/api/csrf-token'); const { token } = await response.json(); return token; } // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c async function makeSecureRequest(data) { const csrfToken = await getCSRFToken(); return fetch('/api/sensitive-action', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': csrfToken }, body: JSON.stringify(data) }); } 2. SameSite Cookies // \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 cookie \u0441 SameSite document.cookie = \"sessionId=abc123; SameSite=Strict; Secure; HttpOnly\"; // \u0412 Express.js app.use(session({ cookie: { sameSite: 'strict', secure: true, // \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f HTTPS httpOnly: true } })); 3. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Referer/Origin // Middleware \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 Origin function validateOrigin(req, res, next) { const allowedOrigins = ['https://yourdomain.com']; const origin = req.headers.origin; if (!allowedOrigins.includes(origin)) { return res.status(403).json({ error: 'Forbidden origin' }); } next(); } Content Security Policy (CSP) \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP: // CSP \u0434\u043b\u044f React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f const cspConfig = { 'default-src': [\"'self'\"], 'script-src': [ \"'self'\", \"'nonce-${nonce}'\", 'https://cdn.jsdelivr.net' ], 'style-src': [ \"'self'\", \"'unsafe-inline'\", // \u0434\u043b\u044f styled-components 'https://fonts.googleapis.com' ], 'font-src': [ \"'self'\", 'https://fonts.gstatic.com' ], 'img-src': [ \"'self'\", 'data:', 'https:' ], 'connect-src': [ \"'self'\", 'https://api.yourdomain.com' ] }; // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f CSP \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 function generateCSP(config) { return Object.entries(config) .map(([directive, sources]) => `${directive} ${sources.join(' ')}`) .join('; '); } Nonce \u0434\u043b\u044f inline \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432: // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f nonce function generateNonce() { return Buffer.from(crypto.randomBytes(16)).toString('base64'); } // React \u0441 nonce function App({ nonce }) { return ( <> <script nonce={nonce}> {`console.log('\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 inline \u0441\u043a\u0440\u0438\u043f\u0442');`} </script> </> ); } \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 JWT Security: 1. \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 // \u041d\u0415\u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e - localStorage localStorage.setItem('token', jwt); // \u0411\u041e\u041b\u0415\u0415 \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e - httpOnly cookie // (\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c) app.post('/login', (req, res) => { const token = generateJWT(user); res.cookie('authToken', token, { httpOnly: true, secure: true, sameSite: 'strict', maxAge: 3600000 // 1 \u0447\u0430\u0441 }); }); // \u041a\u041e\u041c\u041f\u0420\u041e\u041c\u0418\u0421\u0421 - memory storage \u0441 refresh token class TokenManager { constructor() { this.accessToken = null; this.refreshToken = this.getRefreshTokenFromSecureStorage(); } async getAccessToken() { if (!this.accessToken || this.isTokenExpired(this.accessToken)) { await this.refreshAccessToken(); } return this.accessToken; } async refreshAccessToken() { try { const response = await fetch('/api/refresh', { method: 'POST', credentials: 'include' // \u0434\u043b\u044f httpOnly cookie \u0441 refresh token }); const { accessToken } = await response.json(); this.accessToken = accessToken; } catch (error) { this.logout(); } } } 2. Token Validation // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f JWT \u043d\u0430 frontend (\u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430) function validateJWT(token) { try { const [header, payload, signature] = token.split('.'); const decodedPayload = JSON.parse(atob(payload)); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f if (decodedPayload.exp * 1000 < Date.now()) { throw new Error('Token expired'); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 issuer if (decodedPayload.iss !== 'your-app') { throw new Error('Invalid issuer'); } return decodedPayload; } catch (error) { throw new Error('Invalid token'); } } Session Management: // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0435\u0439 class SessionManager { constructor() { this.sessionTimeout = 30 * 60 * 1000; // 30 \u043c\u0438\u043d\u0443\u0442 this.warningTime = 5 * 60 * 1000; // 5 \u043c\u0438\u043d\u0443\u0442 \u0434\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f this.setupSessionTracking(); } setupSessionTracking() { // \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => { document.addEventListener(event, () => this.updateLastActivity(), true); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0438 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443 setInterval(() => this.checkSession(), 60000); } updateLastActivity() { this.lastActivity = Date.now(); } checkSession() { const timeSinceLastActivity = Date.now() - this.lastActivity; if (timeSinceLastActivity > this.sessionTimeout) { this.logout(); } else if (timeSinceLastActivity > this.sessionTimeout - this.warningTime) { this.showSessionWarning(); } } async logout() { try { await fetch('/api/logout', { method: 'POST' }); } finally { window.location.href = '/login'; } } } HTTPS \u0438 Transport Security Strict Transport Security (HSTS): // \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 HSTS \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 app.use((req, res, next) => { res.setHeader( 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload' ); next(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 HTTPS \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 if (location.protocol !== 'https:' && location.hostname !== 'localhost') { location.replace(`https:${location.href.substring(location.protocol.length)}`); } Certificate Pinning: // Public Key Pinning (\u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e, \u043d\u043e \u0432\u0430\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044e) const expectedPublicKeyHash = 'sha256-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX='; fetch('/api/data', { // \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Certificate Transparency // \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0432 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u0430 }).catch(error => { if (error.name === 'SecurityError') { console.error('Certificate validation failed'); } }); \u0417\u0430\u0449\u0438\u0442\u0430 \u0414\u0430\u043d\u043d\u044b\u0445 \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Frontend: // \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 async function encryptSensitiveData(data, publicKey) { const encoder = new TextEncoder(); const encodedData = encoder.encode(JSON.stringify(data)); const encrypted = await window.crypto.subtle.encrypt( { name: 'RSA-OAEP' }, publicKey, encodedData ); return Array.from(new Uint8Array(encrypted)); } // \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0449\u0438\u0442\u044b) async function hashPassword(password, salt) { const encoder = new TextEncoder(); const data = encoder.encode(password + salt); const hashBuffer = await crypto.subtle.digest('SHA-256', data); const hashArray = Array.from(new Uint8Array(hashBuffer)); return hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); } \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u0443\u0442\u0435\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445: // \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438 class SecureDataHandler { constructor() { this.sensitiveData = null; } setSensitiveData(data) { this.clearSensitiveData(); this.sensitiveData = data; } clearSensitiveData() { if (this.sensitiveData) { // \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 if (typeof this.sensitiveData === 'string') { this.sensitiveData = this.sensitiveData.replace(/./g, '0'); } this.sensitiveData = null; } } // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b setupCleanup() { window.addEventListener('beforeunload', () => { this.clearSensitiveData(); }); } } \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Dependencies \u0410\u0443\u0434\u0438\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: # NPM \u0430\u0443\u0434\u0438\u0442 npm audit npm audit fix # Yarn \u0430\u0443\u0434\u0438\u0442 yarn audit # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 npx audit-ci --config audit-ci.json \u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 Supply Chain \u0430\u0442\u0430\u043a: // package.json \u0441 \u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 { \"dependencies\": { \"react\": \"18.2.0\", // \u0422\u043e\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u043e ^18.2.0 \"lodash\": \"4.17.21\" } } // .npmrc \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 audit-level=moderate fund=false Subresource Integrity (SRI): <!-- SRI \u0434\u043b\u044f CDN --> <script src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> </script> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> Security Headers \u041f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432: // Express.js middleware \u0434\u043b\u044f security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 function setSecurityHeaders(req, res, next) { // Content Security Policy res.setHeader('Content-Security-Policy', \"default-src 'self'; script-src 'self' 'unsafe-inline'\"); // X-Frame-Options (\u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 clickjacking) res.setHeader('X-Frame-Options', 'DENY'); // X-Content-Type-Options res.setHeader('X-Content-Type-Options', 'nosniff'); // Referrer Policy res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin'); // Permissions Policy res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()'); // X-XSS-Protection (\u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e) res.setHeader('X-XSS-Protection', '1; mode=block'); next(); } React Helmet \u0434\u043b\u044f SPA: import { Helmet } from 'react-helmet'; function SecurityHeaders() { return ( <Helmet> <meta httpEquiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline'\" /> <meta httpEquiv=\"X-Frame-Options\" content=\"DENY\" /> <meta httpEquiv=\"X-Content-Type-Options\" content=\"nosniff\" /> <meta httpEquiv=\"Referrer-Policy\" content=\"strict-origin-when-cross-origin\" /> </Helmet> ); } \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 Checklist \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438: 1. \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 [ ] \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 [ ] \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 [ ] \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 [ ] \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432 2. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f [ ] \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 HTTPS [ ] \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 [ ] \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f logout \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 [ ] \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0432\u0445\u043e\u0434\u0430 3. \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f [ ] \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043d\u0430 frontend \u0438 backend [ ] \u0421\u043a\u0440\u044b\u0442\u0438\u0435 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 [ ] \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 API 4. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f [ ] \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP [ ] \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 [ ] \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 debug \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 production [ ] \u041c\u0438\u043d\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u043e\u0431\u0444\u0443\u0441\u043a\u0430\u0446\u0438\u044f \u043a\u043e\u0434\u0430 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a function handleError(error) { // \u041d\u0415 \u0432\u044b\u0432\u043e\u0434\u0438\u043c stack trace \u0432 production if (process.env.NODE_ENV === 'production') { console.error('Application error occurred'); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0435\u0442\u0430\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 errorReporting.report(error); } else { console.error(error); } // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0431\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 return { message: '\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0437\u0436\u0435.' }; } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 URL function createSafeURL(baseURL, params) { const url = new URL(baseURL); Object.entries(params).forEach(([key, value]) => { // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 if (typeof value === 'string' && value.length < 1000) { url.searchParams.append(key, value); } }); return url.toString(); } \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0410\u0443\u0434\u0438\u0442 \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0434\u0438\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438: 1. \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 # ESLint \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 npm install eslint-plugin-security --save-dev # SonarQube \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u0434\u0430 sonar-scanner -Dsonar.projectKey=my-project 2. \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 XSS describe('XSS Protection', () => { test('should sanitize user input', () => { const maliciousInput = '<script>alert(\"xss\")</script>'; const sanitized = DOMPurify.sanitize(maliciousInput); expect(sanitized).not.toContain('<script>'); }); test('should escape HTML entities', () => { const input = '<img src=\"x\" onerror=\"alert(1)\">'; const component = render(<UserInput value={input} />); expect(component.container.innerHTML).not.toContain('onerror'); }); }); 3. Browser Security Testing // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSP function testCSP() { const meta = document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]'); if (!meta) { console.warn('CSP \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d'); return false; } const csp = meta.getAttribute('content'); return csp.includes(\"default-src 'self'\"); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 HTTPS function ensureHTTPS() { if (location.protocol !== 'https:' && location.hostname !== 'localhost') { throw new Error('\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e HTTPS'); } } \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438: // \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 CSP \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0439 window.addEventListener('securitypolicyviolation', (event) => { const violation = { directive: event.violatedDirective, blockedURI: event.blockedURI, sourceFile: event.sourceFile, lineNumber: event.lineNumber }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0438 fetch('/api/csp-report', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(violation) }); }); \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a: // CI/CD pipeline \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 const securityChecks = { async auditDependencies() { const audit = await exec('npm audit --json'); const results = JSON.parse(audit.stdout); if (results.metadata.vulnerabilities.high > 0) { throw new Error('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u0438'); } }, async checkCSP() { const response = await fetch(process.env.APP_URL); const csp = response.headers.get('content-security-policy'); if (!csp || !csp.includes(\"default-src 'self'\")) { throw new Error('CSP \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e'); } } }; \u0412\u044b\u0432\u043e\u0434\u044b \u0434\u043b\u044f \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438: Defense in Depth - \u043c\u043d\u043e\u0433\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0437\u0430\u0449\u0438\u0442\u0430 Principle of Least Privilege - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0430\u0432\u0430 Input Validation - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Output Encoding - \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Security by Design - \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u0412\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e\u0435\u0440: \u041a\u0430\u043a \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0442 XSS \u0430\u0442\u0430\u043a? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 CSP \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c? \u041a\u0430\u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b? \u041a\u0430\u043a\u0438\u0435 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c? \u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430 \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u0438? \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u041d\u0430\u0439\u0442\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c XSS \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u044c \u0432 \u043a\u043e\u0434\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c CSP \u0434\u043b\u044f React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0443\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0430\u0443\u0434\u0438\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - JavaScript - Event Loop - React - Context API - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 - State Management - TypeScript - Advanced Types","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Frontend \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/security/frontend-security/#frontend","text":"","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Frontend \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/security/frontend-security/#_1","text":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0423\u0433\u0440\u043e\u0437\u044b XSS (Cross-Site Scripting) CSRF (Cross-Site Request Forgery) Content Security Policy (CSP) \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 HTTPS \u0438 Transport Security \u0417\u0430\u0449\u0438\u0442\u0430 \u0414\u0430\u043d\u043d\u044b\u0445 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Dependencies Security Headers \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0410\u0443\u0434\u0438\u0442","title":"\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435"},{"location":"questions/security/frontend-security/#_2","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0423\u0433\u0440\u043e\u0437\u044b"},{"location":"questions/security/frontend-security/#owasp-top-10-frontend","text":"Injection - XSS, SQL injection \u0447\u0435\u0440\u0435\u0437 frontend Broken Authentication - \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 Sensitive Data Exposure - \u0443\u0442\u0435\u0447\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 frontend XML External Entities (XXE) - \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 XML Broken Access Control - \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f Security Misconfiguration - \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 Cross-Site Scripting (XSS) - \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 Insecure Deserialization - \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Using Components with Known Vulnerabilities - \u0443\u044f\u0437\u0432\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 Insufficient Logging & Monitoring - \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","title":"OWASP Top 10 \u0434\u043b\u044f Frontend:"},{"location":"questions/security/frontend-security/#xss-cross-site-scripting","text":"","title":"XSS (Cross-Site Scripting)"},{"location":"questions/security/frontend-security/#xss","text":"","title":"\u0422\u0438\u043f\u044b XSS:"},{"location":"questions/security/frontend-security/#1-reflected-xss","text":"// \u0423\u042f\u0417\u0412\u0418\u041c\u042b\u0419 \u041a\u041e\u0414 function displayUserInput(input) { document.innerHTML = `<p>\u0412\u044b \u0432\u0432\u0435\u043b\u0438: ${input}</p>`; } // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u042b\u0419 \u041a\u041e\u0414 function displayUserInput(input) { const sanitizedInput = DOMPurify.sanitize(input); const element = document.createElement('p'); element.textContent = `\u0412\u044b \u0432\u0432\u0435\u043b\u0438: ${sanitizedInput}`; document.body.appendChild(element); }","title":"1. Reflected XSS"},{"location":"questions/security/frontend-security/#2-stored-xss","text":"// React - \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 import DOMPurify from 'dompurify'; function UserComment({ comment }) { // \u0423\u042f\u0417\u0412\u0418\u041c\u041e // return <div dangerouslySetInnerHTML={{__html: comment.text}} />; // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e const sanitizedContent = DOMPurify.sanitize(comment.text); return <div dangerouslySetInnerHTML={{__html: sanitizedContent}} />; } // \u0415\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 textContent function UserComment({ comment }) { return <div>{comment.text}</div>; // React \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 }","title":"2. Stored XSS"},{"location":"questions/security/frontend-security/#3-dom-based-xss","text":"// \u0423\u042f\u0417\u0412\u0418\u041c\u042b\u0419 \u041a\u041e\u0414 const userInput = new URLSearchParams(window.location.search).get('q'); document.getElementById('search-term').innerHTML = userInput; // \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u042b\u0419 \u041a\u041e\u0414 const userInput = new URLSearchParams(window.location.search).get('q'); document.getElementById('search-term').textContent = userInput; // \u0418\u043b\u0438 \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 function sanitizeSearchTerm(term) { return term ? term.replace(/<[^>]*>/g, '') : ''; }","title":"3. DOM-based XSS"},{"location":"questions/security/frontend-security/#xss_1","text":"","title":"\u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 XSS:"},{"location":"questions/security/frontend-security/#content-security-policy-csp","text":"<!-- \u0411\u0430\u0437\u043e\u0432\u0430\u044f CSP --> <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline';\"> <!-- \u0421\u0442\u0440\u043e\u0433\u0430\u044f CSP --> <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'nonce-random123' 'strict-dynamic'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;\">","title":"Content Security Policy (CSP)"},{"location":"questions/security/frontend-security/#_3","text":"import DOMPurify from 'dompurify'; // \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML function sanitizeHTML(dirty) { return DOMPurify.sanitize(dirty, { ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'], ALLOWED_ATTR: ['href'] }); } // \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 function escapeAttribute(str) { return str.replace(/[&<>\"']/g, (match) => { const escapeMap = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#x27;' }; return escapeMap[match]; }); }","title":"\u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/security/frontend-security/#csrf-cross-site-request-forgery","text":"","title":"CSRF (Cross-Site Request Forgery)"},{"location":"questions/security/frontend-security/#csrf","text":"","title":"\u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 CSRF:"},{"location":"questions/security/frontend-security/#1-csrf-token","text":"// \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 CSRF \u0442\u043e\u043a\u0435\u043d\u0430 async function getCSRFToken() { const response = await fetch('/api/csrf-token'); const { token } = await response.json(); return token; } // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c async function makeSecureRequest(data) { const csrfToken = await getCSRFToken(); return fetch('/api/sensitive-action', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': csrfToken }, body: JSON.stringify(data) }); }","title":"1. CSRF Token"},{"location":"questions/security/frontend-security/#2-samesite-cookies","text":"// \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 cookie \u0441 SameSite document.cookie = \"sessionId=abc123; SameSite=Strict; Secure; HttpOnly\"; // \u0412 Express.js app.use(session({ cookie: { sameSite: 'strict', secure: true, // \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f HTTPS httpOnly: true } }));","title":"2. SameSite Cookies"},{"location":"questions/security/frontend-security/#3-refererorigin","text":"// Middleware \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 Origin function validateOrigin(req, res, next) { const allowedOrigins = ['https://yourdomain.com']; const origin = req.headers.origin; if (!allowedOrigins.includes(origin)) { return res.status(403).json({ error: 'Forbidden origin' }); } next(); }","title":"3. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Referer/Origin"},{"location":"questions/security/frontend-security/#content-security-policy-csp_1","text":"","title":"Content Security Policy (CSP)"},{"location":"questions/security/frontend-security/#csp","text":"// CSP \u0434\u043b\u044f React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f const cspConfig = { 'default-src': [\"'self'\"], 'script-src': [ \"'self'\", \"'nonce-${nonce}'\", 'https://cdn.jsdelivr.net' ], 'style-src': [ \"'self'\", \"'unsafe-inline'\", // \u0434\u043b\u044f styled-components 'https://fonts.googleapis.com' ], 'font-src': [ \"'self'\", 'https://fonts.gstatic.com' ], 'img-src': [ \"'self'\", 'data:', 'https:' ], 'connect-src': [ \"'self'\", 'https://api.yourdomain.com' ] }; // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f CSP \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 function generateCSP(config) { return Object.entries(config) .map(([directive, sources]) => `${directive} ${sources.join(' ')}`) .join('; '); }","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP:"},{"location":"questions/security/frontend-security/#nonce-inline","text":"// \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f nonce function generateNonce() { return Buffer.from(crypto.randomBytes(16)).toString('base64'); } // React \u0441 nonce function App({ nonce }) { return ( <> <script nonce={nonce}> {`console.log('\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 inline \u0441\u043a\u0440\u0438\u043f\u0442');`} </script> </> ); }","title":"Nonce \u0434\u043b\u044f inline \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432:"},{"location":"questions/security/frontend-security/#_4","text":"","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"questions/security/frontend-security/#jwt-security","text":"","title":"JWT Security:"},{"location":"questions/security/frontend-security/#1","text":"// \u041d\u0415\u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e - localStorage localStorage.setItem('token', jwt); // \u0411\u041e\u041b\u0415\u0415 \u0411\u0415\u0417\u041e\u041f\u0410\u0421\u041d\u041e - httpOnly cookie // (\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c) app.post('/login', (req, res) => { const token = generateJWT(user); res.cookie('authToken', token, { httpOnly: true, secure: true, sameSite: 'strict', maxAge: 3600000 // 1 \u0447\u0430\u0441 }); }); // \u041a\u041e\u041c\u041f\u0420\u041e\u041c\u0418\u0421\u0421 - memory storage \u0441 refresh token class TokenManager { constructor() { this.accessToken = null; this.refreshToken = this.getRefreshTokenFromSecureStorage(); } async getAccessToken() { if (!this.accessToken || this.isTokenExpired(this.accessToken)) { await this.refreshAccessToken(); } return this.accessToken; } async refreshAccessToken() { try { const response = await fetch('/api/refresh', { method: 'POST', credentials: 'include' // \u0434\u043b\u044f httpOnly cookie \u0441 refresh token }); const { accessToken } = await response.json(); this.accessToken = accessToken; } catch (error) { this.logout(); } } }","title":"1. \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432"},{"location":"questions/security/frontend-security/#2-token-validation","text":"// \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f JWT \u043d\u0430 frontend (\u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430) function validateJWT(token) { try { const [header, payload, signature] = token.split('.'); const decodedPayload = JSON.parse(atob(payload)); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f if (decodedPayload.exp * 1000 < Date.now()) { throw new Error('Token expired'); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 issuer if (decodedPayload.iss !== 'your-app') { throw new Error('Invalid issuer'); } return decodedPayload; } catch (error) { throw new Error('Invalid token'); } }","title":"2. Token Validation"},{"location":"questions/security/frontend-security/#session-management","text":"// \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0435\u0439 class SessionManager { constructor() { this.sessionTimeout = 30 * 60 * 1000; // 30 \u043c\u0438\u043d\u0443\u0442 this.warningTime = 5 * 60 * 1000; // 5 \u043c\u0438\u043d\u0443\u0442 \u0434\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f this.setupSessionTracking(); } setupSessionTracking() { // \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => { document.addEventListener(event, () => this.updateLastActivity(), true); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0438 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443 setInterval(() => this.checkSession(), 60000); } updateLastActivity() { this.lastActivity = Date.now(); } checkSession() { const timeSinceLastActivity = Date.now() - this.lastActivity; if (timeSinceLastActivity > this.sessionTimeout) { this.logout(); } else if (timeSinceLastActivity > this.sessionTimeout - this.warningTime) { this.showSessionWarning(); } } async logout() { try { await fetch('/api/logout', { method: 'POST' }); } finally { window.location.href = '/login'; } } }","title":"Session Management:"},{"location":"questions/security/frontend-security/#https-transport-security","text":"","title":"HTTPS \u0438 Transport Security"},{"location":"questions/security/frontend-security/#strict-transport-security-hsts","text":"// \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 HSTS \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 app.use((req, res, next) => { res.setHeader( 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload' ); next(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 HTTPS \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 if (location.protocol !== 'https:' && location.hostname !== 'localhost') { location.replace(`https:${location.href.substring(location.protocol.length)}`); }","title":"Strict Transport Security (HSTS):"},{"location":"questions/security/frontend-security/#certificate-pinning","text":"// Public Key Pinning (\u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e, \u043d\u043e \u0432\u0430\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044e) const expectedPublicKeyHash = 'sha256-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX='; fetch('/api/data', { // \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Certificate Transparency // \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0432 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u0430 }).catch(error => { if (error.name === 'SecurityError') { console.error('Certificate validation failed'); } });","title":"Certificate Pinning:"},{"location":"questions/security/frontend-security/#_5","text":"","title":"\u0417\u0430\u0449\u0438\u0442\u0430 \u0414\u0430\u043d\u043d\u044b\u0445"},{"location":"questions/security/frontend-security/#frontend_1","text":"// \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 async function encryptSensitiveData(data, publicKey) { const encoder = new TextEncoder(); const encodedData = encoder.encode(JSON.stringify(data)); const encrypted = await window.crypto.subtle.encrypt( { name: 'RSA-OAEP' }, publicKey, encodedData ); return Array.from(new Uint8Array(encrypted)); } // \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0449\u0438\u0442\u044b) async function hashPassword(password, salt) { const encoder = new TextEncoder(); const data = encoder.encode(password + salt); const hashBuffer = await crypto.subtle.digest('SHA-256', data); const hashArray = Array.from(new Uint8Array(hashBuffer)); return hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); }","title":"\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Frontend:"},{"location":"questions/security/frontend-security/#_6","text":"// \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438 class SecureDataHandler { constructor() { this.sensitiveData = null; } setSensitiveData(data) { this.clearSensitiveData(); this.sensitiveData = data; } clearSensitiveData() { if (this.sensitiveData) { // \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 if (typeof this.sensitiveData === 'string') { this.sensitiveData = this.sensitiveData.replace(/./g, '0'); } this.sensitiveData = null; } } // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b setupCleanup() { window.addEventListener('beforeunload', () => { this.clearSensitiveData(); }); } }","title":"\u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u0443\u0442\u0435\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445:"},{"location":"questions/security/frontend-security/#dependencies","text":"","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c Dependencies"},{"location":"questions/security/frontend-security/#_7","text":"# NPM \u0430\u0443\u0434\u0438\u0442 npm audit npm audit fix # Yarn \u0430\u0443\u0434\u0438\u0442 yarn audit # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 npx audit-ci --config audit-ci.json","title":"\u0410\u0443\u0434\u0438\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439:"},{"location":"questions/security/frontend-security/#supply-chain","text":"// package.json \u0441 \u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 { \"dependencies\": { \"react\": \"18.2.0\", // \u0422\u043e\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u043e ^18.2.0 \"lodash\": \"4.17.21\" } } // .npmrc \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 audit-level=moderate fund=false","title":"\u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 Supply Chain \u0430\u0442\u0430\u043a:"},{"location":"questions/security/frontend-security/#subresource-integrity-sri","text":"<!-- SRI \u0434\u043b\u044f CDN --> <script src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> </script> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\">","title":"Subresource Integrity (SRI):"},{"location":"questions/security/frontend-security/#security-headers","text":"","title":"Security Headers"},{"location":"questions/security/frontend-security/#security","text":"// Express.js middleware \u0434\u043b\u044f security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 function setSecurityHeaders(req, res, next) { // Content Security Policy res.setHeader('Content-Security-Policy', \"default-src 'self'; script-src 'self' 'unsafe-inline'\"); // X-Frame-Options (\u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 clickjacking) res.setHeader('X-Frame-Options', 'DENY'); // X-Content-Type-Options res.setHeader('X-Content-Type-Options', 'nosniff'); // Referrer Policy res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin'); // Permissions Policy res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()'); // X-XSS-Protection (\u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e) res.setHeader('X-XSS-Protection', '1; mode=block'); next(); }","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432:"},{"location":"questions/security/frontend-security/#react-helmet-spa","text":"import { Helmet } from 'react-helmet'; function SecurityHeaders() { return ( <Helmet> <meta httpEquiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline'\" /> <meta httpEquiv=\"X-Frame-Options\" content=\"DENY\" /> <meta httpEquiv=\"X-Content-Type-Options\" content=\"nosniff\" /> <meta httpEquiv=\"Referrer-Policy\" content=\"strict-origin-when-cross-origin\" /> </Helmet> ); }","title":"React Helmet \u0434\u043b\u044f SPA:"},{"location":"questions/security/frontend-security/#_8","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438"},{"location":"questions/security/frontend-security/#checklist","text":"","title":"Checklist \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438:"},{"location":"questions/security/frontend-security/#1_1","text":"[ ] \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 [ ] \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 [ ] \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 [ ] \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432","title":"1. \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"questions/security/frontend-security/#2","text":"[ ] \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 HTTPS [ ] \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 [ ] \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f logout \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445 [ ] \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0432\u0445\u043e\u0434\u0430","title":"2. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"questions/security/frontend-security/#3","text":"[ ] \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043d\u0430 frontend \u0438 backend [ ] \u0421\u043a\u0440\u044b\u0442\u0438\u0435 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 [ ] \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 API","title":"3. \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/security/frontend-security/#4","text":"[ ] \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP [ ] \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 [ ] \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 debug \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 production [ ] \u041c\u0438\u043d\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u043e\u0431\u0444\u0443\u0441\u043a\u0430\u0446\u0438\u044f \u043a\u043e\u0434\u0430","title":"4. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"questions/security/frontend-security/#_9","text":"// \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a function handleError(error) { // \u041d\u0415 \u0432\u044b\u0432\u043e\u0434\u0438\u043c stack trace \u0432 production if (process.env.NODE_ENV === 'production') { console.error('Application error occurred'); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0435\u0442\u0430\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 errorReporting.report(error); } else { console.error(error); } // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0431\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 return { message: '\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0437\u0436\u0435.' }; } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 URL function createSafeURL(baseURL, params) { const url = new URL(baseURL); Object.entries(params).forEach(([key, value]) => { // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 if (typeof value === 'string' && value.length < 1000) { url.searchParams.append(key, value); } }); return url.toString(); }","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:"},{"location":"questions/security/frontend-security/#_10","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0410\u0443\u0434\u0438\u0442"},{"location":"questions/security/frontend-security/#_11","text":"","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0434\u0438\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438:"},{"location":"questions/security/frontend-security/#1_2","text":"# ESLint \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 npm install eslint-plugin-security --save-dev # SonarQube \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u0434\u0430 sonar-scanner -Dsonar.projectKey=my-project","title":"1. \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437"},{"location":"questions/security/frontend-security/#2_1","text":"// \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 XSS describe('XSS Protection', () => { test('should sanitize user input', () => { const maliciousInput = '<script>alert(\"xss\")</script>'; const sanitized = DOMPurify.sanitize(maliciousInput); expect(sanitized).not.toContain('<script>'); }); test('should escape HTML entities', () => { const input = '<img src=\"x\" onerror=\"alert(1)\">'; const component = render(<UserInput value={input} />); expect(component.container.innerHTML).not.toContain('onerror'); }); });","title":"2. \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/security/frontend-security/#3-browser-security-testing","text":"// \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSP function testCSP() { const meta = document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]'); if (!meta) { console.warn('CSP \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d'); return false; } const csp = meta.getAttribute('content'); return csp.includes(\"default-src 'self'\"); } // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 HTTPS function ensureHTTPS() { if (location.protocol !== 'https:' && location.hostname !== 'localhost') { throw new Error('\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e HTTPS'); } }","title":"3. Browser Security Testing"},{"location":"questions/security/frontend-security/#_12","text":"// \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 CSP \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0439 window.addEventListener('securitypolicyviolation', (event) => { const violation = { directive: event.violatedDirective, blockedURI: event.blockedURI, sourceFile: event.sourceFile, lineNumber: event.lineNumber }; // \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0438 fetch('/api/csp-report', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(violation) }); });","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438:"},{"location":"questions/security/frontend-security/#_13","text":"// CI/CD pipeline \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 const securityChecks = { async auditDependencies() { const audit = await exec('npm audit --json'); const results = JSON.parse(audit.stdout); if (results.metadata.vulnerabilities.high > 0) { throw new Error('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u0438'); } }, async checkCSP() { const response = await fetch(process.env.APP_URL); const csp = response.headers.get('content-security-policy'); if (!csp || !csp.includes(\"default-src 'self'\")) { throw new Error('CSP \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e'); } } };","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a:"},{"location":"questions/security/frontend-security/#_14","text":"","title":"\u0412\u044b\u0432\u043e\u0434\u044b \u0434\u043b\u044f \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/security/frontend-security/#_15","text":"Defense in Depth - \u043c\u043d\u043e\u0433\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0437\u0430\u0449\u0438\u0442\u0430 Principle of Least Privilege - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0430\u0432\u0430 Input Validation - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Output Encoding - \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Security by Design - \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438:"},{"location":"questions/security/frontend-security/#_16","text":"\u041a\u0430\u043a \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0442 XSS \u0430\u0442\u0430\u043a? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 CSP \u0438 \u043a\u0430\u043a \u0435\u0433\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c? \u041a\u0430\u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b? \u041a\u0430\u043a\u0438\u0435 security \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c? \u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430 \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u0438?","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e\u0435\u0440:"},{"location":"questions/security/frontend-security/#_17","text":"\u041d\u0430\u0439\u0442\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c XSS \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u044c \u0432 \u043a\u043e\u0434\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c CSP \u0434\u043b\u044f React \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0443\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0430\u0443\u0434\u0438\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - JavaScript - Event Loop - React - Context API - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 - State Management - TypeScript - Advanced Types","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"questions/security/frontend-security_small/","text":"Frontend Security (small) OWASP Top 10 Frontend Focus XSS - Injection attacks, DOM manipulation CSRF - Cross-site request forgery Sensitive Data Exposure - Client-side data leaks Broken Authentication - JWT/session mishandling Security Misconfiguration - Missing headers, CSP Vulnerable Dependencies - Supply chain attacks Insufficient Access Control - Client-side authorization Insecure Deserialization - JSON/data parsing Logging & Monitoring - Security event tracking Transport Security - HTTPS, certificate issues XSS Protection \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f import DOMPurify from 'dompurify'; // \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML const sanitizeHTML = (dirty) => DOMPurify.sanitize(dirty, { ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'], ALLOWED_ATTR: ['href'] }); // React \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c function UserComment({ comment }) { // \u274c \u041e\u043f\u0430\u0441\u043d\u043e // return <div dangerouslySetInnerHTML={{__html: comment.text}} />; // \u2705 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e const sanitized = DOMPurify.sanitize(comment.text); return <div dangerouslySetInnerHTML={{__html: sanitized}} />; } // \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 const escapeAttribute = (str) => str.replace(/[&<>\"']/g, match => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#x27;' })[match]); Content Security Policy (CSP) // \u0421\u0442\u0440\u043e\u0433\u0430\u044f CSP \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f const cspConfig = { 'default-src': [\"'self'\"], 'script-src': [\"'self'\", \"'nonce-${nonce}'\", \"'strict-dynamic'\"], 'style-src': [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'], 'font-src': [\"'self'\", 'https://fonts.gstatic.com'], 'img-src': [\"'self'\", 'data:', 'https:'], 'connect-src': [\"'self'\", 'https://api.yourdomain.com'], 'object-src': [\"'none'\"], 'base-uri': [\"'self'\"] }; // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f nonce const generateNonce = () => Buffer.from(crypto.randomBytes(16)).toString('base64'); // CSP \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 window.addEventListener('securitypolicyviolation', (event) => { fetch('/api/csp-report', { method: 'POST', body: JSON.stringify({ directive: event.violatedDirective, blockedURI: event.blockedURI, sourceFile: event.sourceFile, lineNumber: event.lineNumber }) }); }); CSRF Protection // CSRF Token management class CSRFProtection { constructor() { this.token = null; this.refreshToken(); } async refreshToken() { const response = await fetch('/api/csrf-token'); const { token } = await response.json(); this.token = token; } async secureRequest(url, options = {}) { return fetch(url, { ...options, headers: { ...options.headers, 'X-CSRF-Token': this.token, 'Content-Type': 'application/json' } }); } } // SameSite cookies configuration const cookieConfig = { sameSite: 'Strict', // \u0438\u043b\u0438 'Lax' \u0434\u043b\u044f cross-site navigation secure: true, // \u0442\u043e\u043b\u044c\u043a\u043e HTTPS httpOnly: true // \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0438\u0437 JavaScript }; JWT Security \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 class TokenManager { constructor() { this.accessToken = null; // \u0412 \u043f\u0430\u043c\u044f\u0442\u0438 this.refreshToken = null; // HttpOnly cookie (\u0441\u0435\u0440\u0432\u0435\u0440) } async getAccessToken() { if (!this.accessToken || this.isExpired(this.accessToken)) { await this.refreshAccessToken(); } return this.accessToken; } async refreshAccessToken() { try { const response = await fetch('/api/refresh', { method: 'POST', credentials: 'include' // HttpOnly cookie }); if (!response.ok) throw new Error('Refresh failed'); const { accessToken } = await response.json(); this.accessToken = accessToken; } catch (error) { this.logout(); } } isExpired(token) { try { const payload = JSON.parse(atob(token.split('.')[1])); return payload.exp * 1000 < Date.now(); } catch { return true; } } logout() { this.accessToken = null; fetch('/api/logout', { method: 'POST', credentials: 'include' }); window.location.href = '/login'; } } Session Management class SessionManager { constructor() { this.sessionTimeout = 30 * 60 * 1000; // 30 min this.warningTime = 5 * 60 * 1000; // 5 min warning this.lastActivity = Date.now(); this.setupActivityTracking(); } setupActivityTracking() { ['mousedown', 'keypress', 'scroll', 'touchstart'].forEach(event => { document.addEventListener(event, () => this.updateActivity(), true); }); setInterval(() => this.checkSession(), 60000); } updateActivity() { this.lastActivity = Date.now(); } checkSession() { const inactive = Date.now() - this.lastActivity; if (inactive > this.sessionTimeout) { this.logout(); } else if (inactive > this.sessionTimeout - this.warningTime) { this.showSessionWarning(); } } } Security Headers \u041f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 const securityHeaders = { // Content Security Policy 'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'nonce-xyz'\", // Clickjacking protection 'X-Frame-Options': 'DENY', // MIME type sniffing 'X-Content-Type-Options': 'nosniff', // Referrer policy 'Referrer-Policy': 'strict-origin-when-cross-origin', // Transport security 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload', // Permissions policy 'Permissions-Policy': 'geolocation=(), microphone=(), camera=()', // XSS protection (legacy) 'X-XSS-Protection': '1; mode=block' }; // React Helmet \u0434\u043b\u044f SPA import { Helmet } from 'react-helmet'; const SecurityHeaders = () => ( <Helmet> {Object.entries(securityHeaders).map(([name, value]) => ( <meta key={name} httpEquiv={name} content={value} /> ))} </Helmet> ); Dependency Security Supply Chain Protection # \u0410\u0443\u0434\u0438\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 npm audit --audit-level=moderate yarn audit # \u0422\u043e\u0447\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432 package.json { \"dependencies\": { \"react\": \"18.2.0\", # \u0431\u0435\u0437 ^ \"lodash\": \"4.17.21\" } } # .npmrc \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 audit-level=moderate fund=false Subresource Integrity (SRI) <!-- SRI \u0434\u043b\u044f CDN --> <script src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.min.js\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> </script> <link rel=\"stylesheet\" href=\"https://cdn.example.com/style.css\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> Data Protection \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 // Symmetric encryption \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 class DataEncryption { async generateKey() { return crypto.subtle.generateKey( { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt'] ); } async encrypt(data, key) { const iv = crypto.getRandomValues(new Uint8Array(12)); const encoded = new TextEncoder().encode(JSON.stringify(data)); const encrypted = await crypto.subtle.encrypt( { name: 'AES-GCM', iv }, key, encoded ); return { encrypted: Array.from(new Uint8Array(encrypted)), iv: Array.from(iv) }; } async decrypt(encryptedData, key) { const decrypted = await crypto.subtle.decrypt( { name: 'AES-GCM', iv: new Uint8Array(encryptedData.iv) }, key, new Uint8Array(encryptedData.encrypted) ); return JSON.parse(new TextDecoder().decode(decrypted)); } } // Secure data cleanup class SecureDataHandler { constructor() { this.sensitiveData = null; window.addEventListener('beforeunload', () => this.cleanup()); } setSensitiveData(data) { this.cleanup(); this.sensitiveData = data; } cleanup() { if (this.sensitiveData && typeof this.sensitiveData === 'string') { this.sensitiveData = this.sensitiveData.replace(/./g, '0'); } this.sensitiveData = null; } } Transport Security HTTPS Enforcement // Force HTTPS redirect if (location.protocol !== 'https:' && location.hostname !== 'localhost') { location.replace(`https:${location.href.substring(location.protocol.length)}`); } // Certificate validation monitoring fetch('/api/test').catch(error => { if (error.name === 'SecurityError') { console.error('Certificate validation failed'); // Alert security team } }); // Public key pinning check (conceptual) const validateCertificate = async (response) => { const cert = response.headers.get('x-certificate-fingerprint'); const expectedHashes = ['sha256-HASH1', 'sha256-HASH2']; if (!expectedHashes.includes(cert)) { throw new Error('Certificate pinning validation failed'); } }; Security Testing Automated Security Testing describe('Security Tests', () => { test('XSS protection', () => { const maliciousInput = '<script>alert(\"xss\")</script>'; const sanitized = DOMPurify.sanitize(maliciousInput); expect(sanitized).not.toContain('<script>'); }); test('CSP headers present', async () => { const response = await fetch('/'); expect(response.headers.get('content-security-policy')).toContain(\"default-src 'self'\"); }); test('HTTPS redirect', () => { expect(location.protocol).toBe('https:'); }); test('Token expiration', () => { const expiredToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDAwMDAwMDB9.signature'; expect(tokenManager.isExpired(expiredToken)).toBe(true); }); }); Security Audit Automation // CI/CD security checks const securityAudit = { async checkDependencies() { const { execSync } = require('child_process'); const audit = JSON.parse(execSync('npm audit --json', { encoding: 'utf8' })); if (audit.metadata.vulnerabilities.high > 0) { throw new Error(`Found ${audit.metadata.vulnerabilities.high} high severity vulnerabilities`); } }, async checkHeaders() { const response = await fetch(process.env.APP_URL); const requiredHeaders = [ 'content-security-policy', 'x-frame-options', 'strict-transport-security' ]; requiredHeaders.forEach(header => { if (!response.headers.get(header)) { throw new Error(`Missing security header: ${header}`); } }); }, async checkSSL() { const url = new URL(process.env.APP_URL); if (url.protocol !== 'https:') { throw new Error('Application must run over HTTPS'); } } }; Security Monitoring Real-time Security Monitoring class SecurityMonitor { constructor() { this.violations = []; this.setupMonitoring(); } setupMonitoring() { // CSP violations window.addEventListener('securitypolicyviolation', this.handleCSPViolation.bind(this)); // Failed authentication attempts this.monitorAuthFailures(); // Suspicious activity patterns this.monitorSuspiciousActivity(); } handleCSPViolation(event) { const violation = { type: 'csp_violation', directive: event.violatedDirective, blockedURI: event.blockedURI, timestamp: Date.now() }; this.reportViolation(violation); } monitorAuthFailures() { let failedAttempts = 0; const maxAttempts = 5; document.addEventListener('auth_failure', () => { failedAttempts++; if (failedAttempts >= maxAttempts) { this.reportViolation({ type: 'brute_force_attempt', attempts: failedAttempts, timestamp: Date.now() }); } }); } async reportViolation(violation) { try { await fetch('/api/security/violations', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(violation) }); } catch (error) { // Fallback logging console.error('Security violation:', violation); } } } Security Checklist \u0434\u043b\u044f Senior Development Phase [ ] Input validation \u0438 sanitization [ ] Output encoding \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 [ ] CSP \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d [ ] Authentication \u0442\u043e\u043a\u0435\u043d\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e [ ] CSRF protection \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d [ ] Security headers \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b [ ] Dependency audit \u043f\u0440\u043e\u0439\u0434\u0435\u043d [ ] Sensitive data \u043d\u0435 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f Production Phase [ ] HTTPS enforced [ ] Security headers \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 [ ] CSP violations \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u044f\u0442\u0441\u044f [ ] Automated security scanning [ ] Incident response plan \u0433\u043e\u0442\u043e\u0432 [ ] Regular security audits [ ] Staff security training Code Review Focus [ ] XSS vectors \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b [ ] Authentication flows secure [ ] Authorization checks \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 [ ] Error messages \u043d\u0435 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e [ ] Crypto operations \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 secure APIs [ ] Dependencies \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b [ ] Debug code \u0443\u0434\u0430\u043b\u0435\u043d Security Tools \u0434\u043b\u044f Senior Static Analysis : - ESLint Security Plugin - SonarQube Security Rules - Semgrep \u0434\u043b\u044f security patterns Dynamic Testing : - OWASP ZAP - Burp Suite - Browser security extensions Dependency Scanning : - npm audit / yarn audit - Snyk - GitHub Security Advisories Monitoring : - CSP violation reporting - Authentication failure tracking - Abnormal traffic patterns \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435? \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP \u0434\u043b\u044f \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 SPA? Supply chain security \u0434\u043b\u044f frontend \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439? \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 XSS \u0442\u0438\u043f\u0430\u043c\u0438 \u0438 \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e? Security headers \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f? CSRF protection \u0432 SPA vs traditional web apps? Security testing \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 CI/CD? Incident response \u0434\u043b\u044f frontend security issues? Must-know Security Concepts Same-origin policy \u0438 CORS implications Content Security Policy \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u0438 nonce usage Authentication vs Authorization \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 Cryptographic best practices \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 Supply chain attacks \u0438 mitigation strategies Security headers \u043f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 XSS types \u0438 specific protection mechanisms CSRF tokens vs SameSite cookies effectiveness","title":"Frontend Security (small)"},{"location":"questions/security/frontend-security_small/#frontend-security-small","text":"","title":"Frontend Security (small)"},{"location":"questions/security/frontend-security_small/#owasp-top-10-frontend-focus","text":"XSS - Injection attacks, DOM manipulation CSRF - Cross-site request forgery Sensitive Data Exposure - Client-side data leaks Broken Authentication - JWT/session mishandling Security Misconfiguration - Missing headers, CSP Vulnerable Dependencies - Supply chain attacks Insufficient Access Control - Client-side authorization Insecure Deserialization - JSON/data parsing Logging & Monitoring - Security event tracking Transport Security - HTTPS, certificate issues","title":"OWASP Top 10 Frontend Focus"},{"location":"questions/security/frontend-security_small/#xss-protection","text":"","title":"XSS Protection"},{"location":"questions/security/frontend-security_small/#_1","text":"import DOMPurify from 'dompurify'; // \u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTML const sanitizeHTML = (dirty) => DOMPurify.sanitize(dirty, { ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'], ALLOWED_ATTR: ['href'] }); // React \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c function UserComment({ comment }) { // \u274c \u041e\u043f\u0430\u0441\u043d\u043e // return <div dangerouslySetInnerHTML={{__html: comment.text}} />; // \u2705 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e const sanitized = DOMPurify.sanitize(comment.text); return <div dangerouslySetInnerHTML={{__html: sanitized}} />; } // \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 const escapeAttribute = (str) => str.replace(/[&<>\"']/g, match => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#x27;' })[match]);","title":"\u0421\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f"},{"location":"questions/security/frontend-security_small/#content-security-policy-csp","text":"// \u0421\u0442\u0440\u043e\u0433\u0430\u044f CSP \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f const cspConfig = { 'default-src': [\"'self'\"], 'script-src': [\"'self'\", \"'nonce-${nonce}'\", \"'strict-dynamic'\"], 'style-src': [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'], 'font-src': [\"'self'\", 'https://fonts.gstatic.com'], 'img-src': [\"'self'\", 'data:', 'https:'], 'connect-src': [\"'self'\", 'https://api.yourdomain.com'], 'object-src': [\"'none'\"], 'base-uri': [\"'self'\"] }; // \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f nonce const generateNonce = () => Buffer.from(crypto.randomBytes(16)).toString('base64'); // CSP \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 window.addEventListener('securitypolicyviolation', (event) => { fetch('/api/csp-report', { method: 'POST', body: JSON.stringify({ directive: event.violatedDirective, blockedURI: event.blockedURI, sourceFile: event.sourceFile, lineNumber: event.lineNumber }) }); });","title":"Content Security Policy (CSP)"},{"location":"questions/security/frontend-security_small/#csrf-protection","text":"// CSRF Token management class CSRFProtection { constructor() { this.token = null; this.refreshToken(); } async refreshToken() { const response = await fetch('/api/csrf-token'); const { token } = await response.json(); this.token = token; } async secureRequest(url, options = {}) { return fetch(url, { ...options, headers: { ...options.headers, 'X-CSRF-Token': this.token, 'Content-Type': 'application/json' } }); } } // SameSite cookies configuration const cookieConfig = { sameSite: 'Strict', // \u0438\u043b\u0438 'Lax' \u0434\u043b\u044f cross-site navigation secure: true, // \u0442\u043e\u043b\u044c\u043a\u043e HTTPS httpOnly: true // \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0438\u0437 JavaScript };","title":"CSRF Protection"},{"location":"questions/security/frontend-security_small/#jwt-security","text":"","title":"JWT Security"},{"location":"questions/security/frontend-security_small/#_2","text":"class TokenManager { constructor() { this.accessToken = null; // \u0412 \u043f\u0430\u043c\u044f\u0442\u0438 this.refreshToken = null; // HttpOnly cookie (\u0441\u0435\u0440\u0432\u0435\u0440) } async getAccessToken() { if (!this.accessToken || this.isExpired(this.accessToken)) { await this.refreshAccessToken(); } return this.accessToken; } async refreshAccessToken() { try { const response = await fetch('/api/refresh', { method: 'POST', credentials: 'include' // HttpOnly cookie }); if (!response.ok) throw new Error('Refresh failed'); const { accessToken } = await response.json(); this.accessToken = accessToken; } catch (error) { this.logout(); } } isExpired(token) { try { const payload = JSON.parse(atob(token.split('.')[1])); return payload.exp * 1000 < Date.now(); } catch { return true; } } logout() { this.accessToken = null; fetch('/api/logout', { method: 'POST', credentials: 'include' }); window.location.href = '/login'; } }","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432"},{"location":"questions/security/frontend-security_small/#session-management","text":"class SessionManager { constructor() { this.sessionTimeout = 30 * 60 * 1000; // 30 min this.warningTime = 5 * 60 * 1000; // 5 min warning this.lastActivity = Date.now(); this.setupActivityTracking(); } setupActivityTracking() { ['mousedown', 'keypress', 'scroll', 'touchstart'].forEach(event => { document.addEventListener(event, () => this.updateActivity(), true); }); setInterval(() => this.checkSession(), 60000); } updateActivity() { this.lastActivity = Date.now(); } checkSession() { const inactive = Date.now() - this.lastActivity; if (inactive > this.sessionTimeout) { this.logout(); } else if (inactive > this.sessionTimeout - this.warningTime) { this.showSessionWarning(); } } }","title":"Session Management"},{"location":"questions/security/frontend-security_small/#security-headers","text":"","title":"Security Headers"},{"location":"questions/security/frontend-security_small/#_3","text":"const securityHeaders = { // Content Security Policy 'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'nonce-xyz'\", // Clickjacking protection 'X-Frame-Options': 'DENY', // MIME type sniffing 'X-Content-Type-Options': 'nosniff', // Referrer policy 'Referrer-Policy': 'strict-origin-when-cross-origin', // Transport security 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload', // Permissions policy 'Permissions-Policy': 'geolocation=(), microphone=(), camera=()', // XSS protection (legacy) 'X-XSS-Protection': '1; mode=block' }; // React Helmet \u0434\u043b\u044f SPA import { Helmet } from 'react-helmet'; const SecurityHeaders = () => ( <Helmet> {Object.entries(securityHeaders).map(([name, value]) => ( <meta key={name} httpEquiv={name} content={value} /> ))} </Helmet> );","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432"},{"location":"questions/security/frontend-security_small/#dependency-security","text":"","title":"Dependency Security"},{"location":"questions/security/frontend-security_small/#supply-chain-protection","text":"# \u0410\u0443\u0434\u0438\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 npm audit --audit-level=moderate yarn audit # \u0422\u043e\u0447\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432 package.json { \"dependencies\": { \"react\": \"18.2.0\", # \u0431\u0435\u0437 ^ \"lodash\": \"4.17.21\" } } # .npmrc \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 audit-level=moderate fund=false","title":"Supply Chain Protection"},{"location":"questions/security/frontend-security_small/#subresource-integrity-sri","text":"<!-- SRI \u0434\u043b\u044f CDN --> <script src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.min.js\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\"> </script> <link rel=\"stylesheet\" href=\"https://cdn.example.com/style.css\" integrity=\"sha384-HASH_HERE\" crossorigin=\"anonymous\">","title":"Subresource Integrity (SRI)"},{"location":"questions/security/frontend-security_small/#data-protection","text":"","title":"Data Protection"},{"location":"questions/security/frontend-security_small/#_4","text":"// Symmetric encryption \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 class DataEncryption { async generateKey() { return crypto.subtle.generateKey( { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt'] ); } async encrypt(data, key) { const iv = crypto.getRandomValues(new Uint8Array(12)); const encoded = new TextEncoder().encode(JSON.stringify(data)); const encrypted = await crypto.subtle.encrypt( { name: 'AES-GCM', iv }, key, encoded ); return { encrypted: Array.from(new Uint8Array(encrypted)), iv: Array.from(iv) }; } async decrypt(encryptedData, key) { const decrypted = await crypto.subtle.decrypt( { name: 'AES-GCM', iv: new Uint8Array(encryptedData.iv) }, key, new Uint8Array(encryptedData.encrypted) ); return JSON.parse(new TextDecoder().decode(decrypted)); } } // Secure data cleanup class SecureDataHandler { constructor() { this.sensitiveData = null; window.addEventListener('beforeunload', () => this.cleanup()); } setSensitiveData(data) { this.cleanup(); this.sensitiveData = data; } cleanup() { if (this.sensitiveData && typeof this.sensitiveData === 'string') { this.sensitiveData = this.sensitiveData.replace(/./g, '0'); } this.sensitiveData = null; } }","title":"\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435"},{"location":"questions/security/frontend-security_small/#transport-security","text":"","title":"Transport Security"},{"location":"questions/security/frontend-security_small/#https-enforcement","text":"// Force HTTPS redirect if (location.protocol !== 'https:' && location.hostname !== 'localhost') { location.replace(`https:${location.href.substring(location.protocol.length)}`); } // Certificate validation monitoring fetch('/api/test').catch(error => { if (error.name === 'SecurityError') { console.error('Certificate validation failed'); // Alert security team } }); // Public key pinning check (conceptual) const validateCertificate = async (response) => { const cert = response.headers.get('x-certificate-fingerprint'); const expectedHashes = ['sha256-HASH1', 'sha256-HASH2']; if (!expectedHashes.includes(cert)) { throw new Error('Certificate pinning validation failed'); } };","title":"HTTPS Enforcement"},{"location":"questions/security/frontend-security_small/#security-testing","text":"","title":"Security Testing"},{"location":"questions/security/frontend-security_small/#automated-security-testing","text":"describe('Security Tests', () => { test('XSS protection', () => { const maliciousInput = '<script>alert(\"xss\")</script>'; const sanitized = DOMPurify.sanitize(maliciousInput); expect(sanitized).not.toContain('<script>'); }); test('CSP headers present', async () => { const response = await fetch('/'); expect(response.headers.get('content-security-policy')).toContain(\"default-src 'self'\"); }); test('HTTPS redirect', () => { expect(location.protocol).toBe('https:'); }); test('Token expiration', () => { const expiredToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDAwMDAwMDB9.signature'; expect(tokenManager.isExpired(expiredToken)).toBe(true); }); });","title":"Automated Security Testing"},{"location":"questions/security/frontend-security_small/#security-audit-automation","text":"// CI/CD security checks const securityAudit = { async checkDependencies() { const { execSync } = require('child_process'); const audit = JSON.parse(execSync('npm audit --json', { encoding: 'utf8' })); if (audit.metadata.vulnerabilities.high > 0) { throw new Error(`Found ${audit.metadata.vulnerabilities.high} high severity vulnerabilities`); } }, async checkHeaders() { const response = await fetch(process.env.APP_URL); const requiredHeaders = [ 'content-security-policy', 'x-frame-options', 'strict-transport-security' ]; requiredHeaders.forEach(header => { if (!response.headers.get(header)) { throw new Error(`Missing security header: ${header}`); } }); }, async checkSSL() { const url = new URL(process.env.APP_URL); if (url.protocol !== 'https:') { throw new Error('Application must run over HTTPS'); } } };","title":"Security Audit Automation"},{"location":"questions/security/frontend-security_small/#security-monitoring","text":"","title":"Security Monitoring"},{"location":"questions/security/frontend-security_small/#real-time-security-monitoring","text":"class SecurityMonitor { constructor() { this.violations = []; this.setupMonitoring(); } setupMonitoring() { // CSP violations window.addEventListener('securitypolicyviolation', this.handleCSPViolation.bind(this)); // Failed authentication attempts this.monitorAuthFailures(); // Suspicious activity patterns this.monitorSuspiciousActivity(); } handleCSPViolation(event) { const violation = { type: 'csp_violation', directive: event.violatedDirective, blockedURI: event.blockedURI, timestamp: Date.now() }; this.reportViolation(violation); } monitorAuthFailures() { let failedAttempts = 0; const maxAttempts = 5; document.addEventListener('auth_failure', () => { failedAttempts++; if (failedAttempts >= maxAttempts) { this.reportViolation({ type: 'brute_force_attempt', attempts: failedAttempts, timestamp: Date.now() }); } }); } async reportViolation(violation) { try { await fetch('/api/security/violations', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(violation) }); } catch (error) { // Fallback logging console.error('Security violation:', violation); } } }","title":"Real-time Security Monitoring"},{"location":"questions/security/frontend-security_small/#security-checklist-senior","text":"","title":"Security Checklist \u0434\u043b\u044f Senior"},{"location":"questions/security/frontend-security_small/#development-phase","text":"[ ] Input validation \u0438 sanitization [ ] Output encoding \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 [ ] CSP \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d [ ] Authentication \u0442\u043e\u043a\u0435\u043d\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e [ ] CSRF protection \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d [ ] Security headers \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b [ ] Dependency audit \u043f\u0440\u043e\u0439\u0434\u0435\u043d [ ] Sensitive data \u043d\u0435 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f","title":"Development Phase"},{"location":"questions/security/frontend-security_small/#production-phase","text":"[ ] HTTPS enforced [ ] Security headers \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 [ ] CSP violations \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u044f\u0442\u0441\u044f [ ] Automated security scanning [ ] Incident response plan \u0433\u043e\u0442\u043e\u0432 [ ] Regular security audits [ ] Staff security training","title":"Production Phase"},{"location":"questions/security/frontend-security_small/#code-review-focus","text":"[ ] XSS vectors \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b [ ] Authentication flows secure [ ] Authorization checks \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 [ ] Error messages \u043d\u0435 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e [ ] Crypto operations \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 secure APIs [ ] Dependencies \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b [ ] Debug code \u0443\u0434\u0430\u043b\u0435\u043d","title":"Code Review Focus"},{"location":"questions/security/frontend-security_small/#security-tools-senior","text":"Static Analysis : - ESLint Security Plugin - SonarQube Security Rules - Semgrep \u0434\u043b\u044f security patterns Dynamic Testing : - OWASP ZAP - Burp Suite - Browser security extensions Dependency Scanning : - npm audit / yarn audit - Snyk - GitHub Security Advisories Monitoring : - CSP violation reporting - Authentication failure tracking - Abnormal traffic patterns","title":"Security Tools \u0434\u043b\u044f Senior"},{"location":"questions/security/frontend-security_small/#senior","text":"\u041a\u0430\u043a \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c JWT \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435? \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CSP \u0434\u043b\u044f \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 SPA? Supply chain security \u0434\u043b\u044f frontend \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439? \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 XSS \u0442\u0438\u043f\u0430\u043c\u0438 \u0438 \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e? Security headers \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f? CSRF protection \u0432 SPA vs traditional web apps? Security testing \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 CI/CD? Incident response \u0434\u043b\u044f frontend security issues?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/security/frontend-security_small/#must-know-security-concepts","text":"Same-origin policy \u0438 CORS implications Content Security Policy \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u0438 nonce usage Authentication vs Authorization \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 Cryptographic best practices \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 Supply chain attacks \u0438 mitigation strategies Security headers \u043f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 XSS types \u0438 specific protection mechanisms CSRF tokens vs SameSite cookies effectiveness","title":"Must-know Security Concepts"},{"location":"questions/testing/strategies/","text":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f unit, integration \u0438 e2e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 best practices \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f 1. Unit \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0438\u0440\u0430\u043c\u0438\u0434\u044b) Unit \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u0432 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438. // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 // utils/validation.js export function validateEmail(email) { const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return emailRegex.test(email); } export function formatCurrency(amount, currency = 'USD') { return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(amount); } // utils/validation.test.js import { validateEmail, formatCurrency } from './validation'; describe('validateEmail', () => { it('should return true for valid email', () => { expect(validateEmail('test@example.com')).toBe(true); expect(validateEmail('user.name+tag@domain.co.uk')).toBe(true); }); it('should return false for invalid email', () => { expect(validateEmail('invalid-email')).toBe(false); expect(validateEmail('test@')).toBe(false); expect(validateEmail('@example.com')).toBe(false); expect(validateEmail('')).toBe(false); }); it('should handle edge cases', () => { expect(validateEmail(null)).toBe(false); expect(validateEmail(undefined)).toBe(false); expect(validateEmail(123)).toBe(false); }); }); describe('formatCurrency', () => { it('should format USD currency correctly', () => { expect(formatCurrency(1234.56)).toBe('$1,234.56'); expect(formatCurrency(0)).toBe('$0.00'); }); it('should handle different currencies', () => { expect(formatCurrency(1000, 'EUR')).toBe('\u20ac1,000.00'); expect(formatCurrency(1000, 'GBP')).toBe('\u00a31,000.00'); }); it('should handle edge cases', () => { expect(formatCurrency(-100)).toBe('-$100.00'); expect(formatCurrency(0.01)).toBe('$0.01'); }); }); 2. Component \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (React) // components/UserCard.jsx import React from 'react'; export function UserCard({ user, onEdit, onDelete, isLoading = false }) { if (isLoading) { return <div data-testid=\"loading\">Loading...</div>; } if (!user) { return <div data-testid=\"no-user\">No user data</div>; } return ( <div data-testid=\"user-card\"> <h3 data-testid=\"user-name\">{user.name}</h3> <p data-testid=\"user-email\">{user.email}</p> <div className=\"actions\"> <button data-testid=\"edit-button\" onClick={() => onEdit(user.id)} > Edit </button> <button data-testid=\"delete-button\" onClick={() => onDelete(user.id)} className=\"danger\" > Delete </button> </div> </div> ); } // components/UserCard.test.jsx import React from 'react'; import { render, screen, fireEvent } from '@testing-library/react'; import { UserCard } from './UserCard'; const mockUser = { id: '1', name: 'John Doe', email: 'john@example.com' }; describe('UserCard', () => { it('should render user information correctly', () => { render(<UserCard user={mockUser} />); expect(screen.getByTestId('user-card')).toBeInTheDocument(); expect(screen.getByTestId('user-name')).toHaveTextContent('John Doe'); expect(screen.getByTestId('user-email')).toHaveTextContent('john@example.com'); }); it('should show loading state', () => { render(<UserCard isLoading={true} />); expect(screen.getByTestId('loading')).toBeInTheDocument(); expect(screen.queryByTestId('user-card')).not.toBeInTheDocument(); }); it('should show no user message when user is null', () => { render(<UserCard user={null} />); expect(screen.getByTestId('no-user')).toBeInTheDocument(); expect(screen.queryByTestId('user-card')).not.toBeInTheDocument(); }); it('should call onEdit when edit button is clicked', () => { const onEdit = jest.fn(); render(<UserCard user={mockUser} onEdit={onEdit} />); fireEvent.click(screen.getByTestId('edit-button')); expect(onEdit).toHaveBeenCalledWith('1'); }); it('should call onDelete when delete button is clicked', () => { const onDelete = jest.fn(); render(<UserCard user={mockUser} onDelete={onDelete} />); fireEvent.click(screen.getByTestId('delete-button')); expect(onDelete).toHaveBeenCalledWith('1'); }); it('should have correct CSS classes', () => { render(<UserCard user={mockUser} />); const deleteButton = screen.getByTestId('delete-button'); expect(deleteButton).toHaveClass('danger'); }); }); 3. Custom Hooks \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // hooks/useCounter.js import { useState, useCallback } from 'react'; export function useCounter(initialValue = 0) { const [count, setCount] = useState(initialValue); const increment = useCallback(() => { setCount(prev => prev + 1); }, []); const decrement = useCallback(() => { setCount(prev => prev - 1); }, []); const reset = useCallback(() => { setCount(initialValue); }, [initialValue]); const setValue = useCallback((value) => { setCount(value); }, []); return { count, increment, decrement, reset, setValue }; } // hooks/useCounter.test.js import { renderHook, act } from '@testing-library/react'; import { useCounter } from './useCounter'; describe('useCounter', () => { it('should initialize with default value', () => { const { result } = renderHook(() => useCounter()); expect(result.current.count).toBe(0); }); it('should initialize with custom value', () => { const { result } = renderHook(() => useCounter(10)); expect(result.current.count).toBe(10); }); it('should increment count', () => { const { result } = renderHook(() => useCounter(5)); act(() => { result.current.increment(); }); expect(result.current.count).toBe(6); }); it('should decrement count', () => { const { result } = renderHook(() => useCounter(5)); act(() => { result.current.decrement(); }); expect(result.current.count).toBe(4); }); it('should reset to initial value', () => { const { result } = renderHook(() => useCounter(10)); act(() => { result.current.increment(); result.current.increment(); }); expect(result.current.count).toBe(12); act(() => { result.current.reset(); }); expect(result.current.count).toBe(10); }); it('should set specific value', () => { const { result } = renderHook(() => useCounter()); act(() => { result.current.setValue(100); }); expect(result.current.count).toBe(100); }); }); Integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 1. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 // components/UserList.jsx import React, { useState, useEffect } from 'react'; import { UserCard } from './UserCard'; import { userService } from '../services/userService'; export function UserList() { const [users, setUsers] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { loadUsers(); }, []); const loadUsers = async () => { try { setLoading(true); setError(null); const userData = await userService.getUsers(); setUsers(userData); } catch (err) { setError(err.message); } finally { setLoading(false); } }; const handleEdit = (userId) => { // \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043a \u0444\u043e\u0440\u043c\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f window.location.href = `/users/${userId}/edit`; }; const handleDelete = async (userId) => { if (window.confirm('Are you sure?')) { try { await userService.deleteUser(userId); setUsers(prev => prev.filter(user => user.id !== userId)); } catch (err) { setError(err.message); } } }; if (loading) { return <div data-testid=\"loading\">Loading users...</div>; } if (error) { return <div data-testid=\"error\">Error: {error}</div>; } return ( <div data-testid=\"user-list\"> {users.length === 0 ? ( <div data-testid=\"empty-state\">No users found</div> ) : ( users.map(user => ( <UserCard key={user.id} user={user} onEdit={handleEdit} onDelete={handleDelete} /> )) )} </div> ); } // components/UserList.test.jsx import React from 'react'; import { render, screen, waitFor, fireEvent } from '@testing-library/react'; import { UserList } from './UserList'; import { userService } from '../services/userService'; // \u041c\u043e\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 jest.mock('../services/userService'); const mockUserService = userService as jest.Mocked<typeof userService>; // \u041c\u043e\u043a\u0430\u0435\u043c window.confirm \u0438 window.location const mockConfirm = jest.fn(); const mockLocation = { href: '' }; Object.defineProperty(window, 'confirm', { value: mockConfirm, writable: true }); Object.defineProperty(window, 'location', { value: mockLocation, writable: true }); const mockUsers = [ { id: '1', name: 'John Doe', email: 'john@example.com' }, { id: '2', name: 'Jane Smith', email: 'jane@example.com' } ]; describe('UserList Integration', () => { beforeEach(() => { jest.clearAllMocks(); mockLocation.href = ''; }); it('should load and display users', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); render(<UserList />); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c loading \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 expect(screen.getByTestId('loading')).toBeInTheDocument(); // \u0416\u0434\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f expect(screen.getByText('John Doe')).toBeInTheDocument(); expect(screen.getByText('Jane Smith')).toBeInTheDocument(); expect(mockUserService.getUsers).toHaveBeenCalledTimes(1); }); it('should handle loading error', async () => { const errorMessage = 'Failed to load users'; mockUserService.getUsers.mockRejectedValue(new Error(errorMessage)); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('error')).toBeInTheDocument(); }); expect(screen.getByText(`Error: ${errorMessage}`)).toBeInTheDocument(); }); it('should show empty state when no users', async () => { mockUserService.getUsers.mockResolvedValue([]); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('empty-state')).toBeInTheDocument(); }); expect(screen.getByText('No users found')).toBeInTheDocument(); }); it('should handle edit user', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const editButtons = screen.getAllByTestId('edit-button'); fireEvent.click(editButtons[0]); expect(mockLocation.href).toBe('/users/1/edit'); }); it('should handle delete user with confirmation', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); mockUserService.deleteUser.mockResolvedValue(); mockConfirm.mockReturnValue(true); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const deleteButtons = screen.getAllByTestId('delete-button'); fireEvent.click(deleteButtons[0]); expect(mockConfirm).toHaveBeenCalledWith('Are you sure?'); await waitFor(() => { expect(mockUserService.deleteUser).toHaveBeenCalledWith('1'); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0434\u0430\u043b\u0435\u043d \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 expect(screen.queryByText('John Doe')).not.toBeInTheDocument(); expect(screen.getByText('Jane Smith')).toBeInTheDocument(); }); it('should not delete user when confirmation is cancelled', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); mockConfirm.mockReturnValue(false); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const deleteButtons = screen.getAllByTestId('delete-button'); fireEvent.click(deleteButtons[0]); expect(mockConfirm).toHaveBeenCalledWith('Are you sure?'); expect(mockUserService.deleteUser).not.toHaveBeenCalled(); expect(screen.getByText('John Doe')).toBeInTheDocument(); }); }); Mock \u0438 stubbing 1. \u041c\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432 // services/apiClient.js class ApiClient { constructor(baseURL) { this.baseURL = baseURL; } async get(endpoint) { const response = await fetch(`${this.baseURL}${endpoint}`); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); } async post(endpoint, data) { const response = await fetch(`${this.baseURL}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(data), }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); } } // services/userService.js import { ApiClient } from './apiClient'; const apiClient = new ApiClient('/api'); export const userService = { async getUsers() { return apiClient.get('/users'); }, async getUserById(id) { return apiClient.get(`/users/${id}`); }, async createUser(userData) { return apiClient.post('/users', userData); }, async updateUser(id, userData) { return apiClient.put(`/users/${id}`, userData); }, async deleteUser(id) { return apiClient.delete(`/users/${id}`); } }; // services/userService.test.js import { userService } from './userService'; // \u041c\u043e\u043a\u0430\u0435\u043c fetch global.fetch = jest.fn(); const mockFetch = fetch as jest.MockedFunction<typeof fetch>; describe('userService', () => { beforeEach(() => { mockFetch.mockClear(); }); describe('getUsers', () => { it('should fetch users successfully', async () => { const mockUsers = [ { id: '1', name: 'John Doe' }, { id: '2', name: 'Jane Smith' } ]; mockFetch.mockResolvedValueOnce({ ok: true, json: async () => mockUsers, } as Response); const users = await userService.getUsers(); expect(mockFetch).toHaveBeenCalledWith('/api/users'); expect(users).toEqual(mockUsers); }); it('should handle API errors', async () => { mockFetch.mockResolvedValueOnce({ ok: false, status: 500, } as Response); await expect(userService.getUsers()).rejects.toThrow('HTTP error! status: 500'); expect(mockFetch).toHaveBeenCalledWith('/api/users'); }); it('should handle network errors', async () => { mockFetch.mockRejectedValueOnce(new Error('Network error')); await expect(userService.getUsers()).rejects.toThrow('Network error'); }); }); describe('createUser', () => { it('should create user successfully', async () => { const newUser = { name: 'John Doe', email: 'john@example.com' }; const createdUser = { id: '1', ...newUser }; mockFetch.mockResolvedValueOnce({ ok: true, json: async () => createdUser, } as Response); const result = await userService.createUser(newUser); expect(mockFetch).toHaveBeenCalledWith('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(newUser), }); expect(result).toEqual(createdUser); }); }); }); 2. \u041c\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 // utils/analytics.js export const analytics = { track: (event, properties) => { if (typeof window !== 'undefined' && window.gtag) { window.gtag('event', event, properties); } }, identify: (userId, traits) => { if (typeof window !== 'undefined' && window.gtag) { window.gtag('config', 'GA_TRACKING_ID', { user_id: userId, custom_map: traits }); } } }; // components/AnalyticsButton.jsx import React from 'react'; import { analytics } from '../utils/analytics'; export function AnalyticsButton({ children, event, properties, onClick }) { const handleClick = (e) => { analytics.track(event, properties); onClick?.(e); }; return ( <button onClick={handleClick}> {children} </button> ); } // components/AnalyticsButton.test.jsx import React from 'react'; import { render, screen, fireEvent } from '@testing-library/react'; import { AnalyticsButton } from './AnalyticsButton'; import { analytics } from '../utils/analytics'; // \u041c\u043e\u043a\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c analytics jest.mock('../utils/analytics', () => ({ analytics: { track: jest.fn(), identify: jest.fn() } })); const mockAnalytics = analytics as jest.Mocked<typeof analytics>; describe('AnalyticsButton', () => { beforeEach(() => { jest.clearAllMocks(); }); it('should track analytics event on click', () => { const mockOnClick = jest.fn(); const eventName = 'button_clicked'; const properties = { section: 'header' }; render( <AnalyticsButton event={eventName} properties={properties} onClick={mockOnClick} > Click me </AnalyticsButton> ); fireEvent.click(screen.getByRole('button')); expect(mockAnalytics.track).toHaveBeenCalledWith(eventName, properties); expect(mockOnClick).toHaveBeenCalled(); }); it('should work without onClick handler', () => { const eventName = 'button_clicked'; render( <AnalyticsButton event={eventName}> Click me </AnalyticsButton> ); fireEvent.click(screen.getByRole('button')); expect(mockAnalytics.track).toHaveBeenCalledWith(eventName, undefined); }); }); E2E \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 1. Playwright \u0442\u0435\u0441\u0442\u044b // tests/e2e/userManagement.spec.js import { test, expect } from '@playwright/test'; test.describe('User Management', () => { test.beforeEach(async ({ page }) => { await page.goto('/users'); }); test('should display user list', async ({ page }) => { await expect(page.getByTestId('user-list')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 await expect(page.locator('[data-testid=\"user-card\"]')).toHaveCount(3); }); test('should create new user', async ({ page }) => { // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f await page.click('[data-testid=\"add-user-button\"]'); // \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0443 await page.fill('[data-testid=\"name-input\"]', 'John Doe'); await page.fill('[data-testid=\"email-input\"]', 'john@example.com'); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0443 await page.click('[data-testid=\"submit-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d await expect(page.getByText('John Doe')).toBeVisible(); await expect(page.getByText('john@example.com')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 await expect(page.getByText('User created successfully')).toBeVisible(); }); test('should edit existing user', async ({ page }) => { // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f await page.click('[data-testid=\"user-card\"]:first-child [data-testid=\"edit-button\"]'); // \u0416\u0434\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f await expect(page.getByTestId('edit-user-form')).toBeVisible(); // \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u0438\u043c\u044f await page.fill('[data-testid=\"name-input\"]', 'Updated Name'); // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f await page.click('[data-testid=\"save-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0441\u044c await expect(page.getByText('Updated Name')).toBeVisible(); }); test('should delete user with confirmation', async ({ page }) => { // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f const initialCount = await page.locator('[data-testid=\"user-card\"]').count(); // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f await page.click('[data-testid=\"user-card\"]:first-child [data-testid=\"delete-button\"]'); // \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0430\u043b\u043e\u0433\u0435 page.on('dialog', async dialog => { expect(dialog.message()).toBe('Are you sure you want to delete this user?'); await dialog.accept(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0434\u0430\u043b\u0435\u043d await expect(page.locator('[data-testid=\"user-card\"]')).toHaveCount(initialCount - 1); }); test('should handle validation errors', async ({ page }) => { await page.click('[data-testid=\"add-user-button\"]'); // \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0444\u043e\u0440\u043c\u0443 await page.click('[data-testid=\"submit-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 await expect(page.getByText('Name is required')).toBeVisible(); await expect(page.getByText('Email is required')).toBeVisible(); // \u0412\u0432\u043e\u0434\u0438\u043c \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439 email await page.fill('[data-testid=\"email-input\"]', 'invalid-email'); await page.click('[data-testid=\"submit-button\"]'); await expect(page.getByText('Please enter a valid email')).toBeVisible(); }); test('should handle network errors gracefully', async ({ page }) => { // \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u0435\u0442\u044c await page.route('**/api/users', route => route.abort()); await page.goto('/users'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 await expect(page.getByTestId('error-message')).toBeVisible(); await expect(page.getByText('Failed to load users')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 retry await expect(page.getByTestId('retry-button')).toBeVisible(); }); }); 2. Cypress \u0442\u0435\u0441\u0442\u044b // cypress/integration/userFlow.spec.js describe('User Flow', () => { beforeEach(() => { cy.visit('/'); // \u041c\u043e\u043a\u0430\u0435\u043c API \u0432\u044b\u0437\u043e\u0432\u044b cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers'); cy.intercept('POST', '/api/users', { fixture: 'newUser.json' }).as('createUser'); }); it('should complete full user management flow', () => { // \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 cy.get('[data-testid=\"user-list\"]').should('be.visible'); cy.get('[data-testid=\"user-card\"]').should('have.length', 3); // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f cy.get('[data-testid=\"add-user-button\"]').click(); cy.get('[data-testid=\"user-form\"]').should('be.visible'); cy.get('[data-testid=\"name-input\"]').type('John Doe'); cy.get('[data-testid=\"email-input\"]').type('john@example.com'); cy.get('[data-testid=\"submit-button\"]').click(); cy.wait('@createUser'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 cy.get('[data-testid=\"success-message\"]').should('contain', 'User created'); // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u043f\u0438\u0441\u043a\u0443 cy.get('[data-testid=\"back-button\"]').click(); cy.get('[data-testid=\"user-list\"]').should('be.visible'); }); it('should handle responsive design', () => { cy.viewport(375, 667); // Mobile viewport cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e cy.get('[data-testid=\"mobile-menu\"]').should('be.visible'); cy.get('[data-testid=\"user-card\"]').should('have.css', 'flex-direction', 'column'); }); it('should handle keyboard navigation', () => { cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b cy.get('body').tab(); cy.get('[data-testid=\"add-user-button\"]').should('have.focus'); cy.get('body').tab(); cy.get('[data-testid=\"user-card\"]:first [data-testid=\"edit-button\"]').should('have.focus'); }); }); // cypress/fixtures/users.json [ { \"id\": \"1\", \"name\": \"Alice Johnson\", \"email\": \"alice@example.com\" }, { \"id\": \"2\", \"name\": \"Bob Smith\", \"email\": \"bob@example.com\" }, { \"id\": \"3\", \"name\": \"Carol Brown\", \"email\": \"carol@example.com\" } ] Visual Regression \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 1. Chromatic (Storybook) // .storybook/main.js module.exports = { stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'], addons: [ '@storybook/addon-essentials', '@storybook/addon-a11y', 'chromatic/storybook' ], }; // src/components/Button.stories.jsx import React from 'react'; import { Button } from './Button'; export default { title: 'Components/Button', component: Button, parameters: { chromatic: { delay: 300 }, // \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0430\u0446\u0438\u0439 }, }; export const Primary = { args: { variant: 'primary', children: 'Primary Button', }, }; export const Secondary = { args: { variant: 'secondary', children: 'Secondary Button', }, }; export const Loading = { args: { variant: 'primary', loading: true, children: 'Loading Button', }, }; export const Disabled = { args: { variant: 'primary', disabled: true, children: 'Disabled Button', }, }; // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 export const AllSizes = () => ( <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}> <Button size=\"small\">Small</Button> <Button size=\"medium\">Medium</Button> <Button size=\"large\">Large</Button> </div> ); 2. Percy (Visual Testing) // tests/visual/percy.spec.js import { test } from '@playwright/test'; import { percySnapshot } from '@percy/playwright'; test.describe('Visual Regression Tests', () => { test('should match homepage design', async ({ page }) => { await page.goto('/'); await page.waitForLoadState('networkidle'); await percySnapshot(page, 'Homepage'); }); test('should match user list design', async ({ page }) => { await page.goto('/users'); await page.waitForSelector('[data-testid=\"user-list\"]'); await percySnapshot(page, 'User List'); }); test('should match responsive design', async ({ page }) => { await page.goto('/'); // Desktop await page.setViewportSize({ width: 1200, height: 800 }); await percySnapshot(page, 'Homepage - Desktop'); // Tablet await page.setViewportSize({ width: 768, height: 1024 }); await percySnapshot(page, 'Homepage - Tablet'); // Mobile await page.setViewportSize({ width: 375, height: 667 }); await percySnapshot(page, 'Homepage - Mobile'); }); test('should match dark theme', async ({ page }) => { await page.goto('/'); // \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0435\u043c\u043d\u0443\u044e \u0442\u0435\u043c\u0443 await page.click('[data-testid=\"theme-toggle\"]'); await page.waitForSelector('body[data-theme=\"dark\"]'); await percySnapshot(page, 'Homepage - Dark Theme'); }); }); Accessibility \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 1. Jest + jest-axe // components/Form.test.jsx import React from 'react'; import { render } from '@testing-library/react'; import { axe, toHaveNoViolations } from 'jest-axe'; import { UserForm } from './UserForm'; expect.extend(toHaveNoViolations); describe('UserForm Accessibility', () => { it('should not have accessibility violations', async () => { const { container } = render( <UserForm onSubmit={() => {}} /> ); const results = await axe(container); expect(results).toHaveNoViolations(); }); it('should have proper form labels', () => { const { getByLabelText } = render( <UserForm onSubmit={() => {}} /> ); expect(getByLabelText('Name')).toBeInTheDocument(); expect(getByLabelText('Email')).toBeInTheDocument(); }); it('should show validation errors with proper ARIA attributes', async () => { const { getByRole, findByRole } = render( <UserForm onSubmit={() => {}} /> ); const submitButton = getByRole('button', { name: /submit/i }); fireEvent.click(submitButton); const nameInput = getByRole('textbox', { name: /name/i }); const errorMessage = await findByRole('alert'); expect(nameInput).toHaveAttribute('aria-invalid', 'true'); expect(nameInput).toHaveAttribute('aria-describedby'); expect(errorMessage).toBeInTheDocument(); }); }); 2. Playwright + axe-playwright // tests/a11y/accessibility.spec.js import { test, expect } from '@playwright/test'; import AxeBuilder from '@axe-core/playwright'; test.describe('Accessibility Tests', () => { test('should not have accessibility violations on homepage', async ({ page }) => { await page.goto('/'); const accessibilityScanResults = await new AxeBuilder({ page }) .withTags(['wcag2a', 'wcag2aa', 'wcag21aa']) .analyze(); expect(accessibilityScanResults.violations).toEqual([]); }); test('should support keyboard navigation', async ({ page }) => { await page.goto('/users'); // \u0422\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044f \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c await page.keyboard.press('Tab'); await expect(page.locator('[data-testid=\"add-user-button\"]')).toBeFocused(); await page.keyboard.press('Tab'); await expect(page.locator('[data-testid=\"user-card\"]:first-child [data-testid=\"edit-button\"]')).toBeFocused(); // Enter \u0434\u043e\u043b\u0436\u0435\u043d \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0443 await page.keyboard.press('Enter'); await expect(page.locator('[data-testid=\"user-form\"]')).toBeVisible(); }); test('should work with screen reader', async ({ page }) => { await page.goto('/users'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c aria-labels \u0438 role attributes const userList = page.locator('[data-testid=\"user-list\"]'); await expect(userList).toHaveAttribute('role', 'list'); const userCards = page.locator('[data-testid=\"user-card\"]'); await expect(userCards.first()).toHaveAttribute('role', 'listitem'); }); }); Performance \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 1. Lighthouse CI // lighthouserc.js module.exports = { ci: { collect: { url: ['http://localhost:3000', 'http://localhost:3000/users'], numberOfRuns: 3, }, assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'categories:accessibility': ['error', { minScore: 0.9 }], 'categories:best-practices': ['error', { minScore: 0.9 }], 'categories:seo': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }], }, }, upload: { target: 'temporary-public-storage', }, }, }; 2. Bundle Size \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // tests/bundle-size.test.js import { getPackageSize } from 'package-size'; describe('Bundle Size', () => { it('should keep main bundle under size limit', async () => { const size = await getPackageSize('dist/main.js'); expect(size.gzipped).toBeLessThan(250 * 1024); // 250KB }); it('should keep vendor bundle under size limit', async () => { const size = await getPackageSize('dist/vendor.js'); expect(size.gzipped).toBeLessThan(500 * 1024); // 500KB }); }); Test Utils \u0438 Helpers 1. Custom Render \u0434\u043b\u044f React // test-utils/render.jsx import React from 'react'; import { render as rtlRender } from '@testing-library/react'; import { BrowserRouter } from 'react-router-dom'; import { QueryClient, QueryClientProvider } from 'react-query'; import { ThemeProvider } from 'styled-components'; import { defaultTheme } from '../src/theme'; function render( ui, { initialEntries = ['/'], theme = defaultTheme, queryClient = new QueryClient({ defaultOptions: { queries: { retry: false }, mutations: { retry: false }, }, }), ...renderOptions } = {} ) { function Wrapper({ children }) { return ( <BrowserRouter> <QueryClientProvider client={queryClient}> <ThemeProvider theme={theme}> {children} </ThemeProvider> </QueryClientProvider> </BrowserRouter> ); } return rtlRender(ui, { wrapper: Wrapper, ...renderOptions }); } // \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0438\u0437 RTL export * from '@testing-library/react'; // \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c render export { render }; 2. Mock Factories // test-utils/factories.js import { faker } from '@faker-js/faker'; export const createMockUser = (overrides = {}) => ({ id: faker.datatype.uuid(), name: faker.name.fullName(), email: faker.internet.email(), avatar: faker.image.avatar(), createdAt: faker.date.past(), ...overrides, }); export const createMockPost = (overrides = {}) => ({ id: faker.datatype.uuid(), title: faker.lorem.sentence(), content: faker.lorem.paragraphs(3), authorId: faker.datatype.uuid(), createdAt: faker.date.past(), updatedAt: faker.date.recent(), ...overrides, }); export const createMockUsers = (count = 3) => Array.from({ length: count }, () => createMockUser()); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 import { createMockUser, createMockUsers } from '../test-utils/factories'; describe('UserList', () => { it('should render multiple users', () => { const users = createMockUsers(5); render(<UserList users={users} />); expect(screen.getAllByTestId('user-card')).toHaveLength(5); }); }); Test Configuration 1. Jest Configuration // jest.config.js module.exports = { testEnvironment: 'jsdom', setupFilesAfterEnv: ['<rootDir>/src/test-utils/setup.js'], moduleNameMapping: { '^@/(.*)$': '<rootDir>/src/$1', '\\\\.(css|less|scss|sass)$': 'identity-obj-proxy', }, collectCoverageFrom: [ 'src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts', '!src/test-utils/**', '!src/**/*.stories.{js,jsx,ts,tsx}', ], coverageThreshold: { global: { branches: 80, functions: 80, lines: 80, statements: 80, }, }, testMatch: [ '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}', '<rootDir>/src/**/*.{spec,test}.{js,jsx,ts,tsx}', ], }; // src/test-utils/setup.js import '@testing-library/jest-dom'; import { configure } from '@testing-library/react'; // \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c timeout \u0434\u043b\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 configure({ testIdAttribute: 'data-testid' }); // \u041c\u043e\u043a\u0430\u0435\u043c matchMedia Object.defineProperty(window, 'matchMedia', { writable: true, value: jest.fn().mockImplementation(query => ({ matches: false, media: query, onchange: null, addListener: jest.fn(), removeListener: jest.fn(), addEventListener: jest.fn(), removeEventListener: jest.fn(), dispatchEvent: jest.fn(), })), }); // \u041c\u043e\u043a\u0430\u0435\u043c IntersectionObserver global.IntersectionObserver = jest.fn().mockImplementation(() => ({ observe: jest.fn(), unobserve: jest.fn(), disconnect: jest.fn(), })); Best Practices \u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f : 70% unit, 20% integration, 10% e2e Test-first approach : \u041f\u0438\u0448\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0434\u043e \u0438\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c \u041e\u0434\u0438\u043d assert \u043d\u0430 \u0442\u0435\u0441\u0442 : \u0424\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0435 \u0414\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u0438\u0432\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f : \u0422\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432 : \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e : \u0424\u043e\u043a\u0443\u0441 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 data-testid : \u0414\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u041c\u043e\u043a\u0430\u0439\u0442\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : API, localStorage, timers CI/CD Integration # .github/workflows/test.yml name: Tests on: [push, pull_request] jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' cache: 'npm' - name: Install dependencies run: npm ci - name: Run unit tests run: npm run test:unit - name: Run integration tests run: npm run test:integration - name: Build application run: npm run build - name: Run E2E tests run: npm run test:e2e - name: Upload coverage reports uses: codecov/codecov-action@v3 with: file: ./coverage/lcov.info \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b Performance Optimization - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 TypeScript - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432 State Management - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (Jest, RTL, Playwright, Cypress) - \u0417\u043d\u0430\u043d\u0438\u0435 best practices \u0438 anti-patterns - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 TDD/BDD \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438 accessibility \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 unit, integration \u0438 e2e \u0442\u0435\u0441\u0442\u0430\u043c\u0438 - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c async \u043a\u043e\u0434 \u0438 \u0445\u0443\u043a\u0438? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 test doubles (mock, stub, spy)? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f?","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/testing/strategies/#frontend-","text":"","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"questions/testing/strategies/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f unit, integration \u0438 e2e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 best practices \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/testing/strategies/#_3","text":"","title":"\u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/testing/strategies/#1-unit","text":"Unit \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u0432 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438. // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 // utils/validation.js export function validateEmail(email) { const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return emailRegex.test(email); } export function formatCurrency(amount, currency = 'USD') { return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(amount); } // utils/validation.test.js import { validateEmail, formatCurrency } from './validation'; describe('validateEmail', () => { it('should return true for valid email', () => { expect(validateEmail('test@example.com')).toBe(true); expect(validateEmail('user.name+tag@domain.co.uk')).toBe(true); }); it('should return false for invalid email', () => { expect(validateEmail('invalid-email')).toBe(false); expect(validateEmail('test@')).toBe(false); expect(validateEmail('@example.com')).toBe(false); expect(validateEmail('')).toBe(false); }); it('should handle edge cases', () => { expect(validateEmail(null)).toBe(false); expect(validateEmail(undefined)).toBe(false); expect(validateEmail(123)).toBe(false); }); }); describe('formatCurrency', () => { it('should format USD currency correctly', () => { expect(formatCurrency(1234.56)).toBe('$1,234.56'); expect(formatCurrency(0)).toBe('$0.00'); }); it('should handle different currencies', () => { expect(formatCurrency(1000, 'EUR')).toBe('\u20ac1,000.00'); expect(formatCurrency(1000, 'GBP')).toBe('\u00a31,000.00'); }); it('should handle edge cases', () => { expect(formatCurrency(-100)).toBe('-$100.00'); expect(formatCurrency(0.01)).toBe('$0.01'); }); });","title":"1. Unit \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0438\u0440\u0430\u043c\u0438\u0434\u044b)"},{"location":"questions/testing/strategies/#2-component-react","text":"// components/UserCard.jsx import React from 'react'; export function UserCard({ user, onEdit, onDelete, isLoading = false }) { if (isLoading) { return <div data-testid=\"loading\">Loading...</div>; } if (!user) { return <div data-testid=\"no-user\">No user data</div>; } return ( <div data-testid=\"user-card\"> <h3 data-testid=\"user-name\">{user.name}</h3> <p data-testid=\"user-email\">{user.email}</p> <div className=\"actions\"> <button data-testid=\"edit-button\" onClick={() => onEdit(user.id)} > Edit </button> <button data-testid=\"delete-button\" onClick={() => onDelete(user.id)} className=\"danger\" > Delete </button> </div> </div> ); } // components/UserCard.test.jsx import React from 'react'; import { render, screen, fireEvent } from '@testing-library/react'; import { UserCard } from './UserCard'; const mockUser = { id: '1', name: 'John Doe', email: 'john@example.com' }; describe('UserCard', () => { it('should render user information correctly', () => { render(<UserCard user={mockUser} />); expect(screen.getByTestId('user-card')).toBeInTheDocument(); expect(screen.getByTestId('user-name')).toHaveTextContent('John Doe'); expect(screen.getByTestId('user-email')).toHaveTextContent('john@example.com'); }); it('should show loading state', () => { render(<UserCard isLoading={true} />); expect(screen.getByTestId('loading')).toBeInTheDocument(); expect(screen.queryByTestId('user-card')).not.toBeInTheDocument(); }); it('should show no user message when user is null', () => { render(<UserCard user={null} />); expect(screen.getByTestId('no-user')).toBeInTheDocument(); expect(screen.queryByTestId('user-card')).not.toBeInTheDocument(); }); it('should call onEdit when edit button is clicked', () => { const onEdit = jest.fn(); render(<UserCard user={mockUser} onEdit={onEdit} />); fireEvent.click(screen.getByTestId('edit-button')); expect(onEdit).toHaveBeenCalledWith('1'); }); it('should call onDelete when delete button is clicked', () => { const onDelete = jest.fn(); render(<UserCard user={mockUser} onDelete={onDelete} />); fireEvent.click(screen.getByTestId('delete-button')); expect(onDelete).toHaveBeenCalledWith('1'); }); it('should have correct CSS classes', () => { render(<UserCard user={mockUser} />); const deleteButton = screen.getByTestId('delete-button'); expect(deleteButton).toHaveClass('danger'); }); });","title":"2. Component \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (React)"},{"location":"questions/testing/strategies/#3-custom-hooks","text":"// hooks/useCounter.js import { useState, useCallback } from 'react'; export function useCounter(initialValue = 0) { const [count, setCount] = useState(initialValue); const increment = useCallback(() => { setCount(prev => prev + 1); }, []); const decrement = useCallback(() => { setCount(prev => prev - 1); }, []); const reset = useCallback(() => { setCount(initialValue); }, [initialValue]); const setValue = useCallback((value) => { setCount(value); }, []); return { count, increment, decrement, reset, setValue }; } // hooks/useCounter.test.js import { renderHook, act } from '@testing-library/react'; import { useCounter } from './useCounter'; describe('useCounter', () => { it('should initialize with default value', () => { const { result } = renderHook(() => useCounter()); expect(result.current.count).toBe(0); }); it('should initialize with custom value', () => { const { result } = renderHook(() => useCounter(10)); expect(result.current.count).toBe(10); }); it('should increment count', () => { const { result } = renderHook(() => useCounter(5)); act(() => { result.current.increment(); }); expect(result.current.count).toBe(6); }); it('should decrement count', () => { const { result } = renderHook(() => useCounter(5)); act(() => { result.current.decrement(); }); expect(result.current.count).toBe(4); }); it('should reset to initial value', () => { const { result } = renderHook(() => useCounter(10)); act(() => { result.current.increment(); result.current.increment(); }); expect(result.current.count).toBe(12); act(() => { result.current.reset(); }); expect(result.current.count).toBe(10); }); it('should set specific value', () => { const { result } = renderHook(() => useCounter()); act(() => { result.current.setValue(100); }); expect(result.current.count).toBe(100); }); });","title":"3. Custom Hooks \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#integration","text":"","title":"Integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#1","text":"// components/UserList.jsx import React, { useState, useEffect } from 'react'; import { UserCard } from './UserCard'; import { userService } from '../services/userService'; export function UserList() { const [users, setUsers] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { loadUsers(); }, []); const loadUsers = async () => { try { setLoading(true); setError(null); const userData = await userService.getUsers(); setUsers(userData); } catch (err) { setError(err.message); } finally { setLoading(false); } }; const handleEdit = (userId) => { // \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043a \u0444\u043e\u0440\u043c\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f window.location.href = `/users/${userId}/edit`; }; const handleDelete = async (userId) => { if (window.confirm('Are you sure?')) { try { await userService.deleteUser(userId); setUsers(prev => prev.filter(user => user.id !== userId)); } catch (err) { setError(err.message); } } }; if (loading) { return <div data-testid=\"loading\">Loading users...</div>; } if (error) { return <div data-testid=\"error\">Error: {error}</div>; } return ( <div data-testid=\"user-list\"> {users.length === 0 ? ( <div data-testid=\"empty-state\">No users found</div> ) : ( users.map(user => ( <UserCard key={user.id} user={user} onEdit={handleEdit} onDelete={handleDelete} /> )) )} </div> ); } // components/UserList.test.jsx import React from 'react'; import { render, screen, waitFor, fireEvent } from '@testing-library/react'; import { UserList } from './UserList'; import { userService } from '../services/userService'; // \u041c\u043e\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 jest.mock('../services/userService'); const mockUserService = userService as jest.Mocked<typeof userService>; // \u041c\u043e\u043a\u0430\u0435\u043c window.confirm \u0438 window.location const mockConfirm = jest.fn(); const mockLocation = { href: '' }; Object.defineProperty(window, 'confirm', { value: mockConfirm, writable: true }); Object.defineProperty(window, 'location', { value: mockLocation, writable: true }); const mockUsers = [ { id: '1', name: 'John Doe', email: 'john@example.com' }, { id: '2', name: 'Jane Smith', email: 'jane@example.com' } ]; describe('UserList Integration', () => { beforeEach(() => { jest.clearAllMocks(); mockLocation.href = ''; }); it('should load and display users', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); render(<UserList />); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c loading \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 expect(screen.getByTestId('loading')).toBeInTheDocument(); // \u0416\u0434\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f expect(screen.getByText('John Doe')).toBeInTheDocument(); expect(screen.getByText('Jane Smith')).toBeInTheDocument(); expect(mockUserService.getUsers).toHaveBeenCalledTimes(1); }); it('should handle loading error', async () => { const errorMessage = 'Failed to load users'; mockUserService.getUsers.mockRejectedValue(new Error(errorMessage)); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('error')).toBeInTheDocument(); }); expect(screen.getByText(`Error: ${errorMessage}`)).toBeInTheDocument(); }); it('should show empty state when no users', async () => { mockUserService.getUsers.mockResolvedValue([]); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('empty-state')).toBeInTheDocument(); }); expect(screen.getByText('No users found')).toBeInTheDocument(); }); it('should handle edit user', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const editButtons = screen.getAllByTestId('edit-button'); fireEvent.click(editButtons[0]); expect(mockLocation.href).toBe('/users/1/edit'); }); it('should handle delete user with confirmation', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); mockUserService.deleteUser.mockResolvedValue(); mockConfirm.mockReturnValue(true); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const deleteButtons = screen.getAllByTestId('delete-button'); fireEvent.click(deleteButtons[0]); expect(mockConfirm).toHaveBeenCalledWith('Are you sure?'); await waitFor(() => { expect(mockUserService.deleteUser).toHaveBeenCalledWith('1'); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0434\u0430\u043b\u0435\u043d \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 expect(screen.queryByText('John Doe')).not.toBeInTheDocument(); expect(screen.getByText('Jane Smith')).toBeInTheDocument(); }); it('should not delete user when confirmation is cancelled', async () => { mockUserService.getUsers.mockResolvedValue(mockUsers); mockConfirm.mockReturnValue(false); render(<UserList />); await waitFor(() => { expect(screen.getByTestId('user-list')).toBeInTheDocument(); }); const deleteButtons = screen.getAllByTestId('delete-button'); fireEvent.click(deleteButtons[0]); expect(mockConfirm).toHaveBeenCalledWith('Are you sure?'); expect(mockUserService.deleteUser).not.toHaveBeenCalled(); expect(screen.getByText('John Doe')).toBeInTheDocument(); }); });","title":"1. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"},{"location":"questions/testing/strategies/#mock-stubbing","text":"","title":"Mock \u0438 stubbing"},{"location":"questions/testing/strategies/#1-api","text":"// services/apiClient.js class ApiClient { constructor(baseURL) { this.baseURL = baseURL; } async get(endpoint) { const response = await fetch(`${this.baseURL}${endpoint}`); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); } async post(endpoint, data) { const response = await fetch(`${this.baseURL}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(data), }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.json(); } } // services/userService.js import { ApiClient } from './apiClient'; const apiClient = new ApiClient('/api'); export const userService = { async getUsers() { return apiClient.get('/users'); }, async getUserById(id) { return apiClient.get(`/users/${id}`); }, async createUser(userData) { return apiClient.post('/users', userData); }, async updateUser(id, userData) { return apiClient.put(`/users/${id}`, userData); }, async deleteUser(id) { return apiClient.delete(`/users/${id}`); } }; // services/userService.test.js import { userService } from './userService'; // \u041c\u043e\u043a\u0430\u0435\u043c fetch global.fetch = jest.fn(); const mockFetch = fetch as jest.MockedFunction<typeof fetch>; describe('userService', () => { beforeEach(() => { mockFetch.mockClear(); }); describe('getUsers', () => { it('should fetch users successfully', async () => { const mockUsers = [ { id: '1', name: 'John Doe' }, { id: '2', name: 'Jane Smith' } ]; mockFetch.mockResolvedValueOnce({ ok: true, json: async () => mockUsers, } as Response); const users = await userService.getUsers(); expect(mockFetch).toHaveBeenCalledWith('/api/users'); expect(users).toEqual(mockUsers); }); it('should handle API errors', async () => { mockFetch.mockResolvedValueOnce({ ok: false, status: 500, } as Response); await expect(userService.getUsers()).rejects.toThrow('HTTP error! status: 500'); expect(mockFetch).toHaveBeenCalledWith('/api/users'); }); it('should handle network errors', async () => { mockFetch.mockRejectedValueOnce(new Error('Network error')); await expect(userService.getUsers()).rejects.toThrow('Network error'); }); }); describe('createUser', () => { it('should create user successfully', async () => { const newUser = { name: 'John Doe', email: 'john@example.com' }; const createdUser = { id: '1', ...newUser }; mockFetch.mockResolvedValueOnce({ ok: true, json: async () => createdUser, } as Response); const result = await userService.createUser(newUser); expect(mockFetch).toHaveBeenCalledWith('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(newUser), }); expect(result).toEqual(createdUser); }); }); });","title":"1. \u041c\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432"},{"location":"questions/testing/strategies/#2","text":"// utils/analytics.js export const analytics = { track: (event, properties) => { if (typeof window !== 'undefined' && window.gtag) { window.gtag('event', event, properties); } }, identify: (userId, traits) => { if (typeof window !== 'undefined' && window.gtag) { window.gtag('config', 'GA_TRACKING_ID', { user_id: userId, custom_map: traits }); } } }; // components/AnalyticsButton.jsx import React from 'react'; import { analytics } from '../utils/analytics'; export function AnalyticsButton({ children, event, properties, onClick }) { const handleClick = (e) => { analytics.track(event, properties); onClick?.(e); }; return ( <button onClick={handleClick}> {children} </button> ); } // components/AnalyticsButton.test.jsx import React from 'react'; import { render, screen, fireEvent } from '@testing-library/react'; import { AnalyticsButton } from './AnalyticsButton'; import { analytics } from '../utils/analytics'; // \u041c\u043e\u043a\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c analytics jest.mock('../utils/analytics', () => ({ analytics: { track: jest.fn(), identify: jest.fn() } })); const mockAnalytics = analytics as jest.Mocked<typeof analytics>; describe('AnalyticsButton', () => { beforeEach(() => { jest.clearAllMocks(); }); it('should track analytics event on click', () => { const mockOnClick = jest.fn(); const eventName = 'button_clicked'; const properties = { section: 'header' }; render( <AnalyticsButton event={eventName} properties={properties} onClick={mockOnClick} > Click me </AnalyticsButton> ); fireEvent.click(screen.getByRole('button')); expect(mockAnalytics.track).toHaveBeenCalledWith(eventName, properties); expect(mockOnClick).toHaveBeenCalled(); }); it('should work without onClick handler', () => { const eventName = 'button_clicked'; render( <AnalyticsButton event={eventName}> Click me </AnalyticsButton> ); fireEvent.click(screen.getByRole('button')); expect(mockAnalytics.track).toHaveBeenCalledWith(eventName, undefined); }); });","title":"2. \u041c\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"questions/testing/strategies/#e2e","text":"","title":"E2E \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#1-playwright","text":"// tests/e2e/userManagement.spec.js import { test, expect } from '@playwright/test'; test.describe('User Management', () => { test.beforeEach(async ({ page }) => { await page.goto('/users'); }); test('should display user list', async ({ page }) => { await expect(page.getByTestId('user-list')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 await expect(page.locator('[data-testid=\"user-card\"]')).toHaveCount(3); }); test('should create new user', async ({ page }) => { // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f await page.click('[data-testid=\"add-user-button\"]'); // \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0443 await page.fill('[data-testid=\"name-input\"]', 'John Doe'); await page.fill('[data-testid=\"email-input\"]', 'john@example.com'); // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0443 await page.click('[data-testid=\"submit-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d await expect(page.getByText('John Doe')).toBeVisible(); await expect(page.getByText('john@example.com')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 await expect(page.getByText('User created successfully')).toBeVisible(); }); test('should edit existing user', async ({ page }) => { // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f await page.click('[data-testid=\"user-card\"]:first-child [data-testid=\"edit-button\"]'); // \u0416\u0434\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f await expect(page.getByTestId('edit-user-form')).toBeVisible(); // \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u0438\u043c\u044f await page.fill('[data-testid=\"name-input\"]', 'Updated Name'); // \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f await page.click('[data-testid=\"save-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0441\u044c await expect(page.getByText('Updated Name')).toBeVisible(); }); test('should delete user with confirmation', async ({ page }) => { // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f const initialCount = await page.locator('[data-testid=\"user-card\"]').count(); // \u041a\u043b\u0438\u043a\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f await page.click('[data-testid=\"user-card\"]:first-child [data-testid=\"delete-button\"]'); // \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0430\u043b\u043e\u0433\u0435 page.on('dialog', async dialog => { expect(dialog.message()).toBe('Are you sure you want to delete this user?'); await dialog.accept(); }); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0434\u0430\u043b\u0435\u043d await expect(page.locator('[data-testid=\"user-card\"]')).toHaveCount(initialCount - 1); }); test('should handle validation errors', async ({ page }) => { await page.click('[data-testid=\"add-user-button\"]'); // \u041f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0444\u043e\u0440\u043c\u0443 await page.click('[data-testid=\"submit-button\"]'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 await expect(page.getByText('Name is required')).toBeVisible(); await expect(page.getByText('Email is required')).toBeVisible(); // \u0412\u0432\u043e\u0434\u0438\u043c \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439 email await page.fill('[data-testid=\"email-input\"]', 'invalid-email'); await page.click('[data-testid=\"submit-button\"]'); await expect(page.getByText('Please enter a valid email')).toBeVisible(); }); test('should handle network errors gracefully', async ({ page }) => { // \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u0435\u0442\u044c await page.route('**/api/users', route => route.abort()); await page.goto('/users'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 await expect(page.getByTestId('error-message')).toBeVisible(); await expect(page.getByText('Failed to load users')).toBeVisible(); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 retry await expect(page.getByTestId('retry-button')).toBeVisible(); }); });","title":"1. Playwright \u0442\u0435\u0441\u0442\u044b"},{"location":"questions/testing/strategies/#2-cypress","text":"// cypress/integration/userFlow.spec.js describe('User Flow', () => { beforeEach(() => { cy.visit('/'); // \u041c\u043e\u043a\u0430\u0435\u043c API \u0432\u044b\u0437\u043e\u0432\u044b cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers'); cy.intercept('POST', '/api/users', { fixture: 'newUser.json' }).as('createUser'); }); it('should complete full user management flow', () => { // \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 cy.get('[data-testid=\"user-list\"]').should('be.visible'); cy.get('[data-testid=\"user-card\"]').should('have.length', 3); // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f cy.get('[data-testid=\"add-user-button\"]').click(); cy.get('[data-testid=\"user-form\"]').should('be.visible'); cy.get('[data-testid=\"name-input\"]').type('John Doe'); cy.get('[data-testid=\"email-input\"]').type('john@example.com'); cy.get('[data-testid=\"submit-button\"]').click(); cy.wait('@createUser'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 cy.get('[data-testid=\"success-message\"]').should('contain', 'User created'); // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u043f\u0438\u0441\u043a\u0443 cy.get('[data-testid=\"back-button\"]').click(); cy.get('[data-testid=\"user-list\"]').should('be.visible'); }); it('should handle responsive design', () => { cy.viewport(375, 667); // Mobile viewport cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e cy.get('[data-testid=\"mobile-menu\"]').should('be.visible'); cy.get('[data-testid=\"user-card\"]').should('have.css', 'flex-direction', 'column'); }); it('should handle keyboard navigation', () => { cy.get('[data-testid=\"users-nav\"]').click(); cy.wait('@getUsers'); // \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b cy.get('body').tab(); cy.get('[data-testid=\"add-user-button\"]').should('have.focus'); cy.get('body').tab(); cy.get('[data-testid=\"user-card\"]:first [data-testid=\"edit-button\"]').should('have.focus'); }); }); // cypress/fixtures/users.json [ { \"id\": \"1\", \"name\": \"Alice Johnson\", \"email\": \"alice@example.com\" }, { \"id\": \"2\", \"name\": \"Bob Smith\", \"email\": \"bob@example.com\" }, { \"id\": \"3\", \"name\": \"Carol Brown\", \"email\": \"carol@example.com\" } ]","title":"2. Cypress \u0442\u0435\u0441\u0442\u044b"},{"location":"questions/testing/strategies/#visual-regression","text":"","title":"Visual Regression \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#1-chromatic-storybook","text":"// .storybook/main.js module.exports = { stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'], addons: [ '@storybook/addon-essentials', '@storybook/addon-a11y', 'chromatic/storybook' ], }; // src/components/Button.stories.jsx import React from 'react'; import { Button } from './Button'; export default { title: 'Components/Button', component: Button, parameters: { chromatic: { delay: 300 }, // \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0430\u0446\u0438\u0439 }, }; export const Primary = { args: { variant: 'primary', children: 'Primary Button', }, }; export const Secondary = { args: { variant: 'secondary', children: 'Secondary Button', }, }; export const Loading = { args: { variant: 'primary', loading: true, children: 'Loading Button', }, }; export const Disabled = { args: { variant: 'primary', disabled: true, children: 'Disabled Button', }, }; // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 export const AllSizes = () => ( <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}> <Button size=\"small\">Small</Button> <Button size=\"medium\">Medium</Button> <Button size=\"large\">Large</Button> </div> );","title":"1. Chromatic (Storybook)"},{"location":"questions/testing/strategies/#2-percy-visual-testing","text":"// tests/visual/percy.spec.js import { test } from '@playwright/test'; import { percySnapshot } from '@percy/playwright'; test.describe('Visual Regression Tests', () => { test('should match homepage design', async ({ page }) => { await page.goto('/'); await page.waitForLoadState('networkidle'); await percySnapshot(page, 'Homepage'); }); test('should match user list design', async ({ page }) => { await page.goto('/users'); await page.waitForSelector('[data-testid=\"user-list\"]'); await percySnapshot(page, 'User List'); }); test('should match responsive design', async ({ page }) => { await page.goto('/'); // Desktop await page.setViewportSize({ width: 1200, height: 800 }); await percySnapshot(page, 'Homepage - Desktop'); // Tablet await page.setViewportSize({ width: 768, height: 1024 }); await percySnapshot(page, 'Homepage - Tablet'); // Mobile await page.setViewportSize({ width: 375, height: 667 }); await percySnapshot(page, 'Homepage - Mobile'); }); test('should match dark theme', async ({ page }) => { await page.goto('/'); // \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0435\u043c\u043d\u0443\u044e \u0442\u0435\u043c\u0443 await page.click('[data-testid=\"theme-toggle\"]'); await page.waitForSelector('body[data-theme=\"dark\"]'); await percySnapshot(page, 'Homepage - Dark Theme'); }); });","title":"2. Percy (Visual Testing)"},{"location":"questions/testing/strategies/#accessibility","text":"","title":"Accessibility \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#1-jest-jest-axe","text":"// components/Form.test.jsx import React from 'react'; import { render } from '@testing-library/react'; import { axe, toHaveNoViolations } from 'jest-axe'; import { UserForm } from './UserForm'; expect.extend(toHaveNoViolations); describe('UserForm Accessibility', () => { it('should not have accessibility violations', async () => { const { container } = render( <UserForm onSubmit={() => {}} /> ); const results = await axe(container); expect(results).toHaveNoViolations(); }); it('should have proper form labels', () => { const { getByLabelText } = render( <UserForm onSubmit={() => {}} /> ); expect(getByLabelText('Name')).toBeInTheDocument(); expect(getByLabelText('Email')).toBeInTheDocument(); }); it('should show validation errors with proper ARIA attributes', async () => { const { getByRole, findByRole } = render( <UserForm onSubmit={() => {}} /> ); const submitButton = getByRole('button', { name: /submit/i }); fireEvent.click(submitButton); const nameInput = getByRole('textbox', { name: /name/i }); const errorMessage = await findByRole('alert'); expect(nameInput).toHaveAttribute('aria-invalid', 'true'); expect(nameInput).toHaveAttribute('aria-describedby'); expect(errorMessage).toBeInTheDocument(); }); });","title":"1. Jest + jest-axe"},{"location":"questions/testing/strategies/#2-playwright-axe-playwright","text":"// tests/a11y/accessibility.spec.js import { test, expect } from '@playwright/test'; import AxeBuilder from '@axe-core/playwright'; test.describe('Accessibility Tests', () => { test('should not have accessibility violations on homepage', async ({ page }) => { await page.goto('/'); const accessibilityScanResults = await new AxeBuilder({ page }) .withTags(['wcag2a', 'wcag2aa', 'wcag21aa']) .analyze(); expect(accessibilityScanResults.violations).toEqual([]); }); test('should support keyboard navigation', async ({ page }) => { await page.goto('/users'); // \u0422\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044f \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c await page.keyboard.press('Tab'); await expect(page.locator('[data-testid=\"add-user-button\"]')).toBeFocused(); await page.keyboard.press('Tab'); await expect(page.locator('[data-testid=\"user-card\"]:first-child [data-testid=\"edit-button\"]')).toBeFocused(); // Enter \u0434\u043e\u043b\u0436\u0435\u043d \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0443 await page.keyboard.press('Enter'); await expect(page.locator('[data-testid=\"user-form\"]')).toBeVisible(); }); test('should work with screen reader', async ({ page }) => { await page.goto('/users'); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c aria-labels \u0438 role attributes const userList = page.locator('[data-testid=\"user-list\"]'); await expect(userList).toHaveAttribute('role', 'list'); const userCards = page.locator('[data-testid=\"user-card\"]'); await expect(userCards.first()).toHaveAttribute('role', 'listitem'); }); });","title":"2. Playwright + axe-playwright"},{"location":"questions/testing/strategies/#performance","text":"","title":"Performance \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#1-lighthouse-ci","text":"// lighthouserc.js module.exports = { ci: { collect: { url: ['http://localhost:3000', 'http://localhost:3000/users'], numberOfRuns: 3, }, assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'categories:accessibility': ['error', { minScore: 0.9 }], 'categories:best-practices': ['error', { minScore: 0.9 }], 'categories:seo': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }], }, }, upload: { target: 'temporary-public-storage', }, }, };","title":"1. Lighthouse CI"},{"location":"questions/testing/strategies/#2-bundle-size","text":"// tests/bundle-size.test.js import { getPackageSize } from 'package-size'; describe('Bundle Size', () => { it('should keep main bundle under size limit', async () => { const size = await getPackageSize('dist/main.js'); expect(size.gzipped).toBeLessThan(250 * 1024); // 250KB }); it('should keep vendor bundle under size limit', async () => { const size = await getPackageSize('dist/vendor.js'); expect(size.gzipped).toBeLessThan(500 * 1024); // 500KB }); });","title":"2. Bundle Size \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies/#test-utils-helpers","text":"","title":"Test Utils \u0438 Helpers"},{"location":"questions/testing/strategies/#1-custom-render-react","text":"// test-utils/render.jsx import React from 'react'; import { render as rtlRender } from '@testing-library/react'; import { BrowserRouter } from 'react-router-dom'; import { QueryClient, QueryClientProvider } from 'react-query'; import { ThemeProvider } from 'styled-components'; import { defaultTheme } from '../src/theme'; function render( ui, { initialEntries = ['/'], theme = defaultTheme, queryClient = new QueryClient({ defaultOptions: { queries: { retry: false }, mutations: { retry: false }, }, }), ...renderOptions } = {} ) { function Wrapper({ children }) { return ( <BrowserRouter> <QueryClientProvider client={queryClient}> <ThemeProvider theme={theme}> {children} </ThemeProvider> </QueryClientProvider> </BrowserRouter> ); } return rtlRender(ui, { wrapper: Wrapper, ...renderOptions }); } // \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0438\u0437 RTL export * from '@testing-library/react'; // \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c render export { render };","title":"1. Custom Render \u0434\u043b\u044f React"},{"location":"questions/testing/strategies/#2-mock-factories","text":"// test-utils/factories.js import { faker } from '@faker-js/faker'; export const createMockUser = (overrides = {}) => ({ id: faker.datatype.uuid(), name: faker.name.fullName(), email: faker.internet.email(), avatar: faker.image.avatar(), createdAt: faker.date.past(), ...overrides, }); export const createMockPost = (overrides = {}) => ({ id: faker.datatype.uuid(), title: faker.lorem.sentence(), content: faker.lorem.paragraphs(3), authorId: faker.datatype.uuid(), createdAt: faker.date.past(), updatedAt: faker.date.recent(), ...overrides, }); export const createMockUsers = (count = 3) => Array.from({ length: count }, () => createMockUser()); // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 import { createMockUser, createMockUsers } from '../test-utils/factories'; describe('UserList', () => { it('should render multiple users', () => { const users = createMockUsers(5); render(<UserList users={users} />); expect(screen.getAllByTestId('user-card')).toHaveLength(5); }); });","title":"2. Mock Factories"},{"location":"questions/testing/strategies/#test-configuration","text":"","title":"Test Configuration"},{"location":"questions/testing/strategies/#1-jest-configuration","text":"// jest.config.js module.exports = { testEnvironment: 'jsdom', setupFilesAfterEnv: ['<rootDir>/src/test-utils/setup.js'], moduleNameMapping: { '^@/(.*)$': '<rootDir>/src/$1', '\\\\.(css|less|scss|sass)$': 'identity-obj-proxy', }, collectCoverageFrom: [ 'src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts', '!src/test-utils/**', '!src/**/*.stories.{js,jsx,ts,tsx}', ], coverageThreshold: { global: { branches: 80, functions: 80, lines: 80, statements: 80, }, }, testMatch: [ '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}', '<rootDir>/src/**/*.{spec,test}.{js,jsx,ts,tsx}', ], }; // src/test-utils/setup.js import '@testing-library/jest-dom'; import { configure } from '@testing-library/react'; // \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c timeout \u0434\u043b\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 configure({ testIdAttribute: 'data-testid' }); // \u041c\u043e\u043a\u0430\u0435\u043c matchMedia Object.defineProperty(window, 'matchMedia', { writable: true, value: jest.fn().mockImplementation(query => ({ matches: false, media: query, onchange: null, addListener: jest.fn(), removeListener: jest.fn(), addEventListener: jest.fn(), removeEventListener: jest.fn(), dispatchEvent: jest.fn(), })), }); // \u041c\u043e\u043a\u0430\u0435\u043c IntersectionObserver global.IntersectionObserver = jest.fn().mockImplementation(() => ({ observe: jest.fn(), unobserve: jest.fn(), disconnect: jest.fn(), }));","title":"1. Jest Configuration"},{"location":"questions/testing/strategies/#best-practices","text":"\u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f : 70% unit, 20% integration, 10% e2e Test-first approach : \u041f\u0438\u0448\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0434\u043e \u0438\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c \u041e\u0434\u0438\u043d assert \u043d\u0430 \u0442\u0435\u0441\u0442 : \u0424\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0435 \u0414\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u0438\u0432\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f : \u0422\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432 : \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e : \u0424\u043e\u043a\u0443\u0441 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 data-testid : \u0414\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u041c\u043e\u043a\u0430\u0439\u0442\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : API, localStorage, timers","title":"Best Practices"},{"location":"questions/testing/strategies/#cicd-integration","text":"# .github/workflows/test.yml name: Tests on: [push, pull_request] jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' cache: 'npm' - name: Install dependencies run: npm ci - name: Run unit tests run: npm run test:unit - name: Run integration tests run: npm run test:integration - name: Build application run: npm run build - name: Run E2E tests run: npm run test:e2e - name: Upload coverage reports uses: codecov/codecov-action@v3 with: file: ./coverage/lcov.info","title":"CI/CD Integration"},{"location":"questions/testing/strategies/#_4","text":"Performance Optimization - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 TypeScript - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432 State Management - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/testing/strategies/#_5","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (Jest, RTL, Playwright, Cypress) - \u0417\u043d\u0430\u043d\u0438\u0435 best practices \u0438 anti-patterns - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 TDD/BDD \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 - \u041e\u043f\u044b\u0442 \u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438 accessibility \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 unit, integration \u0438 e2e \u0442\u0435\u0441\u0442\u0430\u043c\u0438 - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c async \u043a\u043e\u0434 \u0438 \u0445\u0443\u043a\u0438? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 test doubles (mock, stub, spy)? - \u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435? - \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/testing/strategies_small/","text":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Frontend (small) \u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f E2E (10%) Integration (20%) Unit Tests (70%) Senior Focus : \u0411\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c \u0431\u0430\u0433\u043e\u0432. Unit \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0423\u0442\u0438\u043b\u0438\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 // utils/validation.test.js describe('validateEmail', () => { it('validates emails correctly', () => { expect(validateEmail('test@example.com')).toBe(true); expect(validateEmail('invalid')).toBe(false); expect(validateEmail(null)).toBe(false); }); }); React Component Testing // UserCard.test.jsx import { render, screen, fireEvent } from '@testing-library/react'; describe('UserCard', () => { const mockUser = { id: '1', name: 'John', email: 'john@example.com' }; it('renders user data and handles interactions', () => { const onEdit = jest.fn(); render(<UserCard user={mockUser} onEdit={onEdit} />); expect(screen.getByText('John')).toBeInTheDocument(); fireEvent.click(screen.getByTestId('edit-button')); expect(onEdit).toHaveBeenCalledWith('1'); }); it('shows loading state', () => { render(<UserCard isLoading />); expect(screen.getByTestId('loading')).toBeInTheDocument(); }); }); Custom Hooks Testing import { renderHook, act } from '@testing-library/react'; describe('useCounter', () => { it('manages counter state', () => { const { result } = renderHook(() => useCounter(5)); expect(result.current.count).toBe(5); act(() => result.current.increment()); expect(result.current.count).toBe(6); act(() => result.current.reset()); expect(result.current.count).toBe(5); }); }); Integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 // UserList.test.jsx - \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 import { userService } from '../services/userService'; jest.mock('../services/userService'); const mockUserService = userService as jest.Mocked<typeof userService>; describe('UserList Integration', () => { it('loads and manages users', async () => { mockUserService.getUsers.mockResolvedValue([mockUser]); mockUserService.deleteUser.mockResolvedValue(); window.confirm = jest.fn().mockReturnValue(true); render(<UserList />); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 await waitFor(() => { expect(screen.getByText('John')).toBeInTheDocument(); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 fireEvent.click(screen.getByTestId('delete-button')); await waitFor(() => { expect(mockUserService.deleteUser).toHaveBeenCalledWith('1'); expect(screen.queryByText('John')).not.toBeInTheDocument(); }); }); }); Mocking \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 API Mocking // \u041c\u043e\u043a \u0432\u0441\u0435\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f jest.mock('../services/userService', () => ({ userService: { getUsers: jest.fn(), createUser: jest.fn(), deleteUser: jest.fn() } })); // \u041c\u043e\u043a fetch global.fetch = jest.fn(); describe('API Service', () => { beforeEach(() => { (fetch as jest.MockedFunction<typeof fetch>).mockClear(); }); it('handles API calls', async () => { (fetch as jest.Mock).mockResolvedValueOnce({ ok: true, json: async () => [mockUser] }); const users = await userService.getUsers(); expect(fetch).toHaveBeenCalledWith('/api/users'); expect(users).toEqual([mockUser]); }); }); Dependency Injection \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f // Testable service class UserService { constructor(private apiClient: ApiClient) {} async getUsers() { return this.apiClient.get('/users'); } } // Test \u0441 mock dependency describe('UserService', () => { it('fetches users via API client', async () => { const mockApiClient = { get: jest.fn().mockResolvedValue([mockUser]) }; const userService = new UserService(mockApiClient); const users = await userService.getUsers(); expect(mockApiClient.get).toHaveBeenCalledWith('/users'); expect(users).toEqual([mockUser]); }); }); E2E \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Playwright import { test, expect } from '@playwright/test'; test.describe('User Management E2E', () => { test('complete user flow', async ({ page }) => { await page.goto('/users'); // Create user await page.click('[data-testid=\"add-user\"]'); await page.fill('[data-testid=\"name-input\"]', 'John Doe'); await page.click('[data-testid=\"submit\"]'); // Verify creation await expect(page.getByText('John Doe')).toBeVisible(); // Delete user with confirmation await page.click('[data-testid=\"delete-button\"]'); page.on('dialog', dialog => dialog.accept()); await expect(page.getByText('John Doe')).toBeHidden(); }); test('handles errors gracefully', async ({ page }) => { // Mock API failure await page.route('**/api/users', route => route.abort()); await page.goto('/users'); await expect(page.getByTestId('error-message')).toBeVisible(); }); }); Cypress describe('User Flow', () => { beforeEach(() => { cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers'); }); it('manages users end-to-end', () => { cy.visit('/users'); cy.wait('@getUsers'); cy.get('[data-testid=\"user-card\"]').should('have.length', 3); // Test responsive behavior cy.viewport(375, 667); cy.get('[data-testid=\"mobile-menu\"]').should('be.visible'); }); }); Advanced Testing Patterns Visual Regression Testing // Storybook + Chromatic export default { title: 'Components/Button', component: Button, parameters: { chromatic: { delay: 300, viewports: [375, 768, 1200] } } }; // Percy with Playwright import { percySnapshot } from '@percy/playwright'; test('visual regression', async ({ page }) => { await page.goto('/dashboard'); await percySnapshot(page, 'Dashboard - Desktop'); await page.setViewportSize({ width: 375, height: 667 }); await percySnapshot(page, 'Dashboard - Mobile'); }); Accessibility Testing import { axe, toHaveNoViolations } from 'jest-axe'; expect.extend(toHaveNoViolations); describe('Accessibility', () => { it('meets WCAG standards', async () => { const { container } = render(<UserForm />); const results = await axe(container); expect(results).toHaveNoViolations(); }); }); // Playwright + axe import AxeBuilder from '@axe-core/playwright'; test('accessibility compliance', async ({ page }) => { await page.goto('/'); const results = await new AxeBuilder({ page }) .withTags(['wcag2a', 'wcag2aa']) .analyze(); expect(results.violations).toEqual([]); }); Performance Testing // Lighthouse CI module.exports = { ci: { assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }] } } } }; // Bundle size testing describe('Bundle Size', () => { it('keeps bundles under limits', async () => { const mainSize = await getPackageSize('dist/main.js'); expect(mainSize.gzipped).toBeLessThan(250 * 1024); }); }); Test Utilities & Helpers Custom Render Wrapper // test-utils/render.jsx function render(ui, { theme = defaultTheme, ...options } = {}) { function Wrapper({ children }) { return ( <BrowserRouter> <QueryClientProvider client={testQueryClient}> <ThemeProvider theme={theme}> {children} </ThemeProvider> </QueryClientProvider> </BrowserRouter> ); } return rtlRender(ui, { wrapper: Wrapper, ...options }); } export * from '@testing-library/react'; export { render }; Test Factories // test-utils/factories.js export const createUser = (overrides = {}) => ({ id: faker.datatype.uuid(), name: faker.name.fullName(), email: faker.internet.email(), ...overrides }); export const createUsers = (count = 3, overrides = {}) => Array.from({ length: count }, () => createUser(overrides)); Mock Service Worker (MSW) // mocks/handlers.js import { rest } from 'msw'; export const handlers = [ rest.get('/api/users', (req, res, ctx) => { return res(ctx.json([createUser(), createUser()])); }), rest.post('/api/users', (req, res, ctx) => { return res(ctx.json(createUser(req.body))); }) ]; // Test setup import { server } from './mocks/server'; beforeAll(() => server.listen()); afterEach(() => server.resetHandlers()); afterAll(() => server.close()); Configuration Jest Setup // jest.config.js module.exports = { testEnvironment: 'jsdom', setupFilesAfterEnv: ['<rootDir>/src/test-setup.js'], moduleNameMapping: { '^@/(.*)$': '<rootDir>/src/$1', '\\\\.(css|scss)$': 'identity-obj-proxy' }, collectCoverageFrom: [ 'src/**/*.{js,jsx,ts,tsx}', '!src/**/*.{stories,test,spec}.{js,jsx,ts,tsx}' ], coverageThreshold: { global: { branches: 80, functions: 80, lines: 80, statements: 80 } } }; // src/test-setup.js import '@testing-library/jest-dom'; // Mock globals Object.defineProperty(window, 'matchMedia', { writable: true, value: jest.fn().mockImplementation(query => ({ matches: false, media: query, addEventListener: jest.fn(), removeEventListener: jest.fn() })) }); Senior Testing Strategies Test Organization src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Button/ \u2502 \u2502 \u251c\u2500\u2500 Button.jsx \u2502 \u2502 \u251c\u2500\u2500 Button.test.jsx \u2502 \u2502 \u251c\u2500\u2500 Button.stories.jsx \u2502 \u2502 \u2514\u2500\u2500 index.js \u2502 \u2514\u2500\u2500 __tests__/ \u2502 \u2514\u2500\u2500 integration/ \u251c\u2500\u2500 hooks/ \u2502 \u251c\u2500\u2500 useAuth.js \u2502 \u2514\u2500\u2500 useAuth.test.js \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 validation.js \u2502 \u2514\u2500\u2500 validation.test.js \u2514\u2500\u2500 __tests__/ \u251c\u2500\u2500 e2e/ \u251c\u2500\u2500 integration/ \u2514\u2500\u2500 setup/ Test Doubles Strategy // Mock - \u043f\u043e\u043b\u043d\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0430 const mockUserService = { getUsers: jest.fn().mockResolvedValue([]), createUser: jest.fn() }; // Stub - \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b const stubApiClient = { get: jest.fn() .mockResolvedValueOnce([user1]) .mockRejectedValueOnce(new Error('API Error')) }; // Spy - \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 const userServiceSpy = jest.spyOn(userService, 'getUsers'); Error Testing Patterns describe('Error Handling', () => { it('handles network failures', async () => { mockApiClient.get.mockRejectedValue(new Error('Network Error')); render(<UserList />); await waitFor(() => { expect(screen.getByText('Network Error')).toBeInTheDocument(); }); }); it('handles validation errors', async () => { render(<UserForm />); fireEvent.click(screen.getByRole('button', { name: /submit/i })); expect(await screen.findByText('Email is required')).toBeInTheDocument(); }); }); Async Testing Best Practices // \u2705 Good - explicit waiting await waitFor(() => { expect(screen.getByText('Loaded')).toBeInTheDocument(); }); // \u2705 Good - findBy queries (built-in waiting) expect(await screen.findByText('Loaded')).toBeInTheDocument(); // \u274c Bad - implicit waiting await act(async () => { await new Promise(resolve => setTimeout(resolve, 1000)); }); CI/CD Integration name: Test Suite on: [push, pull_request] jobs: test: runs-on: ubuntu-latest strategy: matrix: node-version: [16, 18, 20] steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: ${{ matrix.node-version }} - name: Install & Test run: | npm ci npm run lint npm run test:unit -- --coverage npm run test:integration npm run build npm run test:e2e - name: Upload Coverage uses: codecov/codecov-action@v3 visual-regression: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: chromaui/action@v1 with: projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }} Best Practices Senior-level Test Strategy : - Unit: Fast feedback, edge cases, complex logic - Integration: Component interactions, data flow - E2E: Critical user journeys, cross-browser compatibility Test Structure (AAA Pattern) : describe('feature', () => { it('should behave correctly when condition', () => { // Arrange const mockData = createTestData(); // Act const result = performAction(mockData); // Assert expect(result).toMatchExpectedOutcome(); }); }); Anti-patterns to avoid : - Testing implementation details - Brittle selectors (CSS classes instead of semantic queries) - Shared test state between tests - Over-mocking (testing mocks instead of behavior) - Insufficient error scenario coverage \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 race conditions? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442-\u0441\u044c\u044e\u0442\u0430? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 accessibility \u0438 internationalization? Contract testing \u0434\u043b\u044f API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439? Flaky tests - \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f? Test-driven development vs Behavior-driven development? Property-based testing \u0434\u043b\u044f frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439? \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Coverage : Lines, Functions, Branches, Statements (80%+ target) Mutation Testing : \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432 (\u0443\u0431\u0438\u0432\u0430\u043d\u0438\u0435 \u043c\u0443\u0442\u0430\u043d\u0442\u043e\u0432) Test Pyramid Balance : \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0442\u0435\u0441\u0442\u043e\u0432 Execution Time : Unit (<10s), Integration (<2min), E2E (<10min) Flakiness Rate : <1% \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 Defect Escape Rate : \u0411\u0430\u0433\u0438, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u0430\u043c\u0438","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Frontend (small)"},{"location":"questions/testing/strategies_small/#frontend-small","text":"","title":"\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Frontend (small)"},{"location":"questions/testing/strategies_small/#_1","text":"E2E (10%) Integration (20%) Unit Tests (70%) Senior Focus : \u0411\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c \u0431\u0430\u0433\u043e\u0432.","title":"\u041f\u0438\u0440\u0430\u043c\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/testing/strategies_small/#unit","text":"","title":"Unit \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies_small/#_2","text":"// utils/validation.test.js describe('validateEmail', () => { it('validates emails correctly', () => { expect(validateEmail('test@example.com')).toBe(true); expect(validateEmail('invalid')).toBe(false); expect(validateEmail(null)).toBe(false); }); });","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"questions/testing/strategies_small/#react-component-testing","text":"// UserCard.test.jsx import { render, screen, fireEvent } from '@testing-library/react'; describe('UserCard', () => { const mockUser = { id: '1', name: 'John', email: 'john@example.com' }; it('renders user data and handles interactions', () => { const onEdit = jest.fn(); render(<UserCard user={mockUser} onEdit={onEdit} />); expect(screen.getByText('John')).toBeInTheDocument(); fireEvent.click(screen.getByTestId('edit-button')); expect(onEdit).toHaveBeenCalledWith('1'); }); it('shows loading state', () => { render(<UserCard isLoading />); expect(screen.getByTestId('loading')).toBeInTheDocument(); }); });","title":"React Component Testing"},{"location":"questions/testing/strategies_small/#custom-hooks-testing","text":"import { renderHook, act } from '@testing-library/react'; describe('useCounter', () => { it('manages counter state', () => { const { result } = renderHook(() => useCounter(5)); expect(result.current.count).toBe(5); act(() => result.current.increment()); expect(result.current.count).toBe(6); act(() => result.current.reset()); expect(result.current.count).toBe(5); }); });","title":"Custom Hooks Testing"},{"location":"questions/testing/strategies_small/#integration","text":"// UserList.test.jsx - \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 import { userService } from '../services/userService'; jest.mock('../services/userService'); const mockUserService = userService as jest.Mocked<typeof userService>; describe('UserList Integration', () => { it('loads and manages users', async () => { mockUserService.getUsers.mockResolvedValue([mockUser]); mockUserService.deleteUser.mockResolvedValue(); window.confirm = jest.fn().mockReturnValue(true); render(<UserList />); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 await waitFor(() => { expect(screen.getByText('John')).toBeInTheDocument(); }); // \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 fireEvent.click(screen.getByTestId('delete-button')); await waitFor(() => { expect(mockUserService.deleteUser).toHaveBeenCalledWith('1'); expect(screen.queryByText('John')).not.toBeInTheDocument(); }); }); });","title":"Integration \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies_small/#mocking","text":"","title":"Mocking \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"questions/testing/strategies_small/#api-mocking","text":"// \u041c\u043e\u043a \u0432\u0441\u0435\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f jest.mock('../services/userService', () => ({ userService: { getUsers: jest.fn(), createUser: jest.fn(), deleteUser: jest.fn() } })); // \u041c\u043e\u043a fetch global.fetch = jest.fn(); describe('API Service', () => { beforeEach(() => { (fetch as jest.MockedFunction<typeof fetch>).mockClear(); }); it('handles API calls', async () => { (fetch as jest.Mock).mockResolvedValueOnce({ ok: true, json: async () => [mockUser] }); const users = await userService.getUsers(); expect(fetch).toHaveBeenCalledWith('/api/users'); expect(users).toEqual([mockUser]); }); });","title":"API Mocking"},{"location":"questions/testing/strategies_small/#dependency-injection","text":"// Testable service class UserService { constructor(private apiClient: ApiClient) {} async getUsers() { return this.apiClient.get('/users'); } } // Test \u0441 mock dependency describe('UserService', () => { it('fetches users via API client', async () => { const mockApiClient = { get: jest.fn().mockResolvedValue([mockUser]) }; const userService = new UserService(mockApiClient); const users = await userService.getUsers(); expect(mockApiClient.get).toHaveBeenCalledWith('/users'); expect(users).toEqual([mockUser]); }); });","title":"Dependency Injection \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/testing/strategies_small/#e2e","text":"","title":"E2E \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/testing/strategies_small/#playwright","text":"import { test, expect } from '@playwright/test'; test.describe('User Management E2E', () => { test('complete user flow', async ({ page }) => { await page.goto('/users'); // Create user await page.click('[data-testid=\"add-user\"]'); await page.fill('[data-testid=\"name-input\"]', 'John Doe'); await page.click('[data-testid=\"submit\"]'); // Verify creation await expect(page.getByText('John Doe')).toBeVisible(); // Delete user with confirmation await page.click('[data-testid=\"delete-button\"]'); page.on('dialog', dialog => dialog.accept()); await expect(page.getByText('John Doe')).toBeHidden(); }); test('handles errors gracefully', async ({ page }) => { // Mock API failure await page.route('**/api/users', route => route.abort()); await page.goto('/users'); await expect(page.getByTestId('error-message')).toBeVisible(); }); });","title":"Playwright"},{"location":"questions/testing/strategies_small/#cypress","text":"describe('User Flow', () => { beforeEach(() => { cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers'); }); it('manages users end-to-end', () => { cy.visit('/users'); cy.wait('@getUsers'); cy.get('[data-testid=\"user-card\"]').should('have.length', 3); // Test responsive behavior cy.viewport(375, 667); cy.get('[data-testid=\"mobile-menu\"]').should('be.visible'); }); });","title":"Cypress"},{"location":"questions/testing/strategies_small/#advanced-testing-patterns","text":"","title":"Advanced Testing Patterns"},{"location":"questions/testing/strategies_small/#visual-regression-testing","text":"// Storybook + Chromatic export default { title: 'Components/Button', component: Button, parameters: { chromatic: { delay: 300, viewports: [375, 768, 1200] } } }; // Percy with Playwright import { percySnapshot } from '@percy/playwright'; test('visual regression', async ({ page }) => { await page.goto('/dashboard'); await percySnapshot(page, 'Dashboard - Desktop'); await page.setViewportSize({ width: 375, height: 667 }); await percySnapshot(page, 'Dashboard - Mobile'); });","title":"Visual Regression Testing"},{"location":"questions/testing/strategies_small/#accessibility-testing","text":"import { axe, toHaveNoViolations } from 'jest-axe'; expect.extend(toHaveNoViolations); describe('Accessibility', () => { it('meets WCAG standards', async () => { const { container } = render(<UserForm />); const results = await axe(container); expect(results).toHaveNoViolations(); }); }); // Playwright + axe import AxeBuilder from '@axe-core/playwright'; test('accessibility compliance', async ({ page }) => { await page.goto('/'); const results = await new AxeBuilder({ page }) .withTags(['wcag2a', 'wcag2aa']) .analyze(); expect(results.violations).toEqual([]); });","title":"Accessibility Testing"},{"location":"questions/testing/strategies_small/#performance-testing","text":"// Lighthouse CI module.exports = { ci: { assert: { assertions: { 'categories:performance': ['error', { minScore: 0.8 }], 'first-contentful-paint': ['error', { maxNumericValue: 2000 }], 'largest-contentful-paint': ['error', { maxNumericValue: 3000 }], 'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }] } } } }; // Bundle size testing describe('Bundle Size', () => { it('keeps bundles under limits', async () => { const mainSize = await getPackageSize('dist/main.js'); expect(mainSize.gzipped).toBeLessThan(250 * 1024); }); });","title":"Performance Testing"},{"location":"questions/testing/strategies_small/#test-utilities-helpers","text":"","title":"Test Utilities &amp; Helpers"},{"location":"questions/testing/strategies_small/#custom-render-wrapper","text":"// test-utils/render.jsx function render(ui, { theme = defaultTheme, ...options } = {}) { function Wrapper({ children }) { return ( <BrowserRouter> <QueryClientProvider client={testQueryClient}> <ThemeProvider theme={theme}> {children} </ThemeProvider> </QueryClientProvider> </BrowserRouter> ); } return rtlRender(ui, { wrapper: Wrapper, ...options }); } export * from '@testing-library/react'; export { render };","title":"Custom Render Wrapper"},{"location":"questions/testing/strategies_small/#test-factories","text":"// test-utils/factories.js export const createUser = (overrides = {}) => ({ id: faker.datatype.uuid(), name: faker.name.fullName(), email: faker.internet.email(), ...overrides }); export const createUsers = (count = 3, overrides = {}) => Array.from({ length: count }, () => createUser(overrides));","title":"Test Factories"},{"location":"questions/testing/strategies_small/#mock-service-worker-msw","text":"// mocks/handlers.js import { rest } from 'msw'; export const handlers = [ rest.get('/api/users', (req, res, ctx) => { return res(ctx.json([createUser(), createUser()])); }), rest.post('/api/users', (req, res, ctx) => { return res(ctx.json(createUser(req.body))); }) ]; // Test setup import { server } from './mocks/server'; beforeAll(() => server.listen()); afterEach(() => server.resetHandlers()); afterAll(() => server.close());","title":"Mock Service Worker (MSW)"},{"location":"questions/testing/strategies_small/#configuration","text":"","title":"Configuration"},{"location":"questions/testing/strategies_small/#jest-setup","text":"// jest.config.js module.exports = { testEnvironment: 'jsdom', setupFilesAfterEnv: ['<rootDir>/src/test-setup.js'], moduleNameMapping: { '^@/(.*)$': '<rootDir>/src/$1', '\\\\.(css|scss)$': 'identity-obj-proxy' }, collectCoverageFrom: [ 'src/**/*.{js,jsx,ts,tsx}', '!src/**/*.{stories,test,spec}.{js,jsx,ts,tsx}' ], coverageThreshold: { global: { branches: 80, functions: 80, lines: 80, statements: 80 } } }; // src/test-setup.js import '@testing-library/jest-dom'; // Mock globals Object.defineProperty(window, 'matchMedia', { writable: true, value: jest.fn().mockImplementation(query => ({ matches: false, media: query, addEventListener: jest.fn(), removeEventListener: jest.fn() })) });","title":"Jest Setup"},{"location":"questions/testing/strategies_small/#senior-testing-strategies","text":"","title":"Senior Testing Strategies"},{"location":"questions/testing/strategies_small/#test-organization","text":"src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Button/ \u2502 \u2502 \u251c\u2500\u2500 Button.jsx \u2502 \u2502 \u251c\u2500\u2500 Button.test.jsx \u2502 \u2502 \u251c\u2500\u2500 Button.stories.jsx \u2502 \u2502 \u2514\u2500\u2500 index.js \u2502 \u2514\u2500\u2500 __tests__/ \u2502 \u2514\u2500\u2500 integration/ \u251c\u2500\u2500 hooks/ \u2502 \u251c\u2500\u2500 useAuth.js \u2502 \u2514\u2500\u2500 useAuth.test.js \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 validation.js \u2502 \u2514\u2500\u2500 validation.test.js \u2514\u2500\u2500 __tests__/ \u251c\u2500\u2500 e2e/ \u251c\u2500\u2500 integration/ \u2514\u2500\u2500 setup/","title":"Test Organization"},{"location":"questions/testing/strategies_small/#test-doubles-strategy","text":"// Mock - \u043f\u043e\u043b\u043d\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0430 const mockUserService = { getUsers: jest.fn().mockResolvedValue([]), createUser: jest.fn() }; // Stub - \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b const stubApiClient = { get: jest.fn() .mockResolvedValueOnce([user1]) .mockRejectedValueOnce(new Error('API Error')) }; // Spy - \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 const userServiceSpy = jest.spyOn(userService, 'getUsers');","title":"Test Doubles Strategy"},{"location":"questions/testing/strategies_small/#error-testing-patterns","text":"describe('Error Handling', () => { it('handles network failures', async () => { mockApiClient.get.mockRejectedValue(new Error('Network Error')); render(<UserList />); await waitFor(() => { expect(screen.getByText('Network Error')).toBeInTheDocument(); }); }); it('handles validation errors', async () => { render(<UserForm />); fireEvent.click(screen.getByRole('button', { name: /submit/i })); expect(await screen.findByText('Email is required')).toBeInTheDocument(); }); });","title":"Error Testing Patterns"},{"location":"questions/testing/strategies_small/#async-testing-best-practices","text":"// \u2705 Good - explicit waiting await waitFor(() => { expect(screen.getByText('Loaded')).toBeInTheDocument(); }); // \u2705 Good - findBy queries (built-in waiting) expect(await screen.findByText('Loaded')).toBeInTheDocument(); // \u274c Bad - implicit waiting await act(async () => { await new Promise(resolve => setTimeout(resolve, 1000)); });","title":"Async Testing Best Practices"},{"location":"questions/testing/strategies_small/#cicd-integration","text":"name: Test Suite on: [push, pull_request] jobs: test: runs-on: ubuntu-latest strategy: matrix: node-version: [16, 18, 20] steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: ${{ matrix.node-version }} - name: Install & Test run: | npm ci npm run lint npm run test:unit -- --coverage npm run test:integration npm run build npm run test:e2e - name: Upload Coverage uses: codecov/codecov-action@v3 visual-regression: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: chromaui/action@v1 with: projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}","title":"CI/CD Integration"},{"location":"questions/testing/strategies_small/#best-practices-senior-level","text":"Test Strategy : - Unit: Fast feedback, edge cases, complex logic - Integration: Component interactions, data flow - E2E: Critical user journeys, cross-browser compatibility Test Structure (AAA Pattern) : describe('feature', () => { it('should behave correctly when condition', () => { // Arrange const mockData = createTestData(); // Act const result = performAction(mockData); // Assert expect(result).toMatchExpectedOutcome(); }); }); Anti-patterns to avoid : - Testing implementation details - Brittle selectors (CSS classes instead of semantic queries) - Shared test state between tests - Over-mocking (testing mocks instead of behavior) - Insufficient error scenario coverage","title":"Best Practices Senior-level"},{"location":"questions/testing/strategies_small/#senior","text":"\u041a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 race conditions? \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u0438\u043a\u0440\u043e\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442-\u0441\u044c\u044e\u0442\u0430? \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 accessibility \u0438 internationalization? Contract testing \u0434\u043b\u044f API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439? Flaky tests - \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f? Test-driven development vs Behavior-driven development? Property-based testing \u0434\u043b\u044f frontend \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/testing/strategies_small/#_3","text":"Coverage : Lines, Functions, Branches, Statements (80%+ target) Mutation Testing : \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432 (\u0443\u0431\u0438\u0432\u0430\u043d\u0438\u0435 \u043c\u0443\u0442\u0430\u043d\u0442\u043e\u0432) Test Pyramid Balance : \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0442\u0435\u0441\u0442\u043e\u0432 Execution Time : Unit (<10s), Integration (<2min), E2E (<10min) Flakiness Rate : <1% \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 Defect Escape Rate : \u0411\u0430\u0433\u0438, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u0430\u043c\u0438","title":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/typescript/advanced-types/","text":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TypeScript \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f utility types, conditional types, mapped types \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 Utility Types 1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 Utility Types // Pick - \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438\u0437 \u0442\u0438\u043f\u0430 interface User { id: string; name: string; email: string; password: string; createdAt: Date; } type PublicUser = Pick<User, 'id' | 'name' | 'email'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { id: string; name: string; email: string; } // Omit - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 type CreateUser = Omit<User, 'id' | 'createdAt'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { name: string; email: string; password: string; } // Partial - \u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 type UpdateUser = Partial<User>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { id?: string; name?: string; email?: string; ... } // Required - \u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 interface OptionalConfig { apiUrl?: string; timeout?: number; retries?: number; } type RequiredConfig = Required<OptionalConfig>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { apiUrl: string; timeout: number; retries: number; } // Record - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0438\u043f \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 type Status = 'pending' | 'approved' | 'rejected'; type StatusMessages = Record<Status, string>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { pending: string; approved: string; rejected: string; } const messages: StatusMessages = { pending: '\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f', approved: '\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u043e', rejected: '\u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e' }; 2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Utility Types // Exclude - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u0438\u0437 union type AllColors = 'red' | 'green' | 'blue' | 'yellow'; type PrimaryColors = Exclude<AllColors, 'yellow'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 'red' | 'green' | 'blue' // Extract - \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u0438\u0437 union type WarmColors = Extract<AllColors, 'red' | 'yellow' | 'orange'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 'red' | 'yellow' // NonNullable - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 null \u0438 undefined type MaybeString = string | null | undefined; type DefiniteString = NonNullable<MaybeString>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: string // ReturnType - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(): Promise<User> { return Promise.resolve({} as User); } type UserPromise = ReturnType<typeof getUser>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Promise<User> // Parameters - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function updateUser(id: string, data: Partial<User>): Promise<User> { return Promise.resolve({} as User); } type UpdateUserParams = Parameters<typeof updateUser>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: [string, Partial<User>] // ConstructorParameters - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 class ApiClient { constructor(baseUrl: string, apiKey: string) {} } type ApiClientParams = ConstructorParameters<typeof ApiClient>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: [string, string] Conditional Types 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0435 Conditional Types // \u041f\u0440\u043e\u0441\u0442\u043e\u0439 conditional type type IsString<T> = T extends string ? true : false; type Test1 = IsString<string>; // true type Test2 = IsString<number>; // false // \u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 type ApiResponse<T> = T extends string ? { message: T } : T extends number ? { code: T } : { data: T }; type StringResponse = ApiResponse<string>; // { message: string } type NumberResponse = ApiResponse<number>; // { code: number } type ObjectResponse = ApiResponse<User>; // { data: User } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 union types type ToArray<T> = T extends any ? T[] : never; type StringOrNumberArray = ToArray<string | number>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: string[] | number[] 2. Distributive Conditional Types // Distributive behavior \u0441 union types type Flatten<T> = T extends (infer U)[] ? U : T; type FlatString = Flatten<string[]>; // string type FlatNumber = Flatten<number>; // number type FlatUnion = Flatten<string[] | number[]>; // string | number // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 distributive behavior type StrictFlatten<T> = [T] extends [(infer U)[]] ? U : T; type StrictResult = StrictFlatten<string[] | number[]>; // string[] | number[] // \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 interface EventMap { click: MouseEvent; keydown: KeyboardEvent; change: Event; } type EventNames = keyof EventMap; // 'click' | 'keydown' | 'change' type EventHandler<T extends EventNames> = T extends keyof EventMap ? (event: EventMap[T]) => void : never; type ClickHandler = EventHandler<'click'>; // (event: MouseEvent) => void Mapped Types 1. \u0411\u0430\u0437\u043e\u0432\u044b\u0435 Mapped Types // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 readonly \u0432\u0435\u0440\u0441\u0438\u0438 \u0442\u0438\u043f\u0430 type Readonly<T> = { readonly [P in keyof T]: T[P]; }; type ReadonlyUser = Readonly<User>; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 mutable \u0432\u0435\u0440\u0441\u0438\u0438 (\u0443\u0431\u0438\u0440\u0430\u0435\u043c readonly) type Mutable<T> = { -readonly [P in keyof T]: T[P]; }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 type Optional<T> = { [P in keyof T]?: T[P]; }; // \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c type Required<T> = { [P in keyof T]-?: T[P]; }; // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 type Stringify<T> = { [P in keyof T]: string; }; type StringifiedUser = Stringify<User>; // \u0412\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f string 2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Mapped Types // Mapped type \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 type NullableKeys<T> = { [K in keyof T]: null extends T[K] ? K : never; }[keyof T]; interface MixedData { id: string; name: string | null; email?: string; count: number | null; } type NullableFields = NullableKeys<MixedData>; // 'name' | 'count' // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 getters type Getters<T> = { [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]; }; type UserGetters = Getters<Pick<User, 'name' | 'email'>>; // { getName: () => string; getEmail: () => string; } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 setters type Setters<T> = { [K in keyof T as `set${Capitalize<string & K>}`]: (value: T[K]) => void; }; // \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f type UserAccessors = Getters<User> & Setters<User>; Template Literal Types 1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 // \u041f\u0440\u043e\u0441\u0442\u044b\u0435 template literal types type Greeting = `Hello ${string}`; type ValidGreeting = Greeting; // \"Hello world\", \"Hello TypeScript\", etc. // \u0421 union types type Color = 'red' | 'green' | 'blue'; type Size = 'small' | 'medium' | 'large'; type Variant = `${Color}-${Size}`; // 'red-small' | 'red-medium' | 'red-large' | 'green-small' | ... // CSS \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 type CSSProperty = | `margin-${'top' | 'right' | 'bottom' | 'left'}` | `padding-${'top' | 'right' | 'bottom' | 'left'}`; // 'margin-top' | 'margin-right' | ... | 'padding-top' | ... 2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Template Literal Types // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 event listeners type EventName<T extends string> = `on${Capitalize<T>}`; type ButtonEvents = EventName<'click' | 'hover' | 'focus'>; // 'onClick' | 'onHover' | 'onFocus' // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API endpoints type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'; type Resource = 'users' | 'posts' | 'comments'; type APIEndpoint = `${HttpMethod} /api/${Resource}`; // 'GET /api/users' | 'POST /api/users' | ... // \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f CSS \u043a\u043b\u0430\u0441\u0441\u043e\u0432 type BEMElement<B extends string, E extends string> = `${B}__${E}`; type BEMModifier<B extends string, M extends string> = `${B}--${M}`; type ButtonElement = BEMElement<'button', 'text' | 'icon'>; // 'button__text' | 'button__icon' type ButtonModifier = BEMModifier<'button', 'primary' | 'secondary'>; // 'button--primary' | 'button--secondary' Infer Keyword 1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 infer // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 type ArrayElement<T> = T extends (infer U)[] ? U : never; type StringElement = ArrayElement<string[]>; // string type NumberElement = ArrayElement<number[]>; // number // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u0438\u0437 Promise type PromiseValue<T> = T extends Promise<infer U> ? U : never; type StringPromise = PromiseValue<Promise<string>>; // string type UserPromise = PromiseValue<Promise<User>>; // User // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 type FirstParameter<T> = T extends (first: infer U, ...args: any[]) => any ? U : never; type GetUserFirstParam = FirstParameter<typeof updateUser>; // string 2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 infer // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0438\u0437 nested Promise type DeepPromiseValue<T> = T extends Promise<infer U> ? U extends Promise<any> ? DeepPromiseValue<U> : U : T; type NestedPromise = Promise<Promise<Promise<string>>>; type FinalValue = DeepPromiseValue<NestedPromise>; // string // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 type FunctionArgs<T> = T extends (...args: infer U) => any ? U : never; function complexFunction(a: string, b: number, c: boolean): void {} type ComplexArgs = FunctionArgs<typeof complexFunction>; // [string, number, boolean] // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Tail \u0442\u0438\u043f\u0430 (\u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u0440\u043e\u043c\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e) type Tail<T extends readonly unknown[]> = T extends readonly [any, ...infer U] ? U : []; type RestNumbers = Tail<[1, 2, 3, 4]>; // [2, 3, 4] type EmptyTail = Tail<[1]>; // [] Recursive Types 1. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f // Nested object type type NestedObject<T> = { [K in keyof T]: T[K] | NestedObject<T[K]>; }; // JSON \u0442\u0438\u043f\u044b type JSONValue = | string | number | boolean | null | JSONObject | JSONArray; interface JSONObject { [key: string]: JSONValue; } interface JSONArray extends Array<JSONValue> {} 2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f // Deep Readonly type DeepReadonly<T> = { readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P]; }; // Deep Partial type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }; // Flatten object type type Flatten<T> = T extends object ? T extends infer O ? { [K in keyof O]: Flatten<O[K]> } : never : T; // Path string type \u0434\u043b\u044f nested objects type PathsToStringProps<T> = T extends string ? [] : { [K in Extract<keyof T, string>]: [K, ...PathsToStringProps<T[K]>]; }[Extract<keyof T, string>]; type JoinPaths<T extends string[]> = T extends [] ? never : T extends [infer Head] ? Head : T extends [infer Head, ...infer Tail] ? Head extends string ? Tail extends string[] ? `${Head}.${JoinPaths<Tail>}` : never : never : never; interface NestedUser { profile: { personal: { name: string; age: number; }; contact: { email: string; }; }; } type UserPaths = JoinPaths<PathsToStringProps<NestedUser>>; // 'profile.personal.name' | 'profile.contact.email' \u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b (Branded Types) // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 declare const __brand: unique symbol; type Brand<T, TBrand> = T & { [__brand]: TBrand }; // \u0422\u0438\u043f\u044b \u0434\u043b\u044f ID \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 type UserId = Brand<string, 'UserId'>; type PostId = Brand<string, 'PostId'>; type SessionId = Brand<string, 'SessionId'>; // \u0424\u0443\u043d\u043a\u0446\u0438\u0438-\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b function createUserId(id: string): UserId { return id as UserId; } function createPostId(id: string): PostId { return id as PostId; } // \u0424\u0443\u043d\u043a\u0446\u0438\u0438, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 function getUserById(id: UserId): Promise<User> { // \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f return Promise.resolve({} as User); } function getPostById(id: PostId): Promise<Post> { // \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f return Promise.resolve({} as Post); } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const userId = createUserId('user-123'); const postId = createPostId('post-456'); // \u042d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 getUserById(userId); getPostById(postId); // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // getUserById(postId); // Error: Argument of type 'PostId' is not assignable to parameter of type 'UserId' // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b type Email = Brand<string, 'Email'>; type URL = Brand<string, 'URL'>; function validateEmail(email: string): Email | null { const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return emailRegex.test(email) ? (email as Email) : null; } function validateURL(url: string): URL | null { try { new URL(url); return url as URL; } catch { return null; } } \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b 1. Builder Pattern \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 interface UserBuilder { name?: string; email?: string; age?: number; } type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>; class FluentUserBuilder { private user: UserBuilder = {}; setName(name: string): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'name'> } { this.user.name = name; return this as any; } setEmail(email: string): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'email'> } { this.user.email = email; return this as any; } setAge(age: number): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'age'> } { this.user.age = age; return this as any; } build<T extends UserBuilder>( this: FluentUserBuilder & { user: T } ): T extends RequiredFields<UserBuilder, 'name' | 'email'> ? User : 'Missing required fields: name and email' { return this.user as any; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const user = new FluentUserBuilder() .setName('John') .setEmail('john@example.com') .setAge(30) .build(); // User // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // const invalidUser = new FluentUserBuilder() // .setName('John') // .build(); // Error: Missing required fields 2. Type-safe event system interface EventMap { 'user:created': { user: User }; 'user:updated': { user: User; changes: Partial<User> }; 'user:deleted': { userId: string }; 'post:created': { post: Post }; } class TypedEventEmitter { private listeners: { [K in keyof EventMap]?: Array<(data: EventMap[K]) => void>; } = {}; on<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event]!.push(listener); } emit<K extends keyof EventMap>(event: K, data: EventMap[K]): void { const eventListeners = this.listeners[event]; if (eventListeners) { eventListeners.forEach(listener => listener(data)); } } off<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { const eventListeners = this.listeners[event]; if (eventListeners) { const index = eventListeners.indexOf(listener); if (index > -1) { eventListeners.splice(index, 1); } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const emitter = new TypedEventEmitter(); emitter.on('user:created', (data) => { // data \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a { user: User } console.log('User created:', data.user.name); }); emitter.emit('user:created', { user: {} as User }); // \u041e\u0448\u0438\u0431\u043a\u0430 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 // emitter.emit('user:created', { post: {} as Post }); // Error Best Practices \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u0442\u0438\u043f\u044b : \u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 strict \u0440\u0435\u0436\u0438\u043c \u0432 tsconfig.json \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 any : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 unknown \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0442\u0438\u043f\u043e\u0432 : \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b : \u0414\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (ID, email, URL) Readonly \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e : \u0414\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 immutable, \u0433\u0434\u0435 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e Type guards : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f runtime \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0442\u0438\u043f\u043e\u0432 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b React Context API - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f React \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 State Management - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TypeScript - \u041e\u043f\u044b\u0442 \u0441 conditional \u0438 mapped types - \u0417\u043d\u0430\u043d\u0438\u0435 utility types \u0438 \u0443\u043c\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0438 \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0441 type-safe \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u043c\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 interface \u0438 type - \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 conditional types? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 mapped types \u0438 \u043a\u043e\u0433\u0434\u0430 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c? - \u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c type-safe API? - \u041a\u0430\u043a \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 JavaScript \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b?","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript"},{"location":"questions/typescript/advanced-types/#typescript","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript"},{"location":"questions/typescript/advanced-types/#_1","text":"\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TypeScript \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f utility types, conditional types, mapped types \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"questions/typescript/advanced-types/#_2","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"},{"location":"questions/typescript/advanced-types/#utility-types","text":"","title":"Utility Types"},{"location":"questions/typescript/advanced-types/#1-utility-types","text":"// Pick - \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438\u0437 \u0442\u0438\u043f\u0430 interface User { id: string; name: string; email: string; password: string; createdAt: Date; } type PublicUser = Pick<User, 'id' | 'name' | 'email'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { id: string; name: string; email: string; } // Omit - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 type CreateUser = Omit<User, 'id' | 'createdAt'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { name: string; email: string; password: string; } // Partial - \u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 type UpdateUser = Partial<User>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { id?: string; name?: string; email?: string; ... } // Required - \u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 interface OptionalConfig { apiUrl?: string; timeout?: number; retries?: number; } type RequiredConfig = Required<OptionalConfig>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { apiUrl: string; timeout: number; retries: number; } // Record - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0438\u043f \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 type Status = 'pending' | 'approved' | 'rejected'; type StatusMessages = Record<Status, string>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { pending: string; approved: string; rejected: string; } const messages: StatusMessages = { pending: '\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f', approved: '\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u043e', rejected: '\u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e' };","title":"1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 Utility Types"},{"location":"questions/typescript/advanced-types/#2-utility-types","text":"// Exclude - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u0438\u0437 union type AllColors = 'red' | 'green' | 'blue' | 'yellow'; type PrimaryColors = Exclude<AllColors, 'yellow'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 'red' | 'green' | 'blue' // Extract - \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u0438\u0437 union type WarmColors = Extract<AllColors, 'red' | 'yellow' | 'orange'>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 'red' | 'yellow' // NonNullable - \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 null \u0438 undefined type MaybeString = string | null | undefined; type DefiniteString = NonNullable<MaybeString>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: string // ReturnType - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function getUser(): Promise<User> { return Promise.resolve({} as User); } type UserPromise = ReturnType<typeof getUser>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Promise<User> // Parameters - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0438\u043f\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 function updateUser(id: string, data: Partial<User>): Promise<User> { return Promise.resolve({} as User); } type UpdateUserParams = Parameters<typeof updateUser>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: [string, Partial<User>] // ConstructorParameters - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 class ApiClient { constructor(baseUrl: string, apiKey: string) {} } type ApiClientParams = ConstructorParameters<typeof ApiClient>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: [string, string]","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Utility Types"},{"location":"questions/typescript/advanced-types/#conditional-types","text":"","title":"Conditional Types"},{"location":"questions/typescript/advanced-types/#1-conditional-types","text":"// \u041f\u0440\u043e\u0441\u0442\u043e\u0439 conditional type type IsString<T> = T extends string ? true : false; type Test1 = IsString<string>; // true type Test2 = IsString<number>; // false // \u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 type ApiResponse<T> = T extends string ? { message: T } : T extends number ? { code: T } : { data: T }; type StringResponse = ApiResponse<string>; // { message: string } type NumberResponse = ApiResponse<number>; // { code: number } type ObjectResponse = ApiResponse<User>; // { data: User } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 union types type ToArray<T> = T extends any ? T[] : never; type StringOrNumberArray = ToArray<string | number>; // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: string[] | number[]","title":"1. \u0411\u0430\u0437\u043e\u0432\u044b\u0435 Conditional Types"},{"location":"questions/typescript/advanced-types/#2-distributive-conditional-types","text":"// Distributive behavior \u0441 union types type Flatten<T> = T extends (infer U)[] ? U : T; type FlatString = Flatten<string[]>; // string type FlatNumber = Flatten<number>; // number type FlatUnion = Flatten<string[] | number[]>; // string | number // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 distributive behavior type StrictFlatten<T> = [T] extends [(infer U)[]] ? U : T; type StrictResult = StrictFlatten<string[] | number[]>; // string[] | number[] // \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 interface EventMap { click: MouseEvent; keydown: KeyboardEvent; change: Event; } type EventNames = keyof EventMap; // 'click' | 'keydown' | 'change' type EventHandler<T extends EventNames> = T extends keyof EventMap ? (event: EventMap[T]) => void : never; type ClickHandler = EventHandler<'click'>; // (event: MouseEvent) => void","title":"2. Distributive Conditional Types"},{"location":"questions/typescript/advanced-types/#mapped-types","text":"","title":"Mapped Types"},{"location":"questions/typescript/advanced-types/#1-mapped-types","text":"// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 readonly \u0432\u0435\u0440\u0441\u0438\u0438 \u0442\u0438\u043f\u0430 type Readonly<T> = { readonly [P in keyof T]: T[P]; }; type ReadonlyUser = Readonly<User>; // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 mutable \u0432\u0435\u0440\u0441\u0438\u0438 (\u0443\u0431\u0438\u0440\u0430\u0435\u043c readonly) type Mutable<T> = { -readonly [P in keyof T]: T[P]; }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 type Optional<T> = { [P in keyof T]?: T[P]; }; // \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c type Required<T> = { [P in keyof T]-?: T[P]; }; // \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 type Stringify<T> = { [P in keyof T]: string; }; type StringifiedUser = Stringify<User>; // \u0412\u0441\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f string","title":"1. \u0411\u0430\u0437\u043e\u0432\u044b\u0435 Mapped Types"},{"location":"questions/typescript/advanced-types/#2-mapped-types","text":"// Mapped type \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 type NullableKeys<T> = { [K in keyof T]: null extends T[K] ? K : never; }[keyof T]; interface MixedData { id: string; name: string | null; email?: string; count: number | null; } type NullableFields = NullableKeys<MixedData>; // 'name' | 'count' // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 getters type Getters<T> = { [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]; }; type UserGetters = Getters<Pick<User, 'name' | 'email'>>; // { getName: () => string; getEmail: () => string; } // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 setters type Setters<T> = { [K in keyof T as `set${Capitalize<string & K>}`]: (value: T[K]) => void; }; // \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f type UserAccessors = Getters<User> & Setters<User>;","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Mapped Types"},{"location":"questions/typescript/advanced-types/#template-literal-types","text":"","title":"Template Literal Types"},{"location":"questions/typescript/advanced-types/#1","text":"// \u041f\u0440\u043e\u0441\u0442\u044b\u0435 template literal types type Greeting = `Hello ${string}`; type ValidGreeting = Greeting; // \"Hello world\", \"Hello TypeScript\", etc. // \u0421 union types type Color = 'red' | 'green' | 'blue'; type Size = 'small' | 'medium' | 'large'; type Variant = `${Color}-${Size}`; // 'red-small' | 'red-medium' | 'red-large' | 'green-small' | ... // CSS \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 type CSSProperty = | `margin-${'top' | 'right' | 'bottom' | 'left'}` | `padding-${'top' | 'right' | 'bottom' | 'left'}`; // 'margin-top' | 'margin-right' | ... | 'padding-top' | ...","title":"1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"questions/typescript/advanced-types/#2-template-literal-types","text":"// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 event listeners type EventName<T extends string> = `on${Capitalize<T>}`; type ButtonEvents = EventName<'click' | 'hover' | 'focus'>; // 'onClick' | 'onHover' | 'onFocus' // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API endpoints type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'; type Resource = 'users' | 'posts' | 'comments'; type APIEndpoint = `${HttpMethod} /api/${Resource}`; // 'GET /api/users' | 'POST /api/users' | ... // \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f CSS \u043a\u043b\u0430\u0441\u0441\u043e\u0432 type BEMElement<B extends string, E extends string> = `${B}__${E}`; type BEMModifier<B extends string, M extends string> = `${B}--${M}`; type ButtonElement = BEMElement<'button', 'text' | 'icon'>; // 'button__text' | 'button__icon' type ButtonModifier = BEMModifier<'button', 'primary' | 'secondary'>; // 'button--primary' | 'button--secondary'","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 Template Literal Types"},{"location":"questions/typescript/advanced-types/#infer-keyword","text":"","title":"Infer Keyword"},{"location":"questions/typescript/advanced-types/#1-infer","text":"// \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 type ArrayElement<T> = T extends (infer U)[] ? U : never; type StringElement = ArrayElement<string[]>; // string type NumberElement = ArrayElement<number[]>; // number // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u0438\u0437 Promise type PromiseValue<T> = T extends Promise<infer U> ? U : never; type StringPromise = PromiseValue<Promise<string>>; // string type UserPromise = PromiseValue<Promise<User>>; // User // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 type FirstParameter<T> = T extends (first: infer U, ...args: any[]) => any ? U : never; type GetUserFirstParam = FirstParameter<typeof updateUser>; // string","title":"1. \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 infer"},{"location":"questions/typescript/advanced-types/#2-infer","text":"// \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0438\u0437 nested Promise type DeepPromiseValue<T> = T extends Promise<infer U> ? U extends Promise<any> ? DeepPromiseValue<U> : U : T; type NestedPromise = Promise<Promise<Promise<string>>>; type FinalValue = DeepPromiseValue<NestedPromise>; // string // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 type FunctionArgs<T> = T extends (...args: infer U) => any ? U : never; function complexFunction(a: string, b: number, c: boolean): void {} type ComplexArgs = FunctionArgs<typeof complexFunction>; // [string, number, boolean] // \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Tail \u0442\u0438\u043f\u0430 (\u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u0440\u043e\u043c\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e) type Tail<T extends readonly unknown[]> = T extends readonly [any, ...infer U] ? U : []; type RestNumbers = Tail<[1, 2, 3, 4]>; // [2, 3, 4] type EmptyTail = Tail<[1]>; // []","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 infer"},{"location":"questions/typescript/advanced-types/#recursive-types","text":"","title":"Recursive Types"},{"location":"questions/typescript/advanced-types/#1_1","text":"// Nested object type type NestedObject<T> = { [K in keyof T]: T[K] | NestedObject<T[K]>; }; // JSON \u0442\u0438\u043f\u044b type JSONValue = | string | number | boolean | null | JSONObject | JSONArray; interface JSONObject { [key: string]: JSONValue; } interface JSONArray extends Array<JSONValue> {}","title":"1. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f"},{"location":"questions/typescript/advanced-types/#2","text":"// Deep Readonly type DeepReadonly<T> = { readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P]; }; // Deep Partial type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }; // Flatten object type type Flatten<T> = T extends object ? T extends infer O ? { [K in keyof O]: Flatten<O[K]> } : never : T; // Path string type \u0434\u043b\u044f nested objects type PathsToStringProps<T> = T extends string ? [] : { [K in Extract<keyof T, string>]: [K, ...PathsToStringProps<T[K]>]; }[Extract<keyof T, string>]; type JoinPaths<T extends string[]> = T extends [] ? never : T extends [infer Head] ? Head : T extends [infer Head, ...infer Tail] ? Head extends string ? Tail extends string[] ? `${Head}.${JoinPaths<Tail>}` : never : never : never; interface NestedUser { profile: { personal: { name: string; age: number; }; contact: { email: string; }; }; } type UserPaths = JoinPaths<PathsToStringProps<NestedUser>>; // 'profile.personal.name' | 'profile.contact.email'","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f"},{"location":"questions/typescript/advanced-types/#branded-types","text":"// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 declare const __brand: unique symbol; type Brand<T, TBrand> = T & { [__brand]: TBrand }; // \u0422\u0438\u043f\u044b \u0434\u043b\u044f ID \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 type UserId = Brand<string, 'UserId'>; type PostId = Brand<string, 'PostId'>; type SessionId = Brand<string, 'SessionId'>; // \u0424\u0443\u043d\u043a\u0446\u0438\u0438-\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b function createUserId(id: string): UserId { return id as UserId; } function createPostId(id: string): PostId { return id as PostId; } // \u0424\u0443\u043d\u043a\u0446\u0438\u0438, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 function getUserById(id: UserId): Promise<User> { // \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f return Promise.resolve({} as User); } function getPostById(id: PostId): Promise<Post> { // \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f return Promise.resolve({} as Post); } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const userId = createUserId('user-123'); const postId = createPostId('post-456'); // \u042d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 getUserById(userId); getPostById(postId); // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // getUserById(postId); // Error: Argument of type 'PostId' is not assignable to parameter of type 'UserId' // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b type Email = Brand<string, 'Email'>; type URL = Brand<string, 'URL'>; function validateEmail(email: string): Email | null { const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return emailRegex.test(email) ? (email as Email) : null; } function validateURL(url: string): URL | null { try { new URL(url); return url as URL; } catch { return null; } }","title":"\u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b (Branded Types)"},{"location":"questions/typescript/advanced-types/#_3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/typescript/advanced-types/#1-builder-pattern","text":"interface UserBuilder { name?: string; email?: string; age?: number; } type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>; class FluentUserBuilder { private user: UserBuilder = {}; setName(name: string): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'name'> } { this.user.name = name; return this as any; } setEmail(email: string): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'email'> } { this.user.email = email; return this as any; } setAge(age: number): FluentUserBuilder & { user: RequiredFields<UserBuilder, 'age'> } { this.user.age = age; return this as any; } build<T extends UserBuilder>( this: FluentUserBuilder & { user: T } ): T extends RequiredFields<UserBuilder, 'name' | 'email'> ? User : 'Missing required fields: name and email' { return this.user as any; } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const user = new FluentUserBuilder() .setName('John') .setEmail('john@example.com') .setAge(30) .build(); // User // \u042d\u0442\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 // const invalidUser = new FluentUserBuilder() // .setName('John') // .build(); // Error: Missing required fields","title":"1. Builder Pattern \u0441 \u0442\u0438\u043f\u0430\u043c\u0438"},{"location":"questions/typescript/advanced-types/#2-type-safe-event-system","text":"interface EventMap { 'user:created': { user: User }; 'user:updated': { user: User; changes: Partial<User> }; 'user:deleted': { userId: string }; 'post:created': { post: Post }; } class TypedEventEmitter { private listeners: { [K in keyof EventMap]?: Array<(data: EventMap[K]) => void>; } = {}; on<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event]!.push(listener); } emit<K extends keyof EventMap>(event: K, data: EventMap[K]): void { const eventListeners = this.listeners[event]; if (eventListeners) { eventListeners.forEach(listener => listener(data)); } } off<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { const eventListeners = this.listeners[event]; if (eventListeners) { const index = eventListeners.indexOf(listener); if (index > -1) { eventListeners.splice(index, 1); } } } } // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const emitter = new TypedEventEmitter(); emitter.on('user:created', (data) => { // data \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a { user: User } console.log('User created:', data.user.name); }); emitter.emit('user:created', { user: {} as User }); // \u041e\u0448\u0438\u0431\u043a\u0430 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 // emitter.emit('user:created', { post: {} as Post }); // Error","title":"2. Type-safe event system"},{"location":"questions/typescript/advanced-types/#best-practices","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u0442\u0438\u043f\u044b : \u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 strict \u0440\u0435\u0436\u0438\u043c \u0432 tsconfig.json \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 any : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 unknown \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0442\u0438\u043f\u043e\u0432 : \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b : \u0414\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (ID, email, URL) Readonly \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e : \u0414\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 immutable, \u0433\u0434\u0435 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e Type guards : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f runtime \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0442\u0438\u043f\u043e\u0432","title":"Best Practices"},{"location":"questions/typescript/advanced-types/#_4","text":"React Context API - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f React \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 State Management - \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Testing Strategies - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430","title":"\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b"},{"location":"questions/typescript/advanced-types/#_5","text":"Senior-level \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f : - \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TypeScript - \u041e\u043f\u044b\u0442 \u0441 conditional \u0438 mapped types - \u0417\u043d\u0430\u043d\u0438\u0435 utility types \u0438 \u0443\u043c\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 - \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0438 \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u041e\u043f\u044b\u0442 \u0441 type-safe \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u043c\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c\u0438 \u0427\u0430\u0441\u0442\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b : - \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 interface \u0438 type - \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 conditional types? - \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 mapped types \u0438 \u043a\u043e\u0433\u0434\u0430 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c? - \u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c type-safe API? - \u041a\u0430\u043a \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 JavaScript \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b?","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"questions/typescript/advanced-types_small/","text":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript (small) Utility Types // \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 Utility Types type PublicUser = Pick<User, 'id' | 'name' | 'email'>; type CreateUser = Omit<User, 'id' | 'createdAt'>; type UpdateUser = Partial<User>; type RequiredConfig = Required<OptionalConfig>; type StatusMessages = Record<Status, string>; // \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 type PrimaryColors = Exclude<AllColors, 'yellow'>; type WarmColors = Extract<AllColors, 'red' | 'yellow'>; type DefiniteString = NonNullable<MaybeString>; type UserPromise = ReturnType<typeof getUser>; type UpdateUserParams = Parameters<typeof updateUser>; type ApiClientParams = ConstructorParameters<typeof ApiClient>; Conditional Types // \u0411\u0430\u0437\u043e\u0432\u044b\u0435 type IsString<T> = T extends string ? true : false; type ApiResponse<T> = T extends string ? { message: T } : T extends number ? { code: T } : { data: T }; // Distributive behavior type Flatten<T> = T extends (infer U)[] ? U : T; type FlatUnion = Flatten<string[] | number[]>; // string | number // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 distributive type StrictFlatten<T> = [T] extends [(infer U)[]] ? U : T; // Event system \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f type EventHandler<T extends EventNames> = T extends keyof EventMap ? (event: EventMap[T]) => void : never; Mapped Types // \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b type Readonly<T> = { readonly [P in keyof T]: T[P] }; type Mutable<T> = { -readonly [P in keyof T]: T[P] }; type Optional<T> = { [P in keyof T]?: T[P] }; type Required<T> = { [P in keyof T]-?: T[P] }; // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0435\u0439 type Getters<T> = { [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]; }; type Setters<T> = { [K in keyof T as `set${Capitalize<string & K>}`]: (value: T[K]) => void; }; // \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 mapped types type NullableKeys<T> = { [K in keyof T]: null extends T[K] ? K : never; }[keyof T]; Template Literal Types // \u0411\u0430\u0437\u043e\u0432\u044b\u0435 type Greeting = `Hello ${string}`; type Variant = `${Color}-${Size}`; type CSSProperty = `margin-${'top' | 'right' | 'bottom' | 'left'}`; // \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 type EventName<T extends string> = `on${Capitalize<T>}`; type APIEndpoint = `${HttpMethod} /api/${Resource}`; type BEMElement<B extends string, E extends string> = `${B}__${E}`; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f type ButtonEvents = EventName<'click' | 'hover' | 'focus'>; // 'onClick' | 'onHover' | 'onFocus' Infer Keyword // \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 type ArrayElement<T> = T extends (infer U)[] ? U : never; type PromiseValue<T> = T extends Promise<infer U> ? U : never; type FirstParameter<T> = T extends (first: infer U, ...args: any[]) => any ? U : never; // \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 type DeepPromiseValue<T> = T extends Promise<infer U> ? U extends Promise<any> ? DeepPromiseValue<U> : U : T; type FunctionArgs<T> = T extends (...args: infer U) => any ? U : never; type Tail<T extends readonly unknown[]> = T extends readonly [any, ...infer U] ? U : []; Recursive Types // Deep \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 type DeepReadonly<T> = { readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P]; }; type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }; // Path \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f nested \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 type PathsToStringProps<T> = T extends string ? [] : { [K in Extract<keyof T, string>]: [K, ...PathsToStringProps<T[K]>]; }[Extract<keyof T, string>]; type JoinPaths<T extends string[]> = T extends [] ? never : T extends [infer Head] ? Head : T extends [infer Head, ...infer Tail] ? Head extends string ? Tail extends string[] ? `${Head}.${JoinPaths<Tail>}` : never : never : never; type UserPaths = JoinPaths<PathsToStringProps<NestedUser>>; // 'profile.personal.name' | 'profile.contact.email' \u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b declare const __brand: unique symbol; type Brand<T, TBrand> = T & { [__brand]: TBrand }; type UserId = Brand<string, 'UserId'>; type Email = Brand<string, 'Email'>; type URL = Brand<string, 'URL'>; function createUserId(id: string): UserId { return id as UserId; } function validateEmail(email: string): Email | null { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email) ? (email as Email) : null; } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0442\u0438\u043f\u043e\u0432 function getUserById(id: UserId): Promise<User> { /* ... */ } // getUserById(postId); // Error: PostId \u043d\u0435 assignable \u043a UserId \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b Type-safe Builder Pattern type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>; class FluentBuilder { setName(name: string): FluentBuilder & { user: RequiredFields<UserBuilder, 'name'> } { return this as any; } build<T extends UserBuilder>( this: FluentBuilder & { user: T } ): T extends RequiredFields<UserBuilder, 'name' | 'email'> ? User : 'Missing required fields' { return this.user as any; } } const user = new FluentBuilder() .setName('John') .setEmail('john@example.com') .build(); // User // const invalid = new FluentBuilder().build(); // Error Type-safe Event System interface EventMap { 'user:created': { user: User }; 'user:updated': { user: User; changes: Partial<User> }; 'post:created': { post: Post }; } class TypedEventEmitter { private listeners: { [K in keyof EventMap]?: Array<(data: EventMap[K]) => void>; } = {}; on<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { (this.listeners[event] ??= []).push(listener); } emit<K extends keyof EventMap>(event: K, data: EventMap[K]): void { this.listeners[event]?.forEach(listener => listener(data)); } } // \u041f\u043e\u043b\u043d\u0430\u044f \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c emitter.on('user:created', (data) => { console.log(data.user.name); // data \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d }); Advanced Utility Types // Deep Pick type DeepPick<T, K extends string> = K extends `${infer Key}.${infer Rest}` ? Key extends keyof T ? { [P in Key]: DeepPick<T[P], Rest> } : never : K extends keyof T ? Pick<T, K> : never; // \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b type Pipe<T extends readonly unknown[], R> = T extends readonly [ (...args: any[]) => infer U, ...infer Rest ] ? Rest extends readonly [(...args: any[]) => any, ...any[]] ? Pipe<Rest, U> : R : R; // Type-level \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u043a\u0430 type Length<T extends readonly any[]> = T['length']; type Add<A extends number, B extends number> = Length< [...Array<A>, ...Array<B>] >; JSON Schema \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f // Runtime to compile-time \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f const userSchema = { type: 'object', properties: { id: { type: 'string' }, name: { type: 'string' }, age: { type: 'number' } }, required: ['id', 'name'] } as const; type FromSchema<T> = T extends { type: 'object'; properties: infer P; required?: infer R; } ? { [K in keyof P]: P[K] extends { type: 'string' } ? string : P[K] extends { type: 'number' } ? number : unknown; } & { [K in R extends readonly (keyof P)[] ? R[number] : never]-?: K extends keyof P ? P[K] extends { type: 'string' } ? string : P[K] extends { type: 'number' } ? number : unknown : never; } : unknown; type UserFromSchema = FromSchema<typeof userSchema>; // { id: string; name: string; age?: number; } Performance \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 union types type OptimizedUnion<T> = T extends any ? T : never; // Tail recursion optimization type TailRecursiveLength<T extends readonly unknown[], Acc extends readonly unknown[] = []> = T extends readonly [any, ...infer Rest] ? TailRecursiveLength<Rest, [...Acc, any]> : Acc['length']; // Type-level \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 type MemoizedComputation<T> = T extends infer U ? ComputeResult<U> : never; \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Senior-level Type Safety : - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 composition over inheritance \u0432 \u0442\u0438\u043f\u0430\u0445 - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 impossible states impossible Performance : - \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0432 \u0442\u0438\u043f\u0430\u0445 (\u043b\u0438\u043c\u0438\u0442 ~45 \u0443\u0440\u043e\u0432\u043d\u0435\u0439) - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 conditional types \u0432\u043c\u0435\u0441\u0442\u043e overloads \u0433\u0434\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e - \u041a\u0435\u0448\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 type-level \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f Maintainability : - \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 helper types \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 meaningful names \u0434\u043b\u044f generic \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 distributive conditional types? \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 interface \u0438 type \u0432 edge cases? \u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c type-safe API client? Template literal types vs string enums? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f performance \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432? \u041a\u0430\u043a \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c HOF \u0438 function composition? Limitations \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TS \u0438 workarounds? Variance \u0432 TypeScript (covariance/contravariance)? Must-know \u0434\u043b\u044f Senior ```typescript // Variance \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 type Covariant = T[]; // T[] is covariant in T type Contravariant = (arg: T) => void; // Functions contravariant in parameters type Invariant = { value: T; setValue: (value: T) => void }; // Higher-kinded types simulation interface HKT { readonly _URI: string; readonly _A: unknown; } interface URItoKind { Maybe: Maybe ; Array: Array ; } // Type-level programming patterns type If = C extends true ? T : F; type Not = If ; type And = If ;","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript (small)"},{"location":"questions/typescript/advanced-types_small/#typescript-small","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0442\u0438\u043f\u044b TypeScript (small)"},{"location":"questions/typescript/advanced-types_small/#utility-types","text":"// \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 Utility Types type PublicUser = Pick<User, 'id' | 'name' | 'email'>; type CreateUser = Omit<User, 'id' | 'createdAt'>; type UpdateUser = Partial<User>; type RequiredConfig = Required<OptionalConfig>; type StatusMessages = Record<Status, string>; // \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 type PrimaryColors = Exclude<AllColors, 'yellow'>; type WarmColors = Extract<AllColors, 'red' | 'yellow'>; type DefiniteString = NonNullable<MaybeString>; type UserPromise = ReturnType<typeof getUser>; type UpdateUserParams = Parameters<typeof updateUser>; type ApiClientParams = ConstructorParameters<typeof ApiClient>;","title":"Utility Types"},{"location":"questions/typescript/advanced-types_small/#conditional-types","text":"// \u0411\u0430\u0437\u043e\u0432\u044b\u0435 type IsString<T> = T extends string ? true : false; type ApiResponse<T> = T extends string ? { message: T } : T extends number ? { code: T } : { data: T }; // Distributive behavior type Flatten<T> = T extends (infer U)[] ? U : T; type FlatUnion = Flatten<string[] | number[]>; // string | number // \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 distributive type StrictFlatten<T> = [T] extends [(infer U)[]] ? U : T; // Event system \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f type EventHandler<T extends EventNames> = T extends keyof EventMap ? (event: EventMap[T]) => void : never;","title":"Conditional Types"},{"location":"questions/typescript/advanced-types_small/#mapped-types","text":"// \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b type Readonly<T> = { readonly [P in keyof T]: T[P] }; type Mutable<T> = { -readonly [P in keyof T]: T[P] }; type Optional<T> = { [P in keyof T]?: T[P] }; type Required<T> = { [P in keyof T]-?: T[P] }; // \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0435\u0439 type Getters<T> = { [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]; }; type Setters<T> = { [K in keyof T as `set${Capitalize<string & K>}`]: (value: T[K]) => void; }; // \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 mapped types type NullableKeys<T> = { [K in keyof T]: null extends T[K] ? K : never; }[keyof T];","title":"Mapped Types"},{"location":"questions/typescript/advanced-types_small/#template-literal-types","text":"// \u0411\u0430\u0437\u043e\u0432\u044b\u0435 type Greeting = `Hello ${string}`; type Variant = `${Color}-${Size}`; type CSSProperty = `margin-${'top' | 'right' | 'bottom' | 'left'}`; // \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 type EventName<T extends string> = `on${Capitalize<T>}`; type APIEndpoint = `${HttpMethod} /api/${Resource}`; type BEMElement<B extends string, E extends string> = `${B}__${E}`; // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f type ButtonEvents = EventName<'click' | 'hover' | 'focus'>; // 'onClick' | 'onHover' | 'onFocus'","title":"Template Literal Types"},{"location":"questions/typescript/advanced-types_small/#infer-keyword","text":"// \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 type ArrayElement<T> = T extends (infer U)[] ? U : never; type PromiseValue<T> = T extends Promise<infer U> ? U : never; type FirstParameter<T> = T extends (first: infer U, ...args: any[]) => any ? U : never; // \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 type DeepPromiseValue<T> = T extends Promise<infer U> ? U extends Promise<any> ? DeepPromiseValue<U> : U : T; type FunctionArgs<T> = T extends (...args: infer U) => any ? U : never; type Tail<T extends readonly unknown[]> = T extends readonly [any, ...infer U] ? U : [];","title":"Infer Keyword"},{"location":"questions/typescript/advanced-types_small/#recursive-types","text":"// Deep \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 type DeepReadonly<T> = { readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P]; }; type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }; // Path \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f nested \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 type PathsToStringProps<T> = T extends string ? [] : { [K in Extract<keyof T, string>]: [K, ...PathsToStringProps<T[K]>]; }[Extract<keyof T, string>]; type JoinPaths<T extends string[]> = T extends [] ? never : T extends [infer Head] ? Head : T extends [infer Head, ...infer Tail] ? Head extends string ? Tail extends string[] ? `${Head}.${JoinPaths<Tail>}` : never : never : never; type UserPaths = JoinPaths<PathsToStringProps<NestedUser>>; // 'profile.personal.name' | 'profile.contact.email'","title":"Recursive Types"},{"location":"questions/typescript/advanced-types_small/#_1","text":"declare const __brand: unique symbol; type Brand<T, TBrand> = T & { [__brand]: TBrand }; type UserId = Brand<string, 'UserId'>; type Email = Brand<string, 'Email'>; type URL = Brand<string, 'URL'>; function createUserId(id: string): UserId { return id as UserId; } function validateEmail(email: string): Email | null { return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email) ? (email as Email) : null; } // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0442\u0438\u043f\u043e\u0432 function getUserById(id: UserId): Promise<User> { /* ... */ } // getUserById(postId); // Error: PostId \u043d\u0435 assignable \u043a UserId","title":"\u0411\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b"},{"location":"questions/typescript/advanced-types_small/#_2","text":"","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"questions/typescript/advanced-types_small/#type-safe-builder-pattern","text":"type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>; class FluentBuilder { setName(name: string): FluentBuilder & { user: RequiredFields<UserBuilder, 'name'> } { return this as any; } build<T extends UserBuilder>( this: FluentBuilder & { user: T } ): T extends RequiredFields<UserBuilder, 'name' | 'email'> ? User : 'Missing required fields' { return this.user as any; } } const user = new FluentBuilder() .setName('John') .setEmail('john@example.com') .build(); // User // const invalid = new FluentBuilder().build(); // Error","title":"Type-safe Builder Pattern"},{"location":"questions/typescript/advanced-types_small/#type-safe-event-system","text":"interface EventMap { 'user:created': { user: User }; 'user:updated': { user: User; changes: Partial<User> }; 'post:created': { post: Post }; } class TypedEventEmitter { private listeners: { [K in keyof EventMap]?: Array<(data: EventMap[K]) => void>; } = {}; on<K extends keyof EventMap>( event: K, listener: (data: EventMap[K]) => void ): void { (this.listeners[event] ??= []).push(listener); } emit<K extends keyof EventMap>(event: K, data: EventMap[K]): void { this.listeners[event]?.forEach(listener => listener(data)); } } // \u041f\u043e\u043b\u043d\u0430\u044f \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c emitter.on('user:created', (data) => { console.log(data.user.name); // data \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d });","title":"Type-safe Event System"},{"location":"questions/typescript/advanced-types_small/#advanced-utility-types","text":"// Deep Pick type DeepPick<T, K extends string> = K extends `${infer Key}.${infer Rest}` ? Key extends keyof T ? { [P in Key]: DeepPick<T[P], Rest> } : never : K extends keyof T ? Pick<T, K> : never; // \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b type Pipe<T extends readonly unknown[], R> = T extends readonly [ (...args: any[]) => infer U, ...infer Rest ] ? Rest extends readonly [(...args: any[]) => any, ...any[]] ? Pipe<Rest, U> : R : R; // Type-level \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u043a\u0430 type Length<T extends readonly any[]> = T['length']; type Add<A extends number, B extends number> = Length< [...Array<A>, ...Array<B>] >;","title":"Advanced Utility Types"},{"location":"questions/typescript/advanced-types_small/#json-schema","text":"// Runtime to compile-time \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f const userSchema = { type: 'object', properties: { id: { type: 'string' }, name: { type: 'string' }, age: { type: 'number' } }, required: ['id', 'name'] } as const; type FromSchema<T> = T extends { type: 'object'; properties: infer P; required?: infer R; } ? { [K in keyof P]: P[K] extends { type: 'string' } ? string : P[K] extends { type: 'number' } ? number : unknown; } & { [K in R extends readonly (keyof P)[] ? R[number] : never]-?: K extends keyof P ? P[K] extends { type: 'string' } ? string : P[K] extends { type: 'number' } ? number : unknown : never; } : unknown; type UserFromSchema = FromSchema<typeof userSchema>; // { id: string; name: string; age?: number; }","title":"JSON Schema \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"questions/typescript/advanced-types_small/#performance","text":"// \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 union types type OptimizedUnion<T> = T extends any ? T : never; // Tail recursion optimization type TailRecursiveLength<T extends readonly unknown[], Acc extends readonly unknown[] = []> = T extends readonly [any, ...infer Rest] ? TailRecursiveLength<Rest, [...Acc, any]> : Acc['length']; // Type-level \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 type MemoizedComputation<T> = T extends infer U ? ComputeResult<U> : never;","title":"Performance \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f"},{"location":"questions/typescript/advanced-types_small/#senior-level","text":"Type Safety : - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0440\u0435\u043d\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 composition over inheritance \u0432 \u0442\u0438\u043f\u0430\u0445 - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 impossible states impossible Performance : - \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0432 \u0442\u0438\u043f\u0430\u0445 (\u043b\u0438\u043c\u0438\u0442 ~45 \u0443\u0440\u043e\u0432\u043d\u0435\u0439) - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 conditional types \u0432\u043c\u0435\u0441\u0442\u043e overloads \u0433\u0434\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e - \u041a\u0435\u0448\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 type-level \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f Maintainability : - \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 helper types \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 meaningful names \u0434\u043b\u044f generic \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Senior-level"},{"location":"questions/typescript/advanced-types_small/#senior","text":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 distributive conditional types? \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 interface \u0438 type \u0432 edge cases? \u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c type-safe API client? Template literal types vs string enums? \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f performance \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432? \u041a\u0430\u043a \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c HOF \u0438 function composition? Limitations \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u043e\u0432 TS \u0438 workarounds? Variance \u0432 TypeScript (covariance/contravariance)?","title":"\u0427\u0430\u0441\u0442\u044b\u0435 Senior \u0432\u043e\u043f\u0440\u043e\u0441\u044b"},{"location":"questions/typescript/advanced-types_small/#must-know-senior","text":"```typescript // Variance \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 type Covariant = T[]; // T[] is covariant in T type Contravariant = (arg: T) => void; // Functions contravariant in parameters type Invariant = { value: T; setValue: (value: T) => void }; // Higher-kinded types simulation interface HKT { readonly _URI: string; readonly _A: unknown; } interface URItoKind { Maybe: Maybe ; Array: Array ; } // Type-level programming patterns type If = C extends true ? T : F; type Not = If ; type And = If ;","title":"Must-know \u0434\u043b\u044f Senior"}]}